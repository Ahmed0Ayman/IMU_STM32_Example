
IMU_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a458  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800a608  0800a608  0001a608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ace8  0800ace8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ace8  0800ace8  0001ace8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acf0  0800acf0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acf0  0800acf0  0001acf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acf4  0800acf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800acf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200001ec  0800aee4  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  0800aee4  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdc9  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d37  00000000  00000000  0002cfe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002ed20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002f6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a55  00000000  00000000  00030020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6e3  00000000  00000000  00054a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d71f7  00000000  00000000  00061158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013834f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004148  00000000  00000000  001383a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0013c4ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0013c528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a5f0 	.word	0x0800a5f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	0800a5f0 	.word	0x0800a5f0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MPU6050_GYRO_CALIBRATION_FUN>:
/* brief : this function used to Calibrate the MPU gyro this function PRIVATEM used only by this file
 * param : flag  used to mark that the calibration is performed succefully
 * return : void
 */
PRIVATRE void MPU6050_GYRO_CALIBRATION_FUN(_Bool * flag)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af04      	add	r7, sp, #16
 8001012:	6078      	str	r0, [r7, #4]
	int32_t READED_DATA[3]={0};
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
	uint8_t data[6] = { 0 };
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	2300      	movs	r3, #0
 8001026:	81bb      	strh	r3, [r7, #12]
	for(int i=0;i<2000;i++)
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	e03f      	b.n	80010ae <MPU6050_GYRO_CALIBRATION_FUN+0xa2>
	{
		HAL_I2C_Mem_Read(&hi2c2, MPU6050_DEVICE_ADDR, MPU6050_GYRO_XOUT_H_R, 1,
 800102e:	2314      	movs	r3, #20
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	2306      	movs	r3, #6
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	2243      	movs	r2, #67	; 0x43
 8001040:	21d0      	movs	r1, #208	; 0xd0
 8001042:	482e      	ldr	r0, [pc, #184]	; (80010fc <MPU6050_GYRO_CALIBRATION_FUN+0xf0>)
 8001044:	f001 fc1c 	bl	8002880 <HAL_I2C_Mem_Read>
				data, 6,20);
		MPU_REGS_DATA_STATIC.XG_Value = (uint16_t) (data[0] << 8
 8001048:	7a3b      	ldrb	r3, [r7, #8]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
				| data[1]);
 800104e:	7a7b      	ldrb	r3, [r7, #9]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21a      	sxth	r2, r3
		MPU_REGS_DATA_STATIC.XG_Value = (uint16_t) (data[0] << 8
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <MPU6050_GYRO_CALIBRATION_FUN+0xf4>)
 8001058:	80da      	strh	r2, [r3, #6]
		MPU_REGS_DATA_STATIC.YG_Value  = (uint16_t) (data[2] << 8
 800105a:	7abb      	ldrb	r3, [r7, #10]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
				| data[3]);
 8001060:	7afb      	ldrb	r3, [r7, #11]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
		MPU_REGS_DATA_STATIC.YG_Value  = (uint16_t) (data[2] << 8
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <MPU6050_GYRO_CALIBRATION_FUN+0xf4>)
 800106a:	811a      	strh	r2, [r3, #8]
		MPU_REGS_DATA_STATIC.ZG_Value  = (uint16_t) (data[4] << 8
 800106c:	7b3b      	ldrb	r3, [r7, #12]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
				| data[5]);
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21a      	sxth	r2, r3
		MPU_REGS_DATA_STATIC.ZG_Value  = (uint16_t) (data[4] << 8
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <MPU6050_GYRO_CALIBRATION_FUN+0xf4>)
 800107c:	815a      	strh	r2, [r3, #10]

	READED_DATA[0] += MPU_REGS_DATA_STATIC.XG_Value ;
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4a1f      	ldr	r2, [pc, #124]	; (8001100 <MPU6050_GYRO_CALIBRATION_FUN+0xf4>)
 8001082:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001086:	4413      	add	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
	READED_DATA[1] += MPU_REGS_DATA_STATIC.YG_Value ;
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <MPU6050_GYRO_CALIBRATION_FUN+0xf4>)
 800108e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001092:	4413      	add	r3, r2
 8001094:	617b      	str	r3, [r7, #20]
	READED_DATA[2] += MPU_REGS_DATA_STATIC.ZG_Value ;
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4a19      	ldr	r2, [pc, #100]	; (8001100 <MPU6050_GYRO_CALIBRATION_FUN+0xf4>)
 800109a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800109e:	4413      	add	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
	HAL_Delay(10);
 80010a2:	200a      	movs	r0, #10
 80010a4:	f000 fef8 	bl	8001e98 <HAL_Delay>
	for(int i=0;i<2000;i++)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	3301      	adds	r3, #1
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010b4:	dbbb      	blt.n	800102e <MPU6050_GYRO_CALIBRATION_FUN+0x22>
	}
	// now we can calculate the offset
	GYRO_OFFSET_X = READED_DATA[0]/2000 ;
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4a12      	ldr	r2, [pc, #72]	; (8001104 <MPU6050_GYRO_CALIBRATION_FUN+0xf8>)
 80010ba:	fb82 1203 	smull	r1, r2, r2, r3
 80010be:	11d2      	asrs	r2, r2, #7
 80010c0:	17db      	asrs	r3, r3, #31
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	4a10      	ldr	r2, [pc, #64]	; (8001108 <MPU6050_GYRO_CALIBRATION_FUN+0xfc>)
 80010c6:	6013      	str	r3, [r2, #0]
	GYRO_OFFSET_Y = READED_DATA[1]/2000 ;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <MPU6050_GYRO_CALIBRATION_FUN+0xf8>)
 80010cc:	fb82 1203 	smull	r1, r2, r2, r3
 80010d0:	11d2      	asrs	r2, r2, #7
 80010d2:	17db      	asrs	r3, r3, #31
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	4a0d      	ldr	r2, [pc, #52]	; (800110c <MPU6050_GYRO_CALIBRATION_FUN+0x100>)
 80010d8:	6013      	str	r3, [r2, #0]
	GYRO_OFFSET_Z = READED_DATA[2]/2000 ;
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	4a09      	ldr	r2, [pc, #36]	; (8001104 <MPU6050_GYRO_CALIBRATION_FUN+0xf8>)
 80010de:	fb82 1203 	smull	r1, r2, r2, r3
 80010e2:	11d2      	asrs	r2, r2, #7
 80010e4:	17db      	asrs	r3, r3, #31
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	4a09      	ldr	r2, [pc, #36]	; (8001110 <MPU6050_GYRO_CALIBRATION_FUN+0x104>)
 80010ea:	6013      	str	r3, [r2, #0]


	// set the flag to true to indicate that the sensor is calibrated
	*flag = true ;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]

}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000240 	.word	0x20000240
 8001100:	20000224 	.word	0x20000224
 8001104:	10624dd3 	.word	0x10624dd3
 8001108:	20000208 	.word	0x20000208
 800110c:	2000020c 	.word	0x2000020c
 8001110:	20000210 	.word	0x20000210

08001114 <MPU6050_ALL_GYRO_ANGELS>:

/* brief : this function used to get the GYRO angles
 * param : ANGELS_VAR_STRUCT is a data structure that in general hold all MPU Angles
 * return : void
*/
void MPU6050_ALL_GYRO_ANGELS(MPU6050_ANGELS_t *ANGELS_VAR_STRUCT) {
 8001114:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]


/* first before initialize gyro we need to read the accel data to make it as start value of gyro */
	if(IsGYROInitialized == false)
 800111e:	4b56      	ldr	r3, [pc, #344]	; (8001278 <MPU6050_ALL_GYRO_ANGELS+0x164>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f083 0301 	eor.w	r3, r3, #1
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d007      	beq.n	800113c <MPU6050_ALL_GYRO_ANGELS+0x28>
	{
	ANGELS_VAR_STRUCT->GYRO_ANGLE_PITCH = ANGELS_VAR_STRUCT->ACCEL_ANGLE_PITCH ;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	601a      	str	r2, [r3, #0]
	ANGELS_VAR_STRUCT->GYRO_ANGLE_ROLL  = ANGELS_VAR_STRUCT->ACCEL_ANGLE_ROLL  ;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	605a      	str	r2, [r3, #4]
	}

/* now  we read gyro data */
	MPU6050_ALL_GYRO_Read(&MPU_REGS_DATA_STATIC);
 800113c:	484f      	ldr	r0, [pc, #316]	; (800127c <MPU6050_ALL_GYRO_ANGELS+0x168>)
 800113e:	f000 f949 	bl	80013d4 <MPU6050_ALL_GYRO_Read>

	ANGELS_VAR_STRUCT->GYRO_ANGLE_PITCH += (float) MPU_REGS_DATA_STATIC.XG_Value
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	ed93 7a00 	vldr	s14, [r3]
 8001148:	4b4c      	ldr	r3, [pc, #304]	; (800127c <MPU6050_ALL_GYRO_ANGELS+0x168>)
 800114a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			* (1/(MPU_SCALL * ((1000 / MPU_REFRUSH_READING_RATE))));
 8001156:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001280 <MPU6050_ALL_GYRO_ANGELS+0x16c>
 800115a:	ee67 7aa6 	vmul.f32	s15, s15, s13
	ANGELS_VAR_STRUCT->GYRO_ANGLE_PITCH += (float) MPU_REGS_DATA_STATIC.XG_Value
 800115e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	edc3 7a00 	vstr	s15, [r3]

	ANGELS_VAR_STRUCT->GYRO_ANGLE_ROLL += (float) MPU_REGS_DATA_STATIC.YG_Value
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	ed93 7a01 	vldr	s14, [r3, #4]
 800116e:	4b43      	ldr	r3, [pc, #268]	; (800127c <MPU6050_ALL_GYRO_ANGELS+0x168>)
 8001170:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			* (1/(MPU_SCALL * ((1000 / MPU_REFRUSH_READING_RATE))));
 800117c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001280 <MPU6050_ALL_GYRO_ANGELS+0x16c>
 8001180:	ee67 7aa6 	vmul.f32	s15, s15, s13
	ANGELS_VAR_STRUCT->GYRO_ANGLE_ROLL += (float) MPU_REGS_DATA_STATIC.YG_Value
 8001184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edc3 7a01 	vstr	s15, [r3, #4]


	ANGELS_VAR_STRUCT->GYRO_ANGLE_ROLL  -= ANGELS_VAR_STRUCT->GYRO_ANGLE_PITCH
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f9e8 	bl	8000568 <__aeabi_f2d>
 8001198:	4604      	mov	r4, r0
 800119a:	460d      	mov	r5, r1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f9e1 	bl	8000568 <__aeabi_f2d>
 80011a6:	4680      	mov	r8, r0
 80011a8:	4689      	mov	r9, r1
			* sin((float) MPU_REGS_DATA_STATIC.ZG_Value
 80011aa:	4b34      	ldr	r3, [pc, #208]	; (800127c <MPU6050_ALL_GYRO_ANGELS+0x168>)
 80011ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							* ((1/(MPU_SCALL * ((1000 / MPU_REFRUSH_READING_RATE))))
 80011b8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001284 <MPU6050_ALL_GYRO_ANGELS+0x170>
 80011bc:	ee67 7a87 	vmul.f32	s15, s15, s14
			* sin((float) MPU_REGS_DATA_STATIC.ZG_Value
 80011c0:	ee17 0a90 	vmov	r0, s15
 80011c4:	f7ff f9d0 	bl	8000568 <__aeabi_f2d>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	ec43 2b10 	vmov	d0, r2, r3
 80011d0:	f007 fe8e 	bl	8008ef0 <sin>
 80011d4:	ec53 2b10 	vmov	r2, r3, d0
 80011d8:	4640      	mov	r0, r8
 80011da:	4649      	mov	r1, r9
 80011dc:	f7ff fa1c 	bl	8000618 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
	ANGELS_VAR_STRUCT->GYRO_ANGLE_ROLL  -= ANGELS_VAR_STRUCT->GYRO_ANGLE_PITCH
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff f85e 	bl	80002a8 <__aeabi_dsub>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fd08 	bl	8000c08 <__aeabi_d2f>
 80011f8:	4602      	mov	r2, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	605a      	str	r2, [r3, #4]
									* DegreeToRadian));
	ANGELS_VAR_STRUCT->GYRO_ANGLE_PITCH += ANGELS_VAR_STRUCT->GYRO_ANGLE_ROLL
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f9b0 	bl	8000568 <__aeabi_f2d>
 8001208:	4604      	mov	r4, r0
 800120a:	460d      	mov	r5, r1
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f9a9 	bl	8000568 <__aeabi_f2d>
 8001216:	4680      	mov	r8, r0
 8001218:	4689      	mov	r9, r1
			* sin((float) MPU_REGS_DATA_STATIC.ZG_Value
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <MPU6050_ALL_GYRO_ANGELS+0x168>)
 800121c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001220:	ee07 3a90 	vmov	s15, r3
 8001224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							* ((1/(MPU_SCALL * ((1000 / MPU_REFRUSH_READING_RATE))))
 8001228:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001284 <MPU6050_ALL_GYRO_ANGELS+0x170>
 800122c:	ee67 7a87 	vmul.f32	s15, s15, s14
			* sin((float) MPU_REGS_DATA_STATIC.ZG_Value
 8001230:	ee17 0a90 	vmov	r0, s15
 8001234:	f7ff f998 	bl	8000568 <__aeabi_f2d>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	ec43 2b10 	vmov	d0, r2, r3
 8001240:	f007 fe56 	bl	8008ef0 <sin>
 8001244:	ec53 2b10 	vmov	r2, r3, d0
 8001248:	4640      	mov	r0, r8
 800124a:	4649      	mov	r1, r9
 800124c:	f7ff f9e4 	bl	8000618 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
	ANGELS_VAR_STRUCT->GYRO_ANGLE_PITCH += ANGELS_VAR_STRUCT->GYRO_ANGLE_ROLL
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f828 	bl	80002ac <__adddf3>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fcd0 	bl	8000c08 <__aeabi_d2f>
 8001268:	4602      	mov	r2, r0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	601a      	str	r2, [r3, #0]
									* DegreeToRadian));


}/* END_FUN MPU6050_ALL_GYRO_ANGELS() */
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001278:	20000221 	.word	0x20000221
 800127c:	20000224 	.word	0x20000224
 8001280:	38a01683 	.word	0x38a01683
 8001284:	35b24620 	.word	0x35b24620

08001288 <MPU6050_ALL_ACCEL_ANGELS>:

/* brief : this function used to get the accel angles
 * param : ANGELS_VAR_STRUCT is a data structure that in general hold all MPU Angles
 * return : void
*/
void MPU6050_ALL_ACCEL_ANGELS(MPU6050_ANGELS_t *ANGELS_VAR_STRUCT) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	float accel_x,accel_y,accel_z,accel_total=0;
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
	MPU6050_ALL_ACCEL_Read(&MPU_REGS_DATA_STATIC);
 8001296:	484c      	ldr	r0, [pc, #304]	; (80013c8 <MPU6050_ALL_ACCEL_ANGELS+0x140>)
 8001298:	f000 f8fa 	bl	8001490 <MPU6050_ALL_ACCEL_Read>


accel_x = ((float)MPU_REGS_DATA_STATIC.XA_Value)/ MPU6050_ACCEL_SCALL;
 800129c:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <MPU6050_ALL_ACCEL_ANGELS+0x140>)
 800129e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80013cc <MPU6050_ALL_ACCEL_ANGELS+0x144>
 80012ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b2:	edc7 7a04 	vstr	s15, [r7, #16]
accel_y = ((float)MPU_REGS_DATA_STATIC.YA_Value)/ MPU6050_ACCEL_SCALL;
 80012b6:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <MPU6050_ALL_ACCEL_ANGELS+0x140>)
 80012b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c4:	eddf 6a41 	vldr	s13, [pc, #260]	; 80013cc <MPU6050_ALL_ACCEL_ANGELS+0x144>
 80012c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012cc:	edc7 7a03 	vstr	s15, [r7, #12]
accel_z = (((float)MPU_REGS_DATA_STATIC.ZA_Value)/ MPU6050_ACCEL_SCALL);
 80012d0:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <MPU6050_ALL_ACCEL_ANGELS+0x140>)
 80012d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012de:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80013cc <MPU6050_ALL_ACCEL_ANGELS+0x144>
 80012e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e6:	edc7 7a02 	vstr	s15, [r7, #8]
accel_total = sqrt((accel_x*accel_x)+(accel_y*accel_y)+(accel_z*accel_z));
 80012ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001302:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130a:	ee17 0a90 	vmov	r0, s15
 800130e:	f7ff f92b 	bl	8000568 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	ec43 2b10 	vmov	d0, r2, r3
 800131a:	f007 fe77 	bl	800900c <sqrt>
 800131e:	ec53 2b10 	vmov	r2, r3, d0
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fc6f 	bl	8000c08 <__aeabi_d2f>
 800132a:	4603      	mov	r3, r0
 800132c:	617b      	str	r3, [r7, #20]
ANGELS_VAR_STRUCT->ACCEL_ANGLE_PITCH = asin(accel_y/accel_total)*57.296;
 800132e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001332:	edd7 7a05 	vldr	s15, [r7, #20]
 8001336:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800133a:	ee16 0a90 	vmov	r0, s13
 800133e:	f7ff f913 	bl	8000568 <__aeabi_f2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	ec43 2b10 	vmov	d0, r2, r3
 800134a:	f007 fe25 	bl	8008f98 <asin>
 800134e:	ec51 0b10 	vmov	r0, r1, d0
 8001352:	a31b      	add	r3, pc, #108	; (adr r3, 80013c0 <MPU6050_ALL_ACCEL_ANGELS+0x138>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f95e 	bl	8000618 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc50 	bl	8000c08 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	60da      	str	r2, [r3, #12]
ANGELS_VAR_STRUCT->ACCEL_ANGLE_ROLL = asin(accel_x/accel_total)*57.296;
 800136e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001372:	edd7 7a05 	vldr	s15, [r7, #20]
 8001376:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800137a:	ee16 0a90 	vmov	r0, s13
 800137e:	f7ff f8f3 	bl	8000568 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	ec43 2b10 	vmov	d0, r2, r3
 800138a:	f007 fe05 	bl	8008f98 <asin>
 800138e:	ec51 0b10 	vmov	r0, r1, d0
 8001392:	a30b      	add	r3, pc, #44	; (adr r3, 80013c0 <MPU6050_ALL_ACCEL_ANGELS+0x138>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff f93e 	bl	8000618 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fc30 	bl	8000c08 <__aeabi_d2f>
 80013a8:	4602      	mov	r2, r0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	611a      	str	r2, [r3, #16]
IsGYROInitialized = true ;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MPU6050_ALL_ACCEL_ANGELS+0x148>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]


}/* END_FUN MPU6050_ALL_ACCEL_ANGELS() */
 80013b4:	bf00      	nop
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	f3af 8000 	nop.w
 80013c0:	53f7ced9 	.word	0x53f7ced9
 80013c4:	404ca5e3 	.word	0x404ca5e3
 80013c8:	20000224 	.word	0x20000224
 80013cc:	46800200 	.word	0x46800200
 80013d0:	20000221 	.word	0x20000221

080013d4 <MPU6050_ALL_GYRO_Read>:

/* brief : this function used to read the MPU GYRO register
 * param : ALL_Axis_Var is a data structure that in general hold all MPU readed data register
 * return : void
*/
void MPU6050_ALL_GYRO_Read(MPU6050_DATA_t *ALL_Axis_Var) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af04      	add	r7, sp, #16
 80013da:	6078      	str	r0, [r7, #4]


	if (GYRO_CALIBRATED == false) {
 80013dc:	4b27      	ldr	r3, [pc, #156]	; (800147c <MPU6050_ALL_GYRO_Read+0xa8>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	f083 0301 	eor.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <MPU6050_ALL_GYRO_Read+0x1c>
		MPU6050_GYRO_CALIBRATION_FUN(&GYRO_CALIBRATED);
 80013ea:	4824      	ldr	r0, [pc, #144]	; (800147c <MPU6050_ALL_GYRO_Read+0xa8>)
 80013ec:	f7ff fe0e 	bl	800100c <MPU6050_GYRO_CALIBRATION_FUN>
	}
	uint8_t data[6] = { 0 };
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	2300      	movs	r3, #0
 80013f6:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_DEVICE_ADDR, MPU6050_GYRO_XOUT_H_R, 1,
 80013f8:	2314      	movs	r3, #20
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2306      	movs	r3, #6
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	f107 0308 	add.w	r3, r7, #8
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2301      	movs	r3, #1
 8001408:	2243      	movs	r2, #67	; 0x43
 800140a:	21d0      	movs	r1, #208	; 0xd0
 800140c:	481c      	ldr	r0, [pc, #112]	; (8001480 <MPU6050_ALL_GYRO_Read+0xac>)
 800140e:	f001 fa37 	bl	8002880 <HAL_I2C_Mem_Read>
			data, 6, 20);
	ALL_Axis_Var->XG_Value = (uint16_t)((data[0] << 8 | data[1]) - GYRO_OFFSET_X);
 8001412:	7a3b      	ldrb	r3, [r7, #8]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	7a7b      	ldrb	r3, [r7, #9]
 800141a:	b21b      	sxth	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b21b      	sxth	r3, r3
 8001420:	b29a      	uxth	r2, r3
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MPU6050_ALL_GYRO_Read+0xb0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	b29b      	uxth	r3, r3
 800142c:	b21a      	sxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	80da      	strh	r2, [r3, #6]
	ALL_Axis_Var->YG_Value = (uint16_t)((data[2] << 8 | data[3]) - GYRO_OFFSET_Y);
 8001432:	7abb      	ldrb	r3, [r7, #10]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	b21a      	sxth	r2, r3
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21b      	sxth	r3, r3
 8001440:	b29a      	uxth	r2, r3
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MPU6050_ALL_GYRO_Read+0xb4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	b29b      	uxth	r3, r3
 800144c:	b21a      	sxth	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	811a      	strh	r2, [r3, #8]
	ALL_Axis_Var->ZG_Value = (uint16_t)((data[4] << 8 | data[5]) - GYRO_OFFSET_Z);
 8001452:	7b3b      	ldrb	r3, [r7, #12]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21a      	sxth	r2, r3
 8001458:	7b7b      	ldrb	r3, [r7, #13]
 800145a:	b21b      	sxth	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	b21b      	sxth	r3, r3
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <MPU6050_ALL_GYRO_Read+0xb8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	b29b      	uxth	r3, r3
 800146c:	b21a      	sxth	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	815a      	strh	r2, [r3, #10]




}/* END_FUN MPU6050_ALL_GYRO_Read() */
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000220 	.word	0x20000220
 8001480:	20000240 	.word	0x20000240
 8001484:	20000208 	.word	0x20000208
 8001488:	2000020c 	.word	0x2000020c
 800148c:	20000210 	.word	0x20000210

08001490 <MPU6050_ALL_ACCEL_Read>:

/* brief : this function used to read the MPU accel register
 * param : ALL_Axis_Var is a data structure that in general hold all MPU readed data register
 * return : void
*/
void MPU6050_ALL_ACCEL_Read(MPU6050_DATA_t *ALL_Axis_Var) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af04      	add	r7, sp, #16
 8001496:	6078      	str	r0, [r7, #4]


	uint8_t data[6] = { 0 };
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	2300      	movs	r3, #0
 800149e:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_DEVICE_ADDR, MPU6050_ACCEL_XOUT_H_R, 1,
 80014a0:	2314      	movs	r3, #20
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	2306      	movs	r3, #6
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	223b      	movs	r2, #59	; 0x3b
 80014b2:	21d0      	movs	r1, #208	; 0xd0
 80014b4:	481b      	ldr	r0, [pc, #108]	; (8001524 <MPU6050_ALL_ACCEL_Read+0x94>)
 80014b6:	f001 f9e3 	bl	8002880 <HAL_I2C_Mem_Read>
			data, 6, 20);
	ALL_Axis_Var->XA_Value = (uint16_t)(((data[0] << 8)  | data[1])-ACCEL_OFFSET_X);
 80014ba:	7a3b      	ldrb	r3, [r7, #8]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b21a      	sxth	r2, r3
 80014c0:	7a7b      	ldrb	r3, [r7, #9]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MPU6050_ALL_ACCEL_Read+0x98>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	801a      	strh	r2, [r3, #0]
	ALL_Axis_Var->YA_Value = (uint16_t) (((data[2] << 8) | data[3])-ACCEL_OFFSET_Y);
 80014da:	7abb      	ldrb	r3, [r7, #10]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	b21a      	sxth	r2, r3
 80014e0:	7afb      	ldrb	r3, [r7, #11]
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <MPU6050_ALL_ACCEL_Read+0x9c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	805a      	strh	r2, [r3, #2]
	ALL_Axis_Var->ZA_Value = (uint16_t) (((data[4] << 8) | data[5])-ACCEL_OFFSET_Z);
 80014fa:	7b3b      	ldrb	r3, [r7, #12]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b21a      	sxth	r2, r3
 8001500:	7b7b      	ldrb	r3, [r7, #13]
 8001502:	b21b      	sxth	r3, r3
 8001504:	4313      	orrs	r3, r2
 8001506:	b21b      	sxth	r3, r3
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MPU6050_ALL_ACCEL_Read+0xa0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	b21a      	sxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	809a      	strh	r2, [r3, #4]



}/* END_FUN MPU6050_ALL_ACCEL_Read() */
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000240 	.word	0x20000240
 8001528:	20000214 	.word	0x20000214
 800152c:	20000218 	.word	0x20000218
 8001530:	2000021c 	.word	0x2000021c

08001534 <MPU6050_SET_Config>:
 *  return MPU6050_OK if this function successfully set registers
 *  you can add and remove any registers that you need to config
 *  the configuration will be in form of 2D array first byte hold the address register and the second byte hold
 *  the value that you need to assign to that register
 ****************************************************************************************/
void MPU6050_SET_Config(uint8_t *Config_arr, uint8_t array_size) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af04      	add	r7, sp, #16
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]

	for (uint8_t i = 0; i < (array_size / 2); i++) {
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e019      	b.n	800157a <MPU6050_SET_Config+0x46>
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_DEVICE_ADDR, *(Config_arr + (i * 2)), 1,
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	461a      	mov	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b299      	uxth	r1, r3
				(Config_arr + (i * 2) + 1), 1, 20);
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	3301      	adds	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_DEVICE_ADDR, *(Config_arr + (i * 2)), 1,
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	2214      	movs	r2, #20
 8001560:	9202      	str	r2, [sp, #8]
 8001562:	2201      	movs	r2, #1
 8001564:	9201      	str	r2, [sp, #4]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	460a      	mov	r2, r1
 800156c:	21d0      	movs	r1, #208	; 0xd0
 800156e:	4808      	ldr	r0, [pc, #32]	; (8001590 <MPU6050_SET_Config+0x5c>)
 8001570:	f001 f88c 	bl	800268c <HAL_I2C_Mem_Write>
	for (uint8_t i = 0; i < (array_size / 2); i++) {
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	3301      	adds	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	085b      	lsrs	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	429a      	cmp	r2, r3
 8001584:	d3df      	bcc.n	8001546 <MPU6050_SET_Config+0x12>
	}

}/* END_FUN MPU6050_SET_Config() */
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000240 	.word	0x20000240

08001594 <MPU6050_Read_temp_reg>:

/* brief : this function used to read the MPU temp register this function PRIVATEM used only by this file
 * param : ALL_Axis_Var is a data structure that in general hold all MPU readed data register
 * return : void
 */
 static void MPU6050_Read_temp_reg(MPU6050_DATA_t *ALL_Axis_Var) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af04      	add	r7, sp, #16
 800159a:	6078      	str	r0, [r7, #4]

	 int data[2] = {0} ;
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_DEVICE_ADDR, MPU6050_TEMP_OUT_H_R, 1,
 80015a6:	2314      	movs	r3, #20
 80015a8:	9302      	str	r3, [sp, #8]
 80015aa:	2302      	movs	r3, #2
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2301      	movs	r3, #1
 80015b6:	2241      	movs	r2, #65	; 0x41
 80015b8:	21d0      	movs	r1, #208	; 0xd0
 80015ba:	4808      	ldr	r0, [pc, #32]	; (80015dc <MPU6050_Read_temp_reg+0x48>)
 80015bc:	f001 f960 	bl	8002880 <HAL_I2C_Mem_Read>
			data , 2, 20);
	ALL_Axis_Var->TEMP_READED = (uint16_t)(((data[0] << 8)  | data[1]));
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	819a      	strh	r2, [r3, #12]

 }/* END_FUN MPU6050_Read_temp_reg() */
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000240 	.word	0x20000240

080015e0 <MPU6050_Read_Temp_In_C>:
/* brief : this function used to get the temp value in C degree
 * param : ANGLES_VAR_STRUCT this data structure type in general used to hold the all required data that needed from MPU
 * return : void
 */
void MPU6050_Read_Temp_In_C(MPU6050_ANGELS_t *ANGLES_VAR_STRUCT)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	MPU6050_Read_temp_reg(&MPU_REGS_DATA_STATIC);
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <MPU6050_Read_Temp_In_C+0x58>)
 80015ea:	f7ff ffd3 	bl	8001594 <MPU6050_Read_temp_reg>
	ANGLES_VAR_STRUCT->TEMP_IN_CEL = (MPU_REGS_DATA_STATIC.TEMP_READED)/340 + 36.53;
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <MPU6050_Read_Temp_In_C+0x58>)
 80015f0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015f4:	4a11      	ldr	r2, [pc, #68]	; (800163c <MPU6050_Read_Temp_In_C+0x5c>)
 80015f6:	fb82 1203 	smull	r1, r2, r2, r3
 80015fa:	11d2      	asrs	r2, r2, #7
 80015fc:	17db      	asrs	r3, r3, #31
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	b21b      	sxth	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ff9e 	bl	8000544 <__aeabi_i2d>
 8001608:	a309      	add	r3, pc, #36	; (adr r3, 8001630 <MPU6050_Read_Temp_In_C+0x50>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7fe fe4d 	bl	80002ac <__adddf3>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff faf5 	bl	8000c08 <__aeabi_d2f>
 800161e:	4602      	mov	r2, r0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]

}/* END_FUN MPU6050_Read_Temp_In_C() */
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	f3af 8000 	nop.w
 8001630:	0a3d70a4 	.word	0x0a3d70a4
 8001634:	404243d7 	.word	0x404243d7
 8001638:	20000224 	.word	0x20000224
 800163c:	60606061 	.word	0x60606061

08001640 <Read_Accurate_Angles_ComplemantrayFilter>:
 * here also if you need to change the complemantary filter gain you caan do it in the MPU_config file
 * param : ANGELS_STRUCT_VAR return  all angles and temp
 * return : void
 */
void Read_Accurate_Angles_ComplemantrayFilter(MPU6050_ANGELS_t *ANGELS_STRUCT_VAR)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

	MPU6050_ALL_GYRO_ANGELS(ANGELS_STRUCT_VAR);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fd63 	bl	8001114 <MPU6050_ALL_GYRO_ANGELS>
	MPU6050_ALL_ACCEL_ANGELS(ANGELS_STRUCT_VAR);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fe1a 	bl	8001288 <MPU6050_ALL_ACCEL_ANGELS>
	MPU6050_Read_Temp_In_C(ANGELS_STRUCT_VAR);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ffc3 	bl	80015e0 <MPU6050_Read_Temp_In_C>
	// now we have accel & gyro angles so we will apply filter to our measurements angle to get a very stable angle without offset
	ANGELS_STRUCT_VAR->GYRO_ANGLE_ROLL = ANGELS_STRUCT_VAR->GYRO_ANGLE_ROLL * ComplemantaryFilterGain1 \
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001660:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80016b0 <Read_Accurate_Angles_ComplemantrayFilter+0x70>
 8001664:	ee27 7a87 	vmul.f32	s14, s15, s14
			+ ANGELS_STRUCT_VAR->ACCEL_ANGLE_ROLL * ComplemantaryFilterGain2;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edd3 7a04 	vldr	s15, [r3, #16]
 800166e:	eddf 6a11 	vldr	s13, [pc, #68]	; 80016b4 <Read_Accurate_Angles_ComplemantrayFilter+0x74>
 8001672:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001676:	ee77 7a27 	vadd.f32	s15, s14, s15
	ANGELS_STRUCT_VAR->GYRO_ANGLE_ROLL = ANGELS_STRUCT_VAR->GYRO_ANGLE_ROLL * ComplemantaryFilterGain1 \
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edc3 7a01 	vstr	s15, [r3, #4]
	ANGELS_STRUCT_VAR->GYRO_ANGLE_PITCH = ANGELS_STRUCT_VAR->GYRO_ANGLE_PITCH * ComplemantaryFilterGain1 \
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80016b0 <Read_Accurate_Angles_ComplemantrayFilter+0x70>
 800168a:	ee27 7a87 	vmul.f32	s14, s15, s14
			+ ANGELS_STRUCT_VAR->ACCEL_ANGLE_PITCH *ComplemantaryFilterGain2;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	edd3 7a03 	vldr	s15, [r3, #12]
 8001694:	eddf 6a07 	vldr	s13, [pc, #28]	; 80016b4 <Read_Accurate_Angles_ComplemantrayFilter+0x74>
 8001698:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800169c:	ee77 7a27 	vadd.f32	s15, s14, s15
	ANGELS_STRUCT_VAR->GYRO_ANGLE_PITCH = ANGELS_STRUCT_VAR->GYRO_ANGLE_PITCH * ComplemantaryFilterGain1 \
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	edc3 7a00 	vstr	s15, [r3]




}/* END_FUN Read_Accurate_Angles_ComplemantrayFilter() */
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	3f75c28f 	.word	0x3f75c28f
 80016b4:	3d23d70a 	.word	0x3d23d70a

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c0:	f000 fb78 	bl	8001db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c4:	f000 f83e 	bl	8001744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c8:	f000 f910 	bl	80018ec <MX_GPIO_Init>
  MX_I2C2_Init();
 80016cc:	f000 f8a4 	bl	8001818 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80016d0:	f000 f8e2 	bl	8001898 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(300);
 80016d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016d8:	f000 fbde 	bl	8001e98 <HAL_Delay>
  MPU6050_SET_Config(arr_cong ,sizeof(arr_cong));
 80016dc:	2108      	movs	r1, #8
 80016de:	4815      	ldr	r0, [pc, #84]	; (8001734 <main+0x7c>)
 80016e0:	f7ff ff28 	bl	8001534 <MPU6050_SET_Config>
  /* USER CODE END 2 */
  RetargetInit(&huart1);
 80016e4:	4814      	ldr	r0, [pc, #80]	; (8001738 <main+0x80>)
 80016e6:	f000 f94b 	bl	8001980 <RetargetInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Read_Accurate_Angles_ComplemantrayFilter(&ANGELS_VAR_STRUCT);
 80016ea:	4814      	ldr	r0, [pc, #80]	; (800173c <main+0x84>)
 80016ec:	f7ff ffa8 	bl	8001640 <Read_Accurate_Angles_ComplemantrayFilter>
	  HAL_Delay(4);
 80016f0:	2004      	movs	r0, #4
 80016f2:	f000 fbd1 	bl	8001e98 <HAL_Delay>
	  printf("pitch = %0.2f  ,  Roll = %0.2f  , Yaw = %0.2f  \n",ANGELS_VAR_STRUCT.GYRO_ANGLE_PITCH
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <main+0x84>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff34 	bl	8000568 <__aeabi_f2d>
 8001700:	4680      	mov	r8, r0
 8001702:	4689      	mov	r9, r1
			  	  	  	  	  	  	  	  	  	  	  ,ANGELS_VAR_STRUCT.GYRO_ANGLE_ROLL
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <main+0x84>)
 8001706:	685b      	ldr	r3, [r3, #4]
	  printf("pitch = %0.2f  ,  Roll = %0.2f  , Yaw = %0.2f  \n",ANGELS_VAR_STRUCT.GYRO_ANGLE_PITCH
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff2d 	bl	8000568 <__aeabi_f2d>
 800170e:	4604      	mov	r4, r0
 8001710:	460d      	mov	r5, r1
													  ,ANGELS_VAR_STRUCT.GYRO_ANGLE_YAW);
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <main+0x84>)
 8001714:	689b      	ldr	r3, [r3, #8]
	  printf("pitch = %0.2f  ,  Roll = %0.2f  , Yaw = %0.2f  \n",ANGELS_VAR_STRUCT.GYRO_ANGLE_PITCH
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff26 	bl	8000568 <__aeabi_f2d>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001724:	e9cd 4500 	strd	r4, r5, [sp]
 8001728:	4642      	mov	r2, r8
 800172a:	464b      	mov	r3, r9
 800172c:	4804      	ldr	r0, [pc, #16]	; (8001740 <main+0x88>)
 800172e:	f003 fd57 	bl	80051e0 <iprintf>
	  Read_Accurate_Angles_ComplemantrayFilter(&ANGELS_VAR_STRUCT);
 8001732:	e7da      	b.n	80016ea <main+0x32>
 8001734:	20000000 	.word	0x20000000
 8001738:	200002b0 	.word	0x200002b0
 800173c:	20000294 	.word	0x20000294
 8001740:	0800a608 	.word	0x0800a608

08001744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b094      	sub	sp, #80	; 0x50
 8001748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174a:	f107 0320 	add.w	r3, r7, #32
 800174e:	2230      	movs	r2, #48	; 0x30
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f002 fec2 	bl	80044dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	4b28      	ldr	r3, [pc, #160]	; (8001810 <SystemClock_Config+0xcc>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	4a27      	ldr	r2, [pc, #156]	; (8001810 <SystemClock_Config+0xcc>)
 8001772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001776:	6413      	str	r3, [r2, #64]	; 0x40
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <SystemClock_Config+0xcc>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	4b22      	ldr	r3, [pc, #136]	; (8001814 <SystemClock_Config+0xd0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a21      	ldr	r2, [pc, #132]	; (8001814 <SystemClock_Config+0xd0>)
 800178e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <SystemClock_Config+0xd0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a0:	2302      	movs	r3, #2
 80017a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a8:	2310      	movs	r3, #16
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ac:	2302      	movs	r3, #2
 80017ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017b4:	2308      	movs	r3, #8
 80017b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017b8:	23a8      	movs	r3, #168	; 0xa8
 80017ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017bc:	2302      	movs	r3, #2
 80017be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017c0:	2307      	movs	r3, #7
 80017c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c4:	f107 0320 	add.w	r3, r7, #32
 80017c8:	4618      	mov	r0, r3
 80017ca:	f001 fe55 	bl	8003478 <HAL_RCC_OscConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017d4:	f000 f8ce 	bl	8001974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d8:	230f      	movs	r3, #15
 80017da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017dc:	2302      	movs	r3, #2
 80017de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	2105      	movs	r1, #5
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 f8b6 	bl	8003968 <HAL_RCC_ClockConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001802:	f000 f8b7 	bl	8001974 <Error_Handler>
  }
}
 8001806:	bf00      	nop
 8001808:	3750      	adds	r7, #80	; 0x50
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800
 8001814:	40007000 	.word	0x40007000

08001818 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_I2C2_Init+0x74>)
 800181e:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <MX_I2C2_Init+0x78>)
 8001820:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_I2C2_Init+0x74>)
 8001824:	4a1b      	ldr	r2, [pc, #108]	; (8001894 <MX_I2C2_Init+0x7c>)
 8001826:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_I2C2_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <MX_I2C2_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_I2C2_Init+0x74>)
 8001836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800183a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <MX_I2C2_Init+0x74>)
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <MX_I2C2_Init+0x74>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <MX_I2C2_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_I2C2_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001854:	480d      	ldr	r0, [pc, #52]	; (800188c <MX_I2C2_Init+0x74>)
 8001856:	f000 fdd5 	bl	8002404 <HAL_I2C_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001860:	f000 f888 	bl	8001974 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001864:	2100      	movs	r1, #0
 8001866:	4809      	ldr	r0, [pc, #36]	; (800188c <MX_I2C2_Init+0x74>)
 8001868:	f001 fd8b 	bl	8003382 <HAL_I2CEx_ConfigAnalogFilter>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001872:	f000 f87f 	bl	8001974 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001876:	2100      	movs	r1, #0
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <MX_I2C2_Init+0x74>)
 800187a:	f001 fdbe 	bl	80033fa <HAL_I2CEx_ConfigDigitalFilter>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001884:	f000 f876 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000240 	.word	0x20000240
 8001890:	40005800 	.word	0x40005800
 8001894:	000186a0 	.word	0x000186a0

08001898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_USART1_UART_Init+0x50>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018d0:	f002 fa46 	bl	8003d60 <HAL_UART_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018da:	f000 f84b 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200002b0 	.word	0x200002b0
 80018e8:	40011000 	.word	0x40011000

080018ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <MX_GPIO_Init+0x84>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <MX_GPIO_Init+0x84>)
 80018fc:	f043 0320 	orr.w	r3, r3, #32
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <MX_GPIO_Init+0x84>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0320 	and.w	r3, r3, #32
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <MX_GPIO_Init+0x84>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a16      	ldr	r2, [pc, #88]	; (8001970 <MX_GPIO_Init+0x84>)
 8001918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <MX_GPIO_Init+0x84>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <MX_GPIO_Init+0x84>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a0f      	ldr	r2, [pc, #60]	; (8001970 <MX_GPIO_Init+0x84>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <MX_GPIO_Init+0x84>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_GPIO_Init+0x84>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <MX_GPIO_Init+0x84>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_GPIO_Init+0x84>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]

}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800

08001974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001978:	b672      	cpsid	i
}
 800197a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800197c:	e7fe      	b.n	800197c <Error_Handler+0x8>
	...

08001980 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <RetargetInit+0x28>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <RetargetInit+0x2c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6898      	ldr	r0, [r3, #8]
 8001994:	2300      	movs	r3, #0
 8001996:	2202      	movs	r2, #2
 8001998:	2100      	movs	r1, #0
 800199a:	f003 fc39 	bl	8005210 <setvbuf>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200002f4 	.word	0x200002f4
 80019ac:	20000014 	.word	0x20000014

080019b0 <_isatty>:

int _isatty(int fd) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db04      	blt.n	80019c8 <_isatty+0x18>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	dc01      	bgt.n	80019c8 <_isatty+0x18>
    return 1;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e005      	b.n	80019d4 <_isatty+0x24>

  errno = EBADF;
 80019c8:	f002 fd5e 	bl	8004488 <__errno>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2209      	movs	r2, #9
 80019d0:	601a      	str	r2, [r3, #0]
  return 0;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_write>:

int _write(int fd, char* ptr, int len) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d002      	beq.n	80019f4 <_write+0x18>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d111      	bne.n	8001a18 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <_write+0x54>)
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	f002 f9fa 	bl	8003dfa <HAL_UART_Transmit>
 8001a06:	4603      	mov	r3, r0
 8001a08:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <_write+0x38>
      return len;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	e008      	b.n	8001a26 <_write+0x4a>
    else
      return EIO;
 8001a14:	2305      	movs	r3, #5
 8001a16:	e006      	b.n	8001a26 <_write+0x4a>
  }
  errno = EBADF;
 8001a18:	f002 fd36 	bl	8004488 <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2209      	movs	r2, #9
 8001a20:	601a      	str	r2, [r3, #0]
  return -1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200002f4 	.word	0x200002f4

08001a34 <_close>:

int _close(int fd) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db04      	blt.n	8001a4c <_close+0x18>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	dc01      	bgt.n	8001a4c <_close+0x18>
    return 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e006      	b.n	8001a5a <_close+0x26>

  errno = EBADF;
 8001a4c:	f002 fd1c 	bl	8004488 <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2209      	movs	r2, #9
 8001a54:	601a      	str	r2, [r3, #0]
  return -1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001a6e:	f002 fd0b 	bl	8004488 <__errno>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2209      	movs	r2, #9
 8001a76:	601a      	str	r2, [r3, #0]
  return -1;
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_read>:

int _read(int fd, char* ptr, int len) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d110      	bne.n	8001ab8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <_read+0x4c>)
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	f002 fa3c 	bl	8003f1e <HAL_UART_Receive>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <_read+0x30>
      return 1;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e008      	b.n	8001ac6 <_read+0x42>
    else
      return EIO;
 8001ab4:	2305      	movs	r3, #5
 8001ab6:	e006      	b.n	8001ac6 <_read+0x42>
  }
  errno = EBADF;
 8001ab8:	f002 fce6 	bl	8004488 <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2209      	movs	r2, #9
 8001ac0:	601a      	str	r2, [r3, #0]
  return -1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200002f4 	.word	0x200002f4

08001ad4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db08      	blt.n	8001af6 <_fstat+0x22>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	dc05      	bgt.n	8001af6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af0:	605a      	str	r2, [r3, #4]
    return 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e005      	b.n	8001b02 <_fstat+0x2e>
  }

  errno = EBADF;
 8001af6:	f002 fcc7 	bl	8004488 <__errno>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2209      	movs	r2, #9
 8001afe:	601a      	str	r2, [r3, #0]
  return 0;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b20:	6453      	str	r3, [r2, #68]	; 0x44
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b4a:	2007      	movs	r0, #7
 8001b4c:	f000 fa7a 	bl	8002044 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800

08001b5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_I2C_MspInit+0x84>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12b      	bne.n	8001bd6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_I2C_MspInit+0x88>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_I2C_MspInit+0x88>)
 8001b88:	f043 0320 	orr.w	r3, r3, #32
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_I2C_MspInit+0x88>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9e:	2312      	movs	r3, #18
 8001ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001baa:	2304      	movs	r3, #4
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <HAL_I2C_MspInit+0x8c>)
 8001bb6:	f000 fa79 	bl	80020ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_I2C_MspInit+0x88>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <HAL_I2C_MspInit+0x88>)
 8001bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_I2C_MspInit+0x88>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40005800 	.word	0x40005800
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40021400 	.word	0x40021400

08001bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <HAL_UART_MspInit+0x84>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d12c      	bne.n	8001c68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_UART_MspInit+0x88>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <HAL_UART_MspInit+0x88>)
 8001c18:	f043 0310 	orr.w	r3, r3, #16
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_UART_MspInit+0x88>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_UART_MspInit+0x88>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <HAL_UART_MspInit+0x88>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_UART_MspInit+0x88>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c58:	2307      	movs	r3, #7
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <HAL_UART_MspInit+0x8c>)
 8001c64:	f000 fa22 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c68:	bf00      	nop
 8001c6a:	3728      	adds	r7, #40	; 0x28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40011000 	.word	0x40011000
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020000 	.word	0x40020000

08001c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <NMI_Handler+0x4>

08001c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <HardFault_Handler+0x4>

08001c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <MemManage_Handler+0x4>

08001c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c92:	e7fe      	b.n	8001c92 <BusFault_Handler+0x4>

08001c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <UsageFault_Handler+0x4>

08001c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc8:	f000 f8c6 	bl	8001e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <_sbrk+0x5c>)
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <_sbrk+0x60>)
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <_sbrk+0x64>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <_sbrk+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d207      	bcs.n	8001d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d00:	f002 fbc2 	bl	8004488 <__errno>
 8001d04:	4603      	mov	r3, r0
 8001d06:	220c      	movs	r2, #12
 8001d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0e:	e009      	b.n	8001d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <_sbrk+0x64>)
 8001d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20030000 	.word	0x20030000
 8001d30:	00000400 	.word	0x00000400
 8001d34:	20000234 	.word	0x20000234
 8001d38:	20000310 	.word	0x20000310

08001d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <SystemInit+0x20>)
 8001d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <SystemInit+0x20>)
 8001d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d98 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d66:	490e      	ldr	r1, [pc, #56]	; (8001da0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d6c:	e002      	b.n	8001d74 <LoopCopyDataInit>

08001d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d72:	3304      	adds	r3, #4

08001d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d78:	d3f9      	bcc.n	8001d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d7c:	4c0b      	ldr	r4, [pc, #44]	; (8001dac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d80:	e001      	b.n	8001d86 <LoopFillZerobss>

08001d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d84:	3204      	adds	r2, #4

08001d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d88:	d3fb      	bcc.n	8001d82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d8a:	f7ff ffd7 	bl	8001d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f002 fb81 	bl	8004494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d92:	f7ff fc91 	bl	80016b8 <main>
  bx  lr    
 8001d96:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d98:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001da4:	0800acf8 	.word	0x0800acf8
  ldr r2, =_sbss
 8001da8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001dac:	2000030c 	.word	0x2000030c

08001db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <ADC_IRQHandler>
	...

08001db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <HAL_Init+0x40>)
 8001dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_Init+0x40>)
 8001dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <HAL_Init+0x40>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f000 f931 	bl	8002044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f000 f808 	bl	8001df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de8:	f7ff fe90 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_InitTick+0x54>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_InitTick+0x58>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 f93b 	bl	8002092 <HAL_SYSTICK_Config>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00e      	b.n	8001e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	d80a      	bhi.n	8001e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f000 f911 	bl	800205a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e38:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <HAL_InitTick+0x5c>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e000      	b.n	8001e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	20000010 	.word	0x20000010
 8001e54:	2000000c 	.word	0x2000000c

08001e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_IncTick+0x20>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_IncTick+0x24>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <HAL_IncTick+0x24>)
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000010 	.word	0x20000010
 8001e7c:	200002f8 	.word	0x200002f8

08001e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_GetTick+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	200002f8 	.word	0x200002f8

08001e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7ff ffee 	bl	8001e80 <HAL_GetTick>
 8001ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d005      	beq.n	8001ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_Delay+0x44>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ebe:	bf00      	nop
 8001ec0:	f7ff ffde 	bl	8001e80 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d8f7      	bhi.n	8001ec0 <HAL_Delay+0x28>
  {
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000010 	.word	0x20000010

08001ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001efc:	4013      	ands	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f12:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	60d3      	str	r3, [r2, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <__NVIC_GetPriorityGrouping+0x18>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	f003 0307 	and.w	r3, r3, #7
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	db0a      	blt.n	8001f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	490c      	ldr	r1, [pc, #48]	; (8001f90 <__NVIC_SetPriority+0x4c>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	440b      	add	r3, r1
 8001f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f6c:	e00a      	b.n	8001f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4908      	ldr	r1, [pc, #32]	; (8001f94 <__NVIC_SetPriority+0x50>)
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	3b04      	subs	r3, #4
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	440b      	add	r3, r1
 8001f82:	761a      	strb	r2, [r3, #24]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000e100 	.word	0xe000e100
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f1c3 0307 	rsb	r3, r3, #7
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	bf28      	it	cs
 8001fb6:	2304      	movcs	r3, #4
 8001fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d902      	bls.n	8001fc8 <NVIC_EncodePriority+0x30>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3b03      	subs	r3, #3
 8001fc6:	e000      	b.n	8001fca <NVIC_EncodePriority+0x32>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	401a      	ands	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	43d9      	mvns	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	4313      	orrs	r3, r2
         );
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3724      	adds	r7, #36	; 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002010:	d301      	bcc.n	8002016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002012:	2301      	movs	r3, #1
 8002014:	e00f      	b.n	8002036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <SysTick_Config+0x40>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201e:	210f      	movs	r1, #15
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f7ff ff8e 	bl	8001f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <SysTick_Config+0x40>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <SysTick_Config+0x40>)
 8002030:	2207      	movs	r2, #7
 8002032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	e000e010 	.word	0xe000e010

08002044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff47 	bl	8001ee0 <__NVIC_SetPriorityGrouping>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800206c:	f7ff ff5c 	bl	8001f28 <__NVIC_GetPriorityGrouping>
 8002070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	6978      	ldr	r0, [r7, #20]
 8002078:	f7ff ff8e 	bl	8001f98 <NVIC_EncodePriority>
 800207c:	4602      	mov	r2, r0
 800207e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff5d 	bl	8001f44 <__NVIC_SetPriority>
}
 800208a:	bf00      	nop
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ffb0 	bl	8002000 <SysTick_Config>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	e177      	b.n	80023b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	f040 8166 	bne.w	80023b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d005      	beq.n	80020fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d130      	bne.n	8002160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	2203      	movs	r2, #3
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002134:	2201      	movs	r2, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 0201 	and.w	r2, r3, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	2b03      	cmp	r3, #3
 800216a:	d017      	beq.n	800219c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d123      	bne.n	80021f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	08da      	lsrs	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3208      	adds	r2, #8
 80021b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	220f      	movs	r2, #15
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	08da      	lsrs	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3208      	adds	r2, #8
 80021ea:	69b9      	ldr	r1, [r7, #24]
 80021ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0203 	and.w	r2, r3, #3
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80c0 	beq.w	80023b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b66      	ldr	r3, [pc, #408]	; (80023d0 <HAL_GPIO_Init+0x324>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a65      	ldr	r2, [pc, #404]	; (80023d0 <HAL_GPIO_Init+0x324>)
 800223c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b63      	ldr	r3, [pc, #396]	; (80023d0 <HAL_GPIO_Init+0x324>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800224e:	4a61      	ldr	r2, [pc, #388]	; (80023d4 <HAL_GPIO_Init+0x328>)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	089b      	lsrs	r3, r3, #2
 8002254:	3302      	adds	r3, #2
 8002256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	220f      	movs	r2, #15
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a58      	ldr	r2, [pc, #352]	; (80023d8 <HAL_GPIO_Init+0x32c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d037      	beq.n	80022ea <HAL_GPIO_Init+0x23e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a57      	ldr	r2, [pc, #348]	; (80023dc <HAL_GPIO_Init+0x330>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d031      	beq.n	80022e6 <HAL_GPIO_Init+0x23a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a56      	ldr	r2, [pc, #344]	; (80023e0 <HAL_GPIO_Init+0x334>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d02b      	beq.n	80022e2 <HAL_GPIO_Init+0x236>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a55      	ldr	r2, [pc, #340]	; (80023e4 <HAL_GPIO_Init+0x338>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d025      	beq.n	80022de <HAL_GPIO_Init+0x232>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a54      	ldr	r2, [pc, #336]	; (80023e8 <HAL_GPIO_Init+0x33c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01f      	beq.n	80022da <HAL_GPIO_Init+0x22e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a53      	ldr	r2, [pc, #332]	; (80023ec <HAL_GPIO_Init+0x340>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d019      	beq.n	80022d6 <HAL_GPIO_Init+0x22a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a52      	ldr	r2, [pc, #328]	; (80023f0 <HAL_GPIO_Init+0x344>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_GPIO_Init+0x226>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a51      	ldr	r2, [pc, #324]	; (80023f4 <HAL_GPIO_Init+0x348>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00d      	beq.n	80022ce <HAL_GPIO_Init+0x222>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a50      	ldr	r2, [pc, #320]	; (80023f8 <HAL_GPIO_Init+0x34c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d007      	beq.n	80022ca <HAL_GPIO_Init+0x21e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4f      	ldr	r2, [pc, #316]	; (80023fc <HAL_GPIO_Init+0x350>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d101      	bne.n	80022c6 <HAL_GPIO_Init+0x21a>
 80022c2:	2309      	movs	r3, #9
 80022c4:	e012      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022c6:	230a      	movs	r3, #10
 80022c8:	e010      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022ca:	2308      	movs	r3, #8
 80022cc:	e00e      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022ce:	2307      	movs	r3, #7
 80022d0:	e00c      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022d2:	2306      	movs	r3, #6
 80022d4:	e00a      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022d6:	2305      	movs	r3, #5
 80022d8:	e008      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022da:	2304      	movs	r3, #4
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022de:	2303      	movs	r3, #3
 80022e0:	e004      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e002      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022ea:	2300      	movs	r3, #0
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	f002 0203 	and.w	r2, r2, #3
 80022f2:	0092      	lsls	r2, r2, #2
 80022f4:	4093      	lsls	r3, r2
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022fc:	4935      	ldr	r1, [pc, #212]	; (80023d4 <HAL_GPIO_Init+0x328>)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	3302      	adds	r3, #2
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800230a:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <HAL_GPIO_Init+0x354>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800232e:	4a34      	ldr	r2, [pc, #208]	; (8002400 <HAL_GPIO_Init+0x354>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002334:	4b32      	ldr	r3, [pc, #200]	; (8002400 <HAL_GPIO_Init+0x354>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002358:	4a29      	ldr	r2, [pc, #164]	; (8002400 <HAL_GPIO_Init+0x354>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235e:	4b28      	ldr	r3, [pc, #160]	; (8002400 <HAL_GPIO_Init+0x354>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002382:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <HAL_GPIO_Init+0x354>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002388:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_GPIO_Init+0x354>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <HAL_GPIO_Init+0x354>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3301      	adds	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	f67f ae84 	bls.w	80020c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40013800 	.word	0x40013800
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40020400 	.word	0x40020400
 80023e0:	40020800 	.word	0x40020800
 80023e4:	40020c00 	.word	0x40020c00
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40021400 	.word	0x40021400
 80023f0:	40021800 	.word	0x40021800
 80023f4:	40021c00 	.word	0x40021c00
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40022400 	.word	0x40022400
 8002400:	40013c00 	.word	0x40013c00

08002404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e12b      	b.n	800266e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fb96 	bl	8001b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2224      	movs	r2, #36	; 0x24
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002466:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002468:	f001 fc52 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 800246c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4a81      	ldr	r2, [pc, #516]	; (8002678 <HAL_I2C_Init+0x274>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d807      	bhi.n	8002488 <HAL_I2C_Init+0x84>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4a80      	ldr	r2, [pc, #512]	; (800267c <HAL_I2C_Init+0x278>)
 800247c:	4293      	cmp	r3, r2
 800247e:	bf94      	ite	ls
 8002480:	2301      	movls	r3, #1
 8002482:	2300      	movhi	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	e006      	b.n	8002496 <HAL_I2C_Init+0x92>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a7d      	ldr	r2, [pc, #500]	; (8002680 <HAL_I2C_Init+0x27c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	bf94      	ite	ls
 8002490:	2301      	movls	r3, #1
 8002492:	2300      	movhi	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0e7      	b.n	800266e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a78      	ldr	r2, [pc, #480]	; (8002684 <HAL_I2C_Init+0x280>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	0c9b      	lsrs	r3, r3, #18
 80024a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a6a      	ldr	r2, [pc, #424]	; (8002678 <HAL_I2C_Init+0x274>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d802      	bhi.n	80024d8 <HAL_I2C_Init+0xd4>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3301      	adds	r3, #1
 80024d6:	e009      	b.n	80024ec <HAL_I2C_Init+0xe8>
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	4a69      	ldr	r2, [pc, #420]	; (8002688 <HAL_I2C_Init+0x284>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	3301      	adds	r3, #1
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	495c      	ldr	r1, [pc, #368]	; (8002678 <HAL_I2C_Init+0x274>)
 8002508:	428b      	cmp	r3, r1
 800250a:	d819      	bhi.n	8002540 <HAL_I2C_Init+0x13c>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1e59      	subs	r1, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fbb1 f3f3 	udiv	r3, r1, r3
 800251a:	1c59      	adds	r1, r3, #1
 800251c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002520:	400b      	ands	r3, r1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_I2C_Init+0x138>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1e59      	subs	r1, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fbb1 f3f3 	udiv	r3, r1, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253a:	e051      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 800253c:	2304      	movs	r3, #4
 800253e:	e04f      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d111      	bne.n	800256c <HAL_I2C_Init+0x168>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1e58      	subs	r0, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	440b      	add	r3, r1
 8002556:	fbb0 f3f3 	udiv	r3, r0, r3
 800255a:	3301      	adds	r3, #1
 800255c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	e012      	b.n	8002592 <HAL_I2C_Init+0x18e>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1e58      	subs	r0, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	0099      	lsls	r1, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002582:	3301      	adds	r3, #1
 8002584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_Init+0x196>
 8002596:	2301      	movs	r3, #1
 8002598:	e022      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10e      	bne.n	80025c0 <HAL_I2C_Init+0x1bc>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1e58      	subs	r0, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6859      	ldr	r1, [r3, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	440b      	add	r3, r1
 80025b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025be:	e00f      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1e58      	subs	r0, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	0099      	lsls	r1, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	6809      	ldr	r1, [r1, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800260e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6911      	ldr	r1, [r2, #16]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68d2      	ldr	r2, [r2, #12]
 800261a:	4311      	orrs	r1, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	430b      	orrs	r3, r1
 8002622:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	000186a0 	.word	0x000186a0
 800267c:	001e847f 	.word	0x001e847f
 8002680:	003d08ff 	.word	0x003d08ff
 8002684:	431bde83 	.word	0x431bde83
 8002688:	10624dd3 	.word	0x10624dd3

0800268c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	4608      	mov	r0, r1
 8002696:	4611      	mov	r1, r2
 8002698:	461a      	mov	r2, r3
 800269a:	4603      	mov	r3, r0
 800269c:	817b      	strh	r3, [r7, #10]
 800269e:	460b      	mov	r3, r1
 80026a0:	813b      	strh	r3, [r7, #8]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026a6:	f7ff fbeb 	bl	8001e80 <HAL_GetTick>
 80026aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	f040 80d9 	bne.w	800286c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2319      	movs	r3, #25
 80026c0:	2201      	movs	r2, #1
 80026c2:	496d      	ldr	r1, [pc, #436]	; (8002878 <HAL_I2C_Mem_Write+0x1ec>)
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fc7f 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
 80026d2:	e0cc      	b.n	800286e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_I2C_Mem_Write+0x56>
 80026de:	2302      	movs	r3, #2
 80026e0:	e0c5      	b.n	800286e <HAL_I2C_Mem_Write+0x1e2>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d007      	beq.n	8002708 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002716:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2221      	movs	r2, #33	; 0x21
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a3a      	ldr	r2, [r7, #32]
 8002732:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4a4d      	ldr	r2, [pc, #308]	; (800287c <HAL_I2C_Mem_Write+0x1f0>)
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800274a:	88f8      	ldrh	r0, [r7, #6]
 800274c:	893a      	ldrh	r2, [r7, #8]
 800274e:	8979      	ldrh	r1, [r7, #10]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	4603      	mov	r3, r0
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fab6 	bl	8002ccc <I2C_RequestMemoryWrite>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d052      	beq.n	800280c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e081      	b.n	800286e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 fd00 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00d      	beq.n	8002796 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	2b04      	cmp	r3, #4
 8002780:	d107      	bne.n	8002792 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002790:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06b      	b.n	800286e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	781a      	ldrb	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d11b      	bne.n	800280c <HAL_I2C_Mem_Write+0x180>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d017      	beq.n	800280c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	781a      	ldrb	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1aa      	bne.n	800276a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fcec 	bl	80031f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00d      	beq.n	8002840 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	2b04      	cmp	r3, #4
 800282a:	d107      	bne.n	800283c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e016      	b.n	800286e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800284e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800286c:	2302      	movs	r3, #2
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	00100002 	.word	0x00100002
 800287c:	ffff0000 	.word	0xffff0000

08002880 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08c      	sub	sp, #48	; 0x30
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	4608      	mov	r0, r1
 800288a:	4611      	mov	r1, r2
 800288c:	461a      	mov	r2, r3
 800288e:	4603      	mov	r3, r0
 8002890:	817b      	strh	r3, [r7, #10]
 8002892:	460b      	mov	r3, r1
 8002894:	813b      	strh	r3, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800289a:	f7ff faf1 	bl	8001e80 <HAL_GetTick>
 800289e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	f040 8208 	bne.w	8002cbe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2319      	movs	r3, #25
 80028b4:	2201      	movs	r2, #1
 80028b6:	497b      	ldr	r1, [pc, #492]	; (8002aa4 <HAL_I2C_Mem_Read+0x224>)
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fb85 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80028c4:	2302      	movs	r3, #2
 80028c6:	e1fb      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_I2C_Mem_Read+0x56>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e1f4      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x440>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d007      	beq.n	80028fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2222      	movs	r2, #34	; 0x22
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4a5b      	ldr	r2, [pc, #364]	; (8002aa8 <HAL_I2C_Mem_Read+0x228>)
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800293e:	88f8      	ldrh	r0, [r7, #6]
 8002940:	893a      	ldrh	r2, [r7, #8]
 8002942:	8979      	ldrh	r1, [r7, #10]
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	4603      	mov	r3, r0
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fa52 	bl	8002df8 <I2C_RequestMemoryRead>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e1b0      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	2b00      	cmp	r3, #0
 8002964:	d113      	bne.n	800298e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002966:	2300      	movs	r3, #0
 8002968:	623b      	str	r3, [r7, #32]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	623b      	str	r3, [r7, #32]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	623b      	str	r3, [r7, #32]
 800297a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e184      	b.n	8002c98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002992:	2b01      	cmp	r3, #1
 8002994:	d11b      	bne.n	80029ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e164      	b.n	8002c98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d11b      	bne.n	8002a0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	e144      	b.n	8002c98 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a24:	e138      	b.n	8002c98 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	f200 80f1 	bhi.w	8002c12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d123      	bne.n	8002a80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fc1b 	bl	8003278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e139      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a7e:	e10b      	b.n	8002c98 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d14e      	bne.n	8002b26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8e:	2200      	movs	r2, #0
 8002a90:	4906      	ldr	r1, [pc, #24]	; (8002aac <HAL_I2C_Mem_Read+0x22c>)
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fa98 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e10e      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x440>
 8002aa2:	bf00      	nop
 8002aa4:	00100002 	.word	0x00100002
 8002aa8:	ffff0000 	.word	0xffff0000
 8002aac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b24:	e0b8      	b.n	8002c98 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	4966      	ldr	r1, [pc, #408]	; (8002cc8 <HAL_I2C_Mem_Read+0x448>)
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fa49 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0bf      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b88:	2200      	movs	r2, #0
 8002b8a:	494f      	ldr	r1, [pc, #316]	; (8002cc8 <HAL_I2C_Mem_Read+0x448>)
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fa1b 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e091      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002baa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c10:	e042      	b.n	8002c98 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fb2e 	bl	8003278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e04c      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d118      	bne.n	8002c98 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f47f aec2 	bne.w	8002a26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e000      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
  }
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3728      	adds	r7, #40	; 0x28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	00010004 	.word	0x00010004

08002ccc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	817b      	strh	r3, [r7, #10]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	813b      	strh	r3, [r7, #8]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f960 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00d      	beq.n	8002d2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1c:	d103      	bne.n	8002d26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e05f      	b.n	8002dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d2a:	897b      	ldrh	r3, [r7, #10]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	6a3a      	ldr	r2, [r7, #32]
 8002d3e:	492d      	ldr	r1, [pc, #180]	; (8002df4 <I2C_RequestMemoryWrite+0x128>)
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f998 	bl	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e04c      	b.n	8002dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d68:	6a39      	ldr	r1, [r7, #32]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fa02 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00d      	beq.n	8002d92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d107      	bne.n	8002d8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e02b      	b.n	8002dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d105      	bne.n	8002da4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d98:	893b      	ldrh	r3, [r7, #8]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	611a      	str	r2, [r3, #16]
 8002da2:	e021      	b.n	8002de8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002da4:	893b      	ldrh	r3, [r7, #8]
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db4:	6a39      	ldr	r1, [r7, #32]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f9dc 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d107      	bne.n	8002dda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e005      	b.n	8002dea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dde:	893b      	ldrh	r3, [r7, #8]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	00010002 	.word	0x00010002

08002df8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	4608      	mov	r0, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	461a      	mov	r2, r3
 8002e06:	4603      	mov	r3, r0
 8002e08:	817b      	strh	r3, [r7, #10]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	813b      	strh	r3, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f8c2 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00d      	beq.n	8002e66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e58:	d103      	bne.n	8002e62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e0aa      	b.n	8002fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e66:	897b      	ldrh	r3, [r7, #10]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	6a3a      	ldr	r2, [r7, #32]
 8002e7a:	4952      	ldr	r1, [pc, #328]	; (8002fc4 <I2C_RequestMemoryRead+0x1cc>)
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f8fa 	bl	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e097      	b.n	8002fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea4:	6a39      	ldr	r1, [r7, #32]
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f964 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00d      	beq.n	8002ece <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d107      	bne.n	8002eca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e076      	b.n	8002fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed4:	893b      	ldrh	r3, [r7, #8]
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	611a      	str	r2, [r3, #16]
 8002ede:	e021      	b.n	8002f24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ee0:	893b      	ldrh	r3, [r7, #8]
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef0:	6a39      	ldr	r1, [r7, #32]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f93e 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d107      	bne.n	8002f16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e050      	b.n	8002fbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f1a:	893b      	ldrh	r3, [r7, #8]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f26:	6a39      	ldr	r1, [r7, #32]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f923 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00d      	beq.n	8002f50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d107      	bne.n	8002f4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e035      	b.n	8002fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f82b 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00d      	beq.n	8002f94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f86:	d103      	bne.n	8002f90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e013      	b.n	8002fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f94:	897b      	ldrh	r3, [r7, #10]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	6a3a      	ldr	r2, [r7, #32]
 8002fa8:	4906      	ldr	r1, [pc, #24]	; (8002fc4 <I2C_RequestMemoryRead+0x1cc>)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f863 	bl	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	00010002 	.word	0x00010002

08002fc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd8:	e025      	b.n	8003026 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d021      	beq.n	8003026 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7fe ff4d 	bl	8001e80 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d116      	bne.n	8003026 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f043 0220 	orr.w	r2, r3, #32
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e023      	b.n	800306e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	0c1b      	lsrs	r3, r3, #16
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d10d      	bne.n	800304c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	43da      	mvns	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4013      	ands	r3, r2
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf0c      	ite	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	2300      	movne	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	e00c      	b.n	8003066 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4013      	ands	r3, r2
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf0c      	ite	eq
 800305e:	2301      	moveq	r3, #1
 8003060:	2300      	movne	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	429a      	cmp	r2, r3
 800306a:	d0b6      	beq.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003084:	e051      	b.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003094:	d123      	bne.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f043 0204 	orr.w	r2, r3, #4
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e046      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d021      	beq.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7fe fecb 	bl	8001e80 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d116      	bne.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f043 0220 	orr.w	r2, r3, #32
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e020      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	d10c      	bne.n	800314e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	43da      	mvns	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4013      	ands	r3, r2
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf14      	ite	ne
 8003146:	2301      	movne	r3, #1
 8003148:	2300      	moveq	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	e00b      	b.n	8003166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	43da      	mvns	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4013      	ands	r3, r2
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d18d      	bne.n	8003086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003180:	e02d      	b.n	80031de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f8ce 	bl	8003324 <I2C_IsAcknowledgeFailed>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e02d      	b.n	80031ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d021      	beq.n	80031de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe fe71 	bl	8001e80 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d116      	bne.n	80031de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f043 0220 	orr.w	r2, r3, #32
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e007      	b.n	80031ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e8:	2b80      	cmp	r3, #128	; 0x80
 80031ea:	d1ca      	bne.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003202:	e02d      	b.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f88d 	bl	8003324 <I2C_IsAcknowledgeFailed>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e02d      	b.n	8003270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321a:	d021      	beq.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321c:	f7fe fe30 	bl	8001e80 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	429a      	cmp	r2, r3
 800322a:	d302      	bcc.n	8003232 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d116      	bne.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f043 0220 	orr.w	r2, r3, #32
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e007      	b.n	8003270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b04      	cmp	r3, #4
 800326c:	d1ca      	bne.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003284:	e042      	b.n	800330c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b10      	cmp	r3, #16
 8003292:	d119      	bne.n	80032c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0210 	mvn.w	r2, #16
 800329c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e029      	b.n	800331c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c8:	f7fe fdda 	bl	8001e80 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d302      	bcc.n	80032de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d116      	bne.n	800330c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f043 0220 	orr.w	r2, r3, #32
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e007      	b.n	800331c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d1b5      	bne.n	8003286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333a:	d11b      	bne.n	8003374 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003344:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f043 0204 	orr.w	r2, r3, #4
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b20      	cmp	r3, #32
 8003396:	d129      	bne.n	80033ec <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2224      	movs	r2, #36	; 0x24
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0210 	bic.w	r2, r2, #16
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e000      	b.n	80033ee <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
  }
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b20      	cmp	r3, #32
 8003412:	d12a      	bne.n	800346a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2224      	movs	r2, #36	; 0x24
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003434:	89fb      	ldrh	r3, [r7, #14]
 8003436:	f023 030f 	bic.w	r3, r3, #15
 800343a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	b29a      	uxth	r2, r3
 8003440:	89fb      	ldrh	r3, [r7, #14]
 8003442:	4313      	orrs	r3, r2
 8003444:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	89fa      	ldrh	r2, [r7, #14]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800346a:	2302      	movs	r3, #2
  }
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e264      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d075      	beq.n	8003582 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003496:	4ba3      	ldr	r3, [pc, #652]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d00c      	beq.n	80034bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a2:	4ba0      	ldr	r3, [pc, #640]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d112      	bne.n	80034d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ae:	4b9d      	ldr	r3, [pc, #628]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ba:	d10b      	bne.n	80034d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	4b99      	ldr	r3, [pc, #612]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d05b      	beq.n	8003580 <HAL_RCC_OscConfig+0x108>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d157      	bne.n	8003580 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e23f      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034dc:	d106      	bne.n	80034ec <HAL_RCC_OscConfig+0x74>
 80034de:	4b91      	ldr	r3, [pc, #580]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a90      	ldr	r2, [pc, #576]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	e01d      	b.n	8003528 <HAL_RCC_OscConfig+0xb0>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x98>
 80034f6:	4b8b      	ldr	r3, [pc, #556]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a8a      	ldr	r2, [pc, #552]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	4b88      	ldr	r3, [pc, #544]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a87      	ldr	r2, [pc, #540]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e00b      	b.n	8003528 <HAL_RCC_OscConfig+0xb0>
 8003510:	4b84      	ldr	r3, [pc, #528]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a83      	ldr	r2, [pc, #524]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b81      	ldr	r3, [pc, #516]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a80      	ldr	r2, [pc, #512]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d013      	beq.n	8003558 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fe fca6 	bl	8001e80 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003538:	f7fe fca2 	bl	8001e80 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b64      	cmp	r3, #100	; 0x64
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e204      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	4b76      	ldr	r3, [pc, #472]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0xc0>
 8003556:	e014      	b.n	8003582 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe fc92 	bl	8001e80 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003560:	f7fe fc8e 	bl	8001e80 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e1f0      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003572:	4b6c      	ldr	r3, [pc, #432]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0xe8>
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d063      	beq.n	8003656 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800358e:	4b65      	ldr	r3, [pc, #404]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00b      	beq.n	80035b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359a:	4b62      	ldr	r3, [pc, #392]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d11c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a6:	4b5f      	ldr	r3, [pc, #380]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d116      	bne.n	80035e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b2:	4b5c      	ldr	r3, [pc, #368]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <HAL_RCC_OscConfig+0x152>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d001      	beq.n	80035ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e1c4      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ca:	4b56      	ldr	r3, [pc, #344]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4952      	ldr	r1, [pc, #328]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035de:	e03a      	b.n	8003656 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d020      	beq.n	800362a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e8:	4b4f      	ldr	r3, [pc, #316]	; (8003728 <HAL_RCC_OscConfig+0x2b0>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fe fc47 	bl	8001e80 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f6:	f7fe fc43 	bl	8001e80 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e1a5      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003608:	4b46      	ldr	r3, [pc, #280]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003614:	4b43      	ldr	r3, [pc, #268]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4940      	ldr	r1, [pc, #256]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]
 8003628:	e015      	b.n	8003656 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362a:	4b3f      	ldr	r3, [pc, #252]	; (8003728 <HAL_RCC_OscConfig+0x2b0>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fe fc26 	bl	8001e80 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003638:	f7fe fc22 	bl	8001e80 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e184      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364a:	4b36      	ldr	r3, [pc, #216]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d030      	beq.n	80036c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d016      	beq.n	8003698 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800366a:	4b30      	ldr	r3, [pc, #192]	; (800372c <HAL_RCC_OscConfig+0x2b4>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003670:	f7fe fc06 	bl	8001e80 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003678:	f7fe fc02 	bl	8001e80 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e164      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x200>
 8003696:	e015      	b.n	80036c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003698:	4b24      	ldr	r3, [pc, #144]	; (800372c <HAL_RCC_OscConfig+0x2b4>)
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369e:	f7fe fbef 	bl	8001e80 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a6:	f7fe fbeb 	bl	8001e80 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e14d      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b8:	4b1a      	ldr	r3, [pc, #104]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80036ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f0      	bne.n	80036a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80a0 	beq.w	8003812 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d2:	2300      	movs	r3, #0
 80036d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d6:	4b13      	ldr	r3, [pc, #76]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10f      	bne.n	8003702 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f0:	6413      	str	r3, [r2, #64]	; 0x40
 80036f2:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fe:	2301      	movs	r3, #1
 8003700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_RCC_OscConfig+0x2b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d121      	bne.n	8003752 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370e:	4b08      	ldr	r3, [pc, #32]	; (8003730 <HAL_RCC_OscConfig+0x2b8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a07      	ldr	r2, [pc, #28]	; (8003730 <HAL_RCC_OscConfig+0x2b8>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371a:	f7fe fbb1 	bl	8001e80 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	e011      	b.n	8003746 <HAL_RCC_OscConfig+0x2ce>
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800
 8003728:	42470000 	.word	0x42470000
 800372c:	42470e80 	.word	0x42470e80
 8003730:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003734:	f7fe fba4 	bl	8001e80 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e106      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003746:	4b85      	ldr	r3, [pc, #532]	; (800395c <HAL_RCC_OscConfig+0x4e4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d106      	bne.n	8003768 <HAL_RCC_OscConfig+0x2f0>
 800375a:	4b81      	ldr	r3, [pc, #516]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	4a80      	ldr	r2, [pc, #512]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	6713      	str	r3, [r2, #112]	; 0x70
 8003766:	e01c      	b.n	80037a2 <HAL_RCC_OscConfig+0x32a>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b05      	cmp	r3, #5
 800376e:	d10c      	bne.n	800378a <HAL_RCC_OscConfig+0x312>
 8003770:	4b7b      	ldr	r3, [pc, #492]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a7a      	ldr	r2, [pc, #488]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003776:	f043 0304 	orr.w	r3, r3, #4
 800377a:	6713      	str	r3, [r2, #112]	; 0x70
 800377c:	4b78      	ldr	r3, [pc, #480]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	4a77      	ldr	r2, [pc, #476]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6713      	str	r3, [r2, #112]	; 0x70
 8003788:	e00b      	b.n	80037a2 <HAL_RCC_OscConfig+0x32a>
 800378a:	4b75      	ldr	r3, [pc, #468]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	4a74      	ldr	r2, [pc, #464]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	6713      	str	r3, [r2, #112]	; 0x70
 8003796:	4b72      	ldr	r3, [pc, #456]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	4a71      	ldr	r2, [pc, #452]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 800379c:	f023 0304 	bic.w	r3, r3, #4
 80037a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d015      	beq.n	80037d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037aa:	f7fe fb69 	bl	8001e80 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b0:	e00a      	b.n	80037c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b2:	f7fe fb65 	bl	8001e80 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e0c5      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c8:	4b65      	ldr	r3, [pc, #404]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0ee      	beq.n	80037b2 <HAL_RCC_OscConfig+0x33a>
 80037d4:	e014      	b.n	8003800 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d6:	f7fe fb53 	bl	8001e80 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fe fb4f 	bl	8001e80 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e0af      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f4:	4b5a      	ldr	r3, [pc, #360]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1ee      	bne.n	80037de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d105      	bne.n	8003812 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003806:	4b56      	ldr	r3, [pc, #344]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	4a55      	ldr	r2, [pc, #340]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 800380c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003810:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 809b 	beq.w	8003952 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800381c:	4b50      	ldr	r3, [pc, #320]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b08      	cmp	r3, #8
 8003826:	d05c      	beq.n	80038e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d141      	bne.n	80038b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003830:	4b4c      	ldr	r3, [pc, #304]	; (8003964 <HAL_RCC_OscConfig+0x4ec>)
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003836:	f7fe fb23 	bl	8001e80 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383e:	f7fe fb1f 	bl	8001e80 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e081      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003850:	4b43      	ldr	r3, [pc, #268]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f0      	bne.n	800383e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	019b      	lsls	r3, r3, #6
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	3b01      	subs	r3, #1
 8003876:	041b      	lsls	r3, r3, #16
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	061b      	lsls	r3, r3, #24
 8003880:	4937      	ldr	r1, [pc, #220]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003882:	4313      	orrs	r3, r2
 8003884:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003886:	4b37      	ldr	r3, [pc, #220]	; (8003964 <HAL_RCC_OscConfig+0x4ec>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7fe faf8 	bl	8001e80 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe faf4 	bl	8001e80 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e056      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	4b2e      	ldr	r3, [pc, #184]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x41c>
 80038b2:	e04e      	b.n	8003952 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b4:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <HAL_RCC_OscConfig+0x4ec>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7fe fae1 	bl	8001e80 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c2:	f7fe fadd 	bl	8001e80 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e03f      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d4:	4b22      	ldr	r3, [pc, #136]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f0      	bne.n	80038c2 <HAL_RCC_OscConfig+0x44a>
 80038e0:	e037      	b.n	8003952 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e032      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038ee:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d028      	beq.n	800394e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d121      	bne.n	800394e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003914:	429a      	cmp	r2, r3
 8003916:	d11a      	bne.n	800394e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800391e:	4013      	ands	r3, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003924:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003926:	4293      	cmp	r3, r2
 8003928:	d111      	bne.n	800394e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	085b      	lsrs	r3, r3, #1
 8003936:	3b01      	subs	r3, #1
 8003938:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d107      	bne.n	800394e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d001      	beq.n	8003952 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40007000 	.word	0x40007000
 8003960:	40023800 	.word	0x40023800
 8003964:	42470060 	.word	0x42470060

08003968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0cc      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800397c:	4b68      	ldr	r3, [pc, #416]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d90c      	bls.n	80039a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398a:	4b65      	ldr	r3, [pc, #404]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b63      	ldr	r3, [pc, #396]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0b8      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039bc:	4b59      	ldr	r3, [pc, #356]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	4a58      	ldr	r2, [pc, #352]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d4:	4b53      	ldr	r3, [pc, #332]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	4a52      	ldr	r2, [pc, #328]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e0:	4b50      	ldr	r3, [pc, #320]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	494d      	ldr	r1, [pc, #308]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d044      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d107      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a06:	4b47      	ldr	r3, [pc, #284]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d119      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e07f      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d003      	beq.n	8003a26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a26:	4b3f      	ldr	r3, [pc, #252]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e06f      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a36:	4b3b      	ldr	r3, [pc, #236]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e067      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a46:	4b37      	ldr	r3, [pc, #220]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f023 0203 	bic.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4934      	ldr	r1, [pc, #208]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a58:	f7fe fa12 	bl	8001e80 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a60:	f7fe fa0e 	bl	8001e80 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e04f      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	4b2b      	ldr	r3, [pc, #172]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 020c 	and.w	r2, r3, #12
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d1eb      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a88:	4b25      	ldr	r3, [pc, #148]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d20c      	bcs.n	8003ab0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b22      	ldr	r3, [pc, #136]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e032      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003abc:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4916      	ldr	r1, [pc, #88]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ada:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	490e      	ldr	r1, [pc, #56]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aee:	f000 f821 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8003af2:	4602      	mov	r2, r0
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	490a      	ldr	r1, [pc, #40]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003b00:	5ccb      	ldrb	r3, [r1, r3]
 8003b02:	fa22 f303 	lsr.w	r3, r2, r3
 8003b06:	4a09      	ldr	r2, [pc, #36]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe f972 	bl	8001df8 <HAL_InitTick>

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40023c00 	.word	0x40023c00
 8003b24:	40023800 	.word	0x40023800
 8003b28:	0800a63c 	.word	0x0800a63c
 8003b2c:	20000008 	.word	0x20000008
 8003b30:	2000000c 	.word	0x2000000c

08003b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	2300      	movs	r3, #0
 8003b46:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b4c:	4b67      	ldr	r3, [pc, #412]	; (8003cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d00d      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x40>
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	f200 80bd 	bhi.w	8003cd8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x34>
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d003      	beq.n	8003b6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b66:	e0b7      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b68:	4b61      	ldr	r3, [pc, #388]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b6a:	60bb      	str	r3, [r7, #8]
       break;
 8003b6c:	e0b7      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b6e:	4b61      	ldr	r3, [pc, #388]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b70:	60bb      	str	r3, [r7, #8]
      break;
 8003b72:	e0b4      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b74:	4b5d      	ldr	r3, [pc, #372]	; (8003cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b7e:	4b5b      	ldr	r3, [pc, #364]	; (8003cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d04d      	beq.n	8003c26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b8a:	4b58      	ldr	r3, [pc, #352]	; (8003cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	099b      	lsrs	r3, r3, #6
 8003b90:	461a      	mov	r2, r3
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b9a:	f04f 0100 	mov.w	r1, #0
 8003b9e:	ea02 0800 	and.w	r8, r2, r0
 8003ba2:	ea03 0901 	and.w	r9, r3, r1
 8003ba6:	4640      	mov	r0, r8
 8003ba8:	4649      	mov	r1, r9
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	014b      	lsls	r3, r1, #5
 8003bb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bb8:	0142      	lsls	r2, r0, #5
 8003bba:	4610      	mov	r0, r2
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	ebb0 0008 	subs.w	r0, r0, r8
 8003bc2:	eb61 0109 	sbc.w	r1, r1, r9
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	018b      	lsls	r3, r1, #6
 8003bd0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bd4:	0182      	lsls	r2, r0, #6
 8003bd6:	1a12      	subs	r2, r2, r0
 8003bd8:	eb63 0301 	sbc.w	r3, r3, r1
 8003bdc:	f04f 0000 	mov.w	r0, #0
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	00d9      	lsls	r1, r3, #3
 8003be6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bea:	00d0      	lsls	r0, r2, #3
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	eb12 0208 	adds.w	r2, r2, r8
 8003bf4:	eb43 0309 	adc.w	r3, r3, r9
 8003bf8:	f04f 0000 	mov.w	r0, #0
 8003bfc:	f04f 0100 	mov.w	r1, #0
 8003c00:	0259      	lsls	r1, r3, #9
 8003c02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c06:	0250      	lsls	r0, r2, #9
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	f7fd f846 	bl	8000ca8 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4613      	mov	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	e04a      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c26:	4b31      	ldr	r3, [pc, #196]	; (8003cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	099b      	lsrs	r3, r3, #6
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c36:	f04f 0100 	mov.w	r1, #0
 8003c3a:	ea02 0400 	and.w	r4, r2, r0
 8003c3e:	ea03 0501 	and.w	r5, r3, r1
 8003c42:	4620      	mov	r0, r4
 8003c44:	4629      	mov	r1, r5
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	014b      	lsls	r3, r1, #5
 8003c50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c54:	0142      	lsls	r2, r0, #5
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	1b00      	subs	r0, r0, r4
 8003c5c:	eb61 0105 	sbc.w	r1, r1, r5
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	018b      	lsls	r3, r1, #6
 8003c6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c6e:	0182      	lsls	r2, r0, #6
 8003c70:	1a12      	subs	r2, r2, r0
 8003c72:	eb63 0301 	sbc.w	r3, r3, r1
 8003c76:	f04f 0000 	mov.w	r0, #0
 8003c7a:	f04f 0100 	mov.w	r1, #0
 8003c7e:	00d9      	lsls	r1, r3, #3
 8003c80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c84:	00d0      	lsls	r0, r2, #3
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	1912      	adds	r2, r2, r4
 8003c8c:	eb45 0303 	adc.w	r3, r5, r3
 8003c90:	f04f 0000 	mov.w	r0, #0
 8003c94:	f04f 0100 	mov.w	r1, #0
 8003c98:	0299      	lsls	r1, r3, #10
 8003c9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c9e:	0290      	lsls	r0, r2, #10
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	f7fc fffa 	bl	8000ca8 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	60bb      	str	r3, [r7, #8]
      break;
 8003cd6:	e002      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cda:	60bb      	str	r3, [r7, #8]
      break;
 8003cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cde:	68bb      	ldr	r3, [r7, #8]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	00f42400 	.word	0x00f42400
 8003cf4:	007a1200 	.word	0x007a1200

08003cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000008 	.word	0x20000008

08003d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d14:	f7ff fff0 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	0a9b      	lsrs	r3, r3, #10
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4903      	ldr	r1, [pc, #12]	; (8003d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023800 	.word	0x40023800
 8003d34:	0800a64c 	.word	0x0800a64c

08003d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d3c:	f7ff ffdc 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0b5b      	lsrs	r3, r3, #13
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4903      	ldr	r1, [pc, #12]	; (8003d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	0800a64c 	.word	0x0800a64c

08003d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e03f      	b.n	8003df2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd ff30 	bl	8001bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2224      	movs	r2, #36	; 0x24
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f9a7 	bl	80040f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b08a      	sub	sp, #40	; 0x28
 8003dfe:	af02      	add	r7, sp, #8
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d17c      	bne.n	8003f14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_UART_Transmit+0x2c>
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e075      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_UART_Transmit+0x3e>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e06e      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2221      	movs	r2, #33	; 0x21
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e4e:	f7fe f817 	bl	8001e80 <HAL_GetTick>
 8003e52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e68:	d108      	bne.n	8003e7c <HAL_UART_Transmit+0x82>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	e003      	b.n	8003e84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e8c:	e02a      	b.n	8003ee4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	2180      	movs	r1, #128	; 0x80
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f8e2 	bl	8004062 <UART_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e036      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ebc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	e007      	b.n	8003ed6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1cf      	bne.n	8003e8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2140      	movs	r1, #64	; 0x40
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f8b2 	bl	8004062 <UART_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e006      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3720      	adds	r7, #32
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b08a      	sub	sp, #40	; 0x28
 8003f22:	af02      	add	r7, sp, #8
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	603b      	str	r3, [r7, #0]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	f040 808c 	bne.w	8004058 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_UART_Receive+0x2e>
 8003f46:	88fb      	ldrh	r3, [r7, #6]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e084      	b.n	800405a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Receive+0x40>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e07d      	b.n	800405a <HAL_UART_Receive+0x13c>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2222      	movs	r2, #34	; 0x22
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f7a:	f7fd ff81 	bl	8001e80 <HAL_GetTick>
 8003f7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	88fa      	ldrh	r2, [r7, #6]
 8003f84:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f94:	d108      	bne.n	8003fa8 <HAL_UART_Receive+0x8a>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d104      	bne.n	8003fa8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	e003      	b.n	8003fb0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003fb8:	e043      	b.n	8004042 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2120      	movs	r1, #32
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f84c 	bl	8004062 <UART_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e042      	b.n	800405a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	3302      	adds	r3, #2
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	e01f      	b.n	8004034 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffc:	d007      	beq.n	800400e <HAL_UART_Receive+0xf0>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <HAL_UART_Receive+0xfe>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	701a      	strb	r2, [r3, #0]
 800401a:	e008      	b.n	800402e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004028:	b2da      	uxtb	r2, r3
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3301      	adds	r3, #1
 8004032:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1b6      	bne.n	8003fba <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e000      	b.n	800405a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004058:	2302      	movs	r3, #2
  }
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004072:	e02c      	b.n	80040ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407a:	d028      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <UART_WaitOnFlagUntilTimeout+0x30>
 8004082:	f7fd fefd 	bl	8001e80 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	429a      	cmp	r2, r3
 8004090:	d21d      	bcs.n	80040ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0201 	bic.w	r2, r2, #1
 80040b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e00f      	b.n	80040ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4013      	ands	r3, r2
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	bf0c      	ite	eq
 80040de:	2301      	moveq	r3, #1
 80040e0:	2300      	movne	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d0c3      	beq.n	8004074 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fc:	b09f      	sub	sp, #124	; 0x7c
 80040fe:	af00      	add	r7, sp, #0
 8004100:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800410c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410e:	68d9      	ldr	r1, [r3, #12]
 8004110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	ea40 0301 	orr.w	r3, r0, r1
 8004118:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800411a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	431a      	orrs	r2, r3
 8004124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	431a      	orrs	r2, r3
 800412a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	4313      	orrs	r3, r2
 8004130:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800413c:	f021 010c 	bic.w	r1, r1, #12
 8004140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004146:	430b      	orrs	r3, r1
 8004148:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800414a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004156:	6999      	ldr	r1, [r3, #24]
 8004158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	ea40 0301 	orr.w	r3, r0, r1
 8004160:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4bc5      	ldr	r3, [pc, #788]	; (800447c <UART_SetConfig+0x384>)
 8004168:	429a      	cmp	r2, r3
 800416a:	d004      	beq.n	8004176 <UART_SetConfig+0x7e>
 800416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4bc3      	ldr	r3, [pc, #780]	; (8004480 <UART_SetConfig+0x388>)
 8004172:	429a      	cmp	r2, r3
 8004174:	d103      	bne.n	800417e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004176:	f7ff fddf 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 800417a:	6778      	str	r0, [r7, #116]	; 0x74
 800417c:	e002      	b.n	8004184 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800417e:	f7ff fdc7 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 8004182:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800418c:	f040 80b6 	bne.w	80042fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004192:	461c      	mov	r4, r3
 8004194:	f04f 0500 	mov.w	r5, #0
 8004198:	4622      	mov	r2, r4
 800419a:	462b      	mov	r3, r5
 800419c:	1891      	adds	r1, r2, r2
 800419e:	6439      	str	r1, [r7, #64]	; 0x40
 80041a0:	415b      	adcs	r3, r3
 80041a2:	647b      	str	r3, [r7, #68]	; 0x44
 80041a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041a8:	1912      	adds	r2, r2, r4
 80041aa:	eb45 0303 	adc.w	r3, r5, r3
 80041ae:	f04f 0000 	mov.w	r0, #0
 80041b2:	f04f 0100 	mov.w	r1, #0
 80041b6:	00d9      	lsls	r1, r3, #3
 80041b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041bc:	00d0      	lsls	r0, r2, #3
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	1911      	adds	r1, r2, r4
 80041c4:	6639      	str	r1, [r7, #96]	; 0x60
 80041c6:	416b      	adcs	r3, r5
 80041c8:	667b      	str	r3, [r7, #100]	; 0x64
 80041ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	1891      	adds	r1, r2, r2
 80041d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041d8:	415b      	adcs	r3, r3
 80041da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80041e4:	f7fc fd60 	bl	8000ca8 <__aeabi_uldivmod>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4ba5      	ldr	r3, [pc, #660]	; (8004484 <UART_SetConfig+0x38c>)
 80041ee:	fba3 2302 	umull	r2, r3, r3, r2
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	011e      	lsls	r6, r3, #4
 80041f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f8:	461c      	mov	r4, r3
 80041fa:	f04f 0500 	mov.w	r5, #0
 80041fe:	4622      	mov	r2, r4
 8004200:	462b      	mov	r3, r5
 8004202:	1891      	adds	r1, r2, r2
 8004204:	6339      	str	r1, [r7, #48]	; 0x30
 8004206:	415b      	adcs	r3, r3
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
 800420a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800420e:	1912      	adds	r2, r2, r4
 8004210:	eb45 0303 	adc.w	r3, r5, r3
 8004214:	f04f 0000 	mov.w	r0, #0
 8004218:	f04f 0100 	mov.w	r1, #0
 800421c:	00d9      	lsls	r1, r3, #3
 800421e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004222:	00d0      	lsls	r0, r2, #3
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	1911      	adds	r1, r2, r4
 800422a:	65b9      	str	r1, [r7, #88]	; 0x58
 800422c:	416b      	adcs	r3, r5
 800422e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	461a      	mov	r2, r3
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	1891      	adds	r1, r2, r2
 800423c:	62b9      	str	r1, [r7, #40]	; 0x28
 800423e:	415b      	adcs	r3, r3
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004246:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800424a:	f7fc fd2d 	bl	8000ca8 <__aeabi_uldivmod>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4b8c      	ldr	r3, [pc, #560]	; (8004484 <UART_SetConfig+0x38c>)
 8004254:	fba3 1302 	umull	r1, r3, r3, r2
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	2164      	movs	r1, #100	; 0x64
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	3332      	adds	r3, #50	; 0x32
 8004266:	4a87      	ldr	r2, [pc, #540]	; (8004484 <UART_SetConfig+0x38c>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004274:	441e      	add	r6, r3
 8004276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004278:	4618      	mov	r0, r3
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	1894      	adds	r4, r2, r2
 8004284:	623c      	str	r4, [r7, #32]
 8004286:	415b      	adcs	r3, r3
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
 800428a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800428e:	1812      	adds	r2, r2, r0
 8004290:	eb41 0303 	adc.w	r3, r1, r3
 8004294:	f04f 0400 	mov.w	r4, #0
 8004298:	f04f 0500 	mov.w	r5, #0
 800429c:	00dd      	lsls	r5, r3, #3
 800429e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042a2:	00d4      	lsls	r4, r2, #3
 80042a4:	4622      	mov	r2, r4
 80042a6:	462b      	mov	r3, r5
 80042a8:	1814      	adds	r4, r2, r0
 80042aa:	653c      	str	r4, [r7, #80]	; 0x50
 80042ac:	414b      	adcs	r3, r1
 80042ae:	657b      	str	r3, [r7, #84]	; 0x54
 80042b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	461a      	mov	r2, r3
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	1891      	adds	r1, r2, r2
 80042bc:	61b9      	str	r1, [r7, #24]
 80042be:	415b      	adcs	r3, r3
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80042ca:	f7fc fced 	bl	8000ca8 <__aeabi_uldivmod>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4b6c      	ldr	r3, [pc, #432]	; (8004484 <UART_SetConfig+0x38c>)
 80042d4:	fba3 1302 	umull	r1, r3, r3, r2
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	2164      	movs	r1, #100	; 0x64
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	3332      	adds	r3, #50	; 0x32
 80042e6:	4a67      	ldr	r2, [pc, #412]	; (8004484 <UART_SetConfig+0x38c>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	f003 0207 	and.w	r2, r3, #7
 80042f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4432      	add	r2, r6
 80042f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042fa:	e0b9      	b.n	8004470 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042fe:	461c      	mov	r4, r3
 8004300:	f04f 0500 	mov.w	r5, #0
 8004304:	4622      	mov	r2, r4
 8004306:	462b      	mov	r3, r5
 8004308:	1891      	adds	r1, r2, r2
 800430a:	6139      	str	r1, [r7, #16]
 800430c:	415b      	adcs	r3, r3
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004314:	1912      	adds	r2, r2, r4
 8004316:	eb45 0303 	adc.w	r3, r5, r3
 800431a:	f04f 0000 	mov.w	r0, #0
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	00d9      	lsls	r1, r3, #3
 8004324:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004328:	00d0      	lsls	r0, r2, #3
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	eb12 0804 	adds.w	r8, r2, r4
 8004332:	eb43 0905 	adc.w	r9, r3, r5
 8004336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4618      	mov	r0, r3
 800433c:	f04f 0100 	mov.w	r1, #0
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	008b      	lsls	r3, r1, #2
 800434a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800434e:	0082      	lsls	r2, r0, #2
 8004350:	4640      	mov	r0, r8
 8004352:	4649      	mov	r1, r9
 8004354:	f7fc fca8 	bl	8000ca8 <__aeabi_uldivmod>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4b49      	ldr	r3, [pc, #292]	; (8004484 <UART_SetConfig+0x38c>)
 800435e:	fba3 2302 	umull	r2, r3, r3, r2
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	011e      	lsls	r6, r3, #4
 8004366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004368:	4618      	mov	r0, r3
 800436a:	f04f 0100 	mov.w	r1, #0
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	1894      	adds	r4, r2, r2
 8004374:	60bc      	str	r4, [r7, #8]
 8004376:	415b      	adcs	r3, r3
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800437e:	1812      	adds	r2, r2, r0
 8004380:	eb41 0303 	adc.w	r3, r1, r3
 8004384:	f04f 0400 	mov.w	r4, #0
 8004388:	f04f 0500 	mov.w	r5, #0
 800438c:	00dd      	lsls	r5, r3, #3
 800438e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004392:	00d4      	lsls	r4, r2, #3
 8004394:	4622      	mov	r2, r4
 8004396:	462b      	mov	r3, r5
 8004398:	1814      	adds	r4, r2, r0
 800439a:	64bc      	str	r4, [r7, #72]	; 0x48
 800439c:	414b      	adcs	r3, r1
 800439e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f04f 0100 	mov.w	r1, #0
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	008b      	lsls	r3, r1, #2
 80043b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043b8:	0082      	lsls	r2, r0, #2
 80043ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80043be:	f7fc fc73 	bl	8000ca8 <__aeabi_uldivmod>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4b2f      	ldr	r3, [pc, #188]	; (8004484 <UART_SetConfig+0x38c>)
 80043c8:	fba3 1302 	umull	r1, r3, r3, r2
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	2164      	movs	r1, #100	; 0x64
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	3332      	adds	r3, #50	; 0x32
 80043da:	4a2a      	ldr	r2, [pc, #168]	; (8004484 <UART_SetConfig+0x38c>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e6:	441e      	add	r6, r3
 80043e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ea:	4618      	mov	r0, r3
 80043ec:	f04f 0100 	mov.w	r1, #0
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	1894      	adds	r4, r2, r2
 80043f6:	603c      	str	r4, [r7, #0]
 80043f8:	415b      	adcs	r3, r3
 80043fa:	607b      	str	r3, [r7, #4]
 80043fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004400:	1812      	adds	r2, r2, r0
 8004402:	eb41 0303 	adc.w	r3, r1, r3
 8004406:	f04f 0400 	mov.w	r4, #0
 800440a:	f04f 0500 	mov.w	r5, #0
 800440e:	00dd      	lsls	r5, r3, #3
 8004410:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004414:	00d4      	lsls	r4, r2, #3
 8004416:	4622      	mov	r2, r4
 8004418:	462b      	mov	r3, r5
 800441a:	eb12 0a00 	adds.w	sl, r2, r0
 800441e:	eb43 0b01 	adc.w	fp, r3, r1
 8004422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4618      	mov	r0, r3
 8004428:	f04f 0100 	mov.w	r1, #0
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	008b      	lsls	r3, r1, #2
 8004436:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800443a:	0082      	lsls	r2, r0, #2
 800443c:	4650      	mov	r0, sl
 800443e:	4659      	mov	r1, fp
 8004440:	f7fc fc32 	bl	8000ca8 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <UART_SetConfig+0x38c>)
 800444a:	fba3 1302 	umull	r1, r3, r3, r2
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2164      	movs	r1, #100	; 0x64
 8004452:	fb01 f303 	mul.w	r3, r1, r3
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	3332      	adds	r3, #50	; 0x32
 800445c:	4a09      	ldr	r2, [pc, #36]	; (8004484 <UART_SetConfig+0x38c>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	f003 020f 	and.w	r2, r3, #15
 8004468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4432      	add	r2, r6
 800446e:	609a      	str	r2, [r3, #8]
}
 8004470:	bf00      	nop
 8004472:	377c      	adds	r7, #124	; 0x7c
 8004474:	46bd      	mov	sp, r7
 8004476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447a:	bf00      	nop
 800447c:	40011000 	.word	0x40011000
 8004480:	40011400 	.word	0x40011400
 8004484:	51eb851f 	.word	0x51eb851f

08004488 <__errno>:
 8004488:	4b01      	ldr	r3, [pc, #4]	; (8004490 <__errno+0x8>)
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20000014 	.word	0x20000014

08004494 <__libc_init_array>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	4d0d      	ldr	r5, [pc, #52]	; (80044cc <__libc_init_array+0x38>)
 8004498:	4c0d      	ldr	r4, [pc, #52]	; (80044d0 <__libc_init_array+0x3c>)
 800449a:	1b64      	subs	r4, r4, r5
 800449c:	10a4      	asrs	r4, r4, #2
 800449e:	2600      	movs	r6, #0
 80044a0:	42a6      	cmp	r6, r4
 80044a2:	d109      	bne.n	80044b8 <__libc_init_array+0x24>
 80044a4:	4d0b      	ldr	r5, [pc, #44]	; (80044d4 <__libc_init_array+0x40>)
 80044a6:	4c0c      	ldr	r4, [pc, #48]	; (80044d8 <__libc_init_array+0x44>)
 80044a8:	f006 f8a2 	bl	800a5f0 <_init>
 80044ac:	1b64      	subs	r4, r4, r5
 80044ae:	10a4      	asrs	r4, r4, #2
 80044b0:	2600      	movs	r6, #0
 80044b2:	42a6      	cmp	r6, r4
 80044b4:	d105      	bne.n	80044c2 <__libc_init_array+0x2e>
 80044b6:	bd70      	pop	{r4, r5, r6, pc}
 80044b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044bc:	4798      	blx	r3
 80044be:	3601      	adds	r6, #1
 80044c0:	e7ee      	b.n	80044a0 <__libc_init_array+0xc>
 80044c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c6:	4798      	blx	r3
 80044c8:	3601      	adds	r6, #1
 80044ca:	e7f2      	b.n	80044b2 <__libc_init_array+0x1e>
 80044cc:	0800acf0 	.word	0x0800acf0
 80044d0:	0800acf0 	.word	0x0800acf0
 80044d4:	0800acf0 	.word	0x0800acf0
 80044d8:	0800acf4 	.word	0x0800acf4

080044dc <memset>:
 80044dc:	4402      	add	r2, r0
 80044de:	4603      	mov	r3, r0
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d100      	bne.n	80044e6 <memset+0xa>
 80044e4:	4770      	bx	lr
 80044e6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ea:	e7f9      	b.n	80044e0 <memset+0x4>

080044ec <__cvt>:
 80044ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044f0:	ec55 4b10 	vmov	r4, r5, d0
 80044f4:	2d00      	cmp	r5, #0
 80044f6:	460e      	mov	r6, r1
 80044f8:	4619      	mov	r1, r3
 80044fa:	462b      	mov	r3, r5
 80044fc:	bfbb      	ittet	lt
 80044fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004502:	461d      	movlt	r5, r3
 8004504:	2300      	movge	r3, #0
 8004506:	232d      	movlt	r3, #45	; 0x2d
 8004508:	700b      	strb	r3, [r1, #0]
 800450a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800450c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004510:	4691      	mov	r9, r2
 8004512:	f023 0820 	bic.w	r8, r3, #32
 8004516:	bfbc      	itt	lt
 8004518:	4622      	movlt	r2, r4
 800451a:	4614      	movlt	r4, r2
 800451c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004520:	d005      	beq.n	800452e <__cvt+0x42>
 8004522:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004526:	d100      	bne.n	800452a <__cvt+0x3e>
 8004528:	3601      	adds	r6, #1
 800452a:	2102      	movs	r1, #2
 800452c:	e000      	b.n	8004530 <__cvt+0x44>
 800452e:	2103      	movs	r1, #3
 8004530:	ab03      	add	r3, sp, #12
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	ab02      	add	r3, sp, #8
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	ec45 4b10 	vmov	d0, r4, r5
 800453c:	4653      	mov	r3, sl
 800453e:	4632      	mov	r2, r6
 8004540:	f001 fe92 	bl	8006268 <_dtoa_r>
 8004544:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004548:	4607      	mov	r7, r0
 800454a:	d102      	bne.n	8004552 <__cvt+0x66>
 800454c:	f019 0f01 	tst.w	r9, #1
 8004550:	d022      	beq.n	8004598 <__cvt+0xac>
 8004552:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004556:	eb07 0906 	add.w	r9, r7, r6
 800455a:	d110      	bne.n	800457e <__cvt+0x92>
 800455c:	783b      	ldrb	r3, [r7, #0]
 800455e:	2b30      	cmp	r3, #48	; 0x30
 8004560:	d10a      	bne.n	8004578 <__cvt+0x8c>
 8004562:	2200      	movs	r2, #0
 8004564:	2300      	movs	r3, #0
 8004566:	4620      	mov	r0, r4
 8004568:	4629      	mov	r1, r5
 800456a:	f7fc fabd 	bl	8000ae8 <__aeabi_dcmpeq>
 800456e:	b918      	cbnz	r0, 8004578 <__cvt+0x8c>
 8004570:	f1c6 0601 	rsb	r6, r6, #1
 8004574:	f8ca 6000 	str.w	r6, [sl]
 8004578:	f8da 3000 	ldr.w	r3, [sl]
 800457c:	4499      	add	r9, r3
 800457e:	2200      	movs	r2, #0
 8004580:	2300      	movs	r3, #0
 8004582:	4620      	mov	r0, r4
 8004584:	4629      	mov	r1, r5
 8004586:	f7fc faaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800458a:	b108      	cbz	r0, 8004590 <__cvt+0xa4>
 800458c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004590:	2230      	movs	r2, #48	; 0x30
 8004592:	9b03      	ldr	r3, [sp, #12]
 8004594:	454b      	cmp	r3, r9
 8004596:	d307      	bcc.n	80045a8 <__cvt+0xbc>
 8004598:	9b03      	ldr	r3, [sp, #12]
 800459a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800459c:	1bdb      	subs	r3, r3, r7
 800459e:	4638      	mov	r0, r7
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	b004      	add	sp, #16
 80045a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a8:	1c59      	adds	r1, r3, #1
 80045aa:	9103      	str	r1, [sp, #12]
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	e7f0      	b.n	8004592 <__cvt+0xa6>

080045b0 <__exponent>:
 80045b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045b2:	4603      	mov	r3, r0
 80045b4:	2900      	cmp	r1, #0
 80045b6:	bfb8      	it	lt
 80045b8:	4249      	neglt	r1, r1
 80045ba:	f803 2b02 	strb.w	r2, [r3], #2
 80045be:	bfb4      	ite	lt
 80045c0:	222d      	movlt	r2, #45	; 0x2d
 80045c2:	222b      	movge	r2, #43	; 0x2b
 80045c4:	2909      	cmp	r1, #9
 80045c6:	7042      	strb	r2, [r0, #1]
 80045c8:	dd2a      	ble.n	8004620 <__exponent+0x70>
 80045ca:	f10d 0407 	add.w	r4, sp, #7
 80045ce:	46a4      	mov	ip, r4
 80045d0:	270a      	movs	r7, #10
 80045d2:	46a6      	mov	lr, r4
 80045d4:	460a      	mov	r2, r1
 80045d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80045da:	fb07 1516 	mls	r5, r7, r6, r1
 80045de:	3530      	adds	r5, #48	; 0x30
 80045e0:	2a63      	cmp	r2, #99	; 0x63
 80045e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80045e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80045ea:	4631      	mov	r1, r6
 80045ec:	dcf1      	bgt.n	80045d2 <__exponent+0x22>
 80045ee:	3130      	adds	r1, #48	; 0x30
 80045f0:	f1ae 0502 	sub.w	r5, lr, #2
 80045f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80045f8:	1c44      	adds	r4, r0, #1
 80045fa:	4629      	mov	r1, r5
 80045fc:	4561      	cmp	r1, ip
 80045fe:	d30a      	bcc.n	8004616 <__exponent+0x66>
 8004600:	f10d 0209 	add.w	r2, sp, #9
 8004604:	eba2 020e 	sub.w	r2, r2, lr
 8004608:	4565      	cmp	r5, ip
 800460a:	bf88      	it	hi
 800460c:	2200      	movhi	r2, #0
 800460e:	4413      	add	r3, r2
 8004610:	1a18      	subs	r0, r3, r0
 8004612:	b003      	add	sp, #12
 8004614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800461a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800461e:	e7ed      	b.n	80045fc <__exponent+0x4c>
 8004620:	2330      	movs	r3, #48	; 0x30
 8004622:	3130      	adds	r1, #48	; 0x30
 8004624:	7083      	strb	r3, [r0, #2]
 8004626:	70c1      	strb	r1, [r0, #3]
 8004628:	1d03      	adds	r3, r0, #4
 800462a:	e7f1      	b.n	8004610 <__exponent+0x60>

0800462c <_printf_float>:
 800462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004630:	ed2d 8b02 	vpush	{d8}
 8004634:	b08d      	sub	sp, #52	; 0x34
 8004636:	460c      	mov	r4, r1
 8004638:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800463c:	4616      	mov	r6, r2
 800463e:	461f      	mov	r7, r3
 8004640:	4605      	mov	r5, r0
 8004642:	f003 f923 	bl	800788c <_localeconv_r>
 8004646:	f8d0 a000 	ldr.w	sl, [r0]
 800464a:	4650      	mov	r0, sl
 800464c:	f7fb fdd0 	bl	80001f0 <strlen>
 8004650:	2300      	movs	r3, #0
 8004652:	930a      	str	r3, [sp, #40]	; 0x28
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	9305      	str	r3, [sp, #20]
 8004658:	f8d8 3000 	ldr.w	r3, [r8]
 800465c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004660:	3307      	adds	r3, #7
 8004662:	f023 0307 	bic.w	r3, r3, #7
 8004666:	f103 0208 	add.w	r2, r3, #8
 800466a:	f8c8 2000 	str.w	r2, [r8]
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004676:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800467a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800467e:	9307      	str	r3, [sp, #28]
 8004680:	f8cd 8018 	str.w	r8, [sp, #24]
 8004684:	ee08 0a10 	vmov	s16, r0
 8004688:	4b9f      	ldr	r3, [pc, #636]	; (8004908 <_printf_float+0x2dc>)
 800468a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800468e:	f04f 32ff 	mov.w	r2, #4294967295
 8004692:	f7fc fa5b 	bl	8000b4c <__aeabi_dcmpun>
 8004696:	bb88      	cbnz	r0, 80046fc <_printf_float+0xd0>
 8004698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800469c:	4b9a      	ldr	r3, [pc, #616]	; (8004908 <_printf_float+0x2dc>)
 800469e:	f04f 32ff 	mov.w	r2, #4294967295
 80046a2:	f7fc fa35 	bl	8000b10 <__aeabi_dcmple>
 80046a6:	bb48      	cbnz	r0, 80046fc <_printf_float+0xd0>
 80046a8:	2200      	movs	r2, #0
 80046aa:	2300      	movs	r3, #0
 80046ac:	4640      	mov	r0, r8
 80046ae:	4649      	mov	r1, r9
 80046b0:	f7fc fa24 	bl	8000afc <__aeabi_dcmplt>
 80046b4:	b110      	cbz	r0, 80046bc <_printf_float+0x90>
 80046b6:	232d      	movs	r3, #45	; 0x2d
 80046b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046bc:	4b93      	ldr	r3, [pc, #588]	; (800490c <_printf_float+0x2e0>)
 80046be:	4894      	ldr	r0, [pc, #592]	; (8004910 <_printf_float+0x2e4>)
 80046c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80046c4:	bf94      	ite	ls
 80046c6:	4698      	movls	r8, r3
 80046c8:	4680      	movhi	r8, r0
 80046ca:	2303      	movs	r3, #3
 80046cc:	6123      	str	r3, [r4, #16]
 80046ce:	9b05      	ldr	r3, [sp, #20]
 80046d0:	f023 0204 	bic.w	r2, r3, #4
 80046d4:	6022      	str	r2, [r4, #0]
 80046d6:	f04f 0900 	mov.w	r9, #0
 80046da:	9700      	str	r7, [sp, #0]
 80046dc:	4633      	mov	r3, r6
 80046de:	aa0b      	add	r2, sp, #44	; 0x2c
 80046e0:	4621      	mov	r1, r4
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 f9d8 	bl	8004a98 <_printf_common>
 80046e8:	3001      	adds	r0, #1
 80046ea:	f040 8090 	bne.w	800480e <_printf_float+0x1e2>
 80046ee:	f04f 30ff 	mov.w	r0, #4294967295
 80046f2:	b00d      	add	sp, #52	; 0x34
 80046f4:	ecbd 8b02 	vpop	{d8}
 80046f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	4640      	mov	r0, r8
 8004702:	4649      	mov	r1, r9
 8004704:	f7fc fa22 	bl	8000b4c <__aeabi_dcmpun>
 8004708:	b140      	cbz	r0, 800471c <_printf_float+0xf0>
 800470a:	464b      	mov	r3, r9
 800470c:	2b00      	cmp	r3, #0
 800470e:	bfbc      	itt	lt
 8004710:	232d      	movlt	r3, #45	; 0x2d
 8004712:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004716:	487f      	ldr	r0, [pc, #508]	; (8004914 <_printf_float+0x2e8>)
 8004718:	4b7f      	ldr	r3, [pc, #508]	; (8004918 <_printf_float+0x2ec>)
 800471a:	e7d1      	b.n	80046c0 <_printf_float+0x94>
 800471c:	6863      	ldr	r3, [r4, #4]
 800471e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004722:	9206      	str	r2, [sp, #24]
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	d13f      	bne.n	80047a8 <_printf_float+0x17c>
 8004728:	2306      	movs	r3, #6
 800472a:	6063      	str	r3, [r4, #4]
 800472c:	9b05      	ldr	r3, [sp, #20]
 800472e:	6861      	ldr	r1, [r4, #4]
 8004730:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004734:	2300      	movs	r3, #0
 8004736:	9303      	str	r3, [sp, #12]
 8004738:	ab0a      	add	r3, sp, #40	; 0x28
 800473a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800473e:	ab09      	add	r3, sp, #36	; 0x24
 8004740:	ec49 8b10 	vmov	d0, r8, r9
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	6022      	str	r2, [r4, #0]
 8004748:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800474c:	4628      	mov	r0, r5
 800474e:	f7ff fecd 	bl	80044ec <__cvt>
 8004752:	9b06      	ldr	r3, [sp, #24]
 8004754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004756:	2b47      	cmp	r3, #71	; 0x47
 8004758:	4680      	mov	r8, r0
 800475a:	d108      	bne.n	800476e <_printf_float+0x142>
 800475c:	1cc8      	adds	r0, r1, #3
 800475e:	db02      	blt.n	8004766 <_printf_float+0x13a>
 8004760:	6863      	ldr	r3, [r4, #4]
 8004762:	4299      	cmp	r1, r3
 8004764:	dd41      	ble.n	80047ea <_printf_float+0x1be>
 8004766:	f1ab 0b02 	sub.w	fp, fp, #2
 800476a:	fa5f fb8b 	uxtb.w	fp, fp
 800476e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004772:	d820      	bhi.n	80047b6 <_printf_float+0x18a>
 8004774:	3901      	subs	r1, #1
 8004776:	465a      	mov	r2, fp
 8004778:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800477c:	9109      	str	r1, [sp, #36]	; 0x24
 800477e:	f7ff ff17 	bl	80045b0 <__exponent>
 8004782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004784:	1813      	adds	r3, r2, r0
 8004786:	2a01      	cmp	r2, #1
 8004788:	4681      	mov	r9, r0
 800478a:	6123      	str	r3, [r4, #16]
 800478c:	dc02      	bgt.n	8004794 <_printf_float+0x168>
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	07d2      	lsls	r2, r2, #31
 8004792:	d501      	bpl.n	8004798 <_printf_float+0x16c>
 8004794:	3301      	adds	r3, #1
 8004796:	6123      	str	r3, [r4, #16]
 8004798:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800479c:	2b00      	cmp	r3, #0
 800479e:	d09c      	beq.n	80046da <_printf_float+0xae>
 80047a0:	232d      	movs	r3, #45	; 0x2d
 80047a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a6:	e798      	b.n	80046da <_printf_float+0xae>
 80047a8:	9a06      	ldr	r2, [sp, #24]
 80047aa:	2a47      	cmp	r2, #71	; 0x47
 80047ac:	d1be      	bne.n	800472c <_printf_float+0x100>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1bc      	bne.n	800472c <_printf_float+0x100>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e7b9      	b.n	800472a <_printf_float+0xfe>
 80047b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80047ba:	d118      	bne.n	80047ee <_printf_float+0x1c2>
 80047bc:	2900      	cmp	r1, #0
 80047be:	6863      	ldr	r3, [r4, #4]
 80047c0:	dd0b      	ble.n	80047da <_printf_float+0x1ae>
 80047c2:	6121      	str	r1, [r4, #16]
 80047c4:	b913      	cbnz	r3, 80047cc <_printf_float+0x1a0>
 80047c6:	6822      	ldr	r2, [r4, #0]
 80047c8:	07d0      	lsls	r0, r2, #31
 80047ca:	d502      	bpl.n	80047d2 <_printf_float+0x1a6>
 80047cc:	3301      	adds	r3, #1
 80047ce:	440b      	add	r3, r1
 80047d0:	6123      	str	r3, [r4, #16]
 80047d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80047d4:	f04f 0900 	mov.w	r9, #0
 80047d8:	e7de      	b.n	8004798 <_printf_float+0x16c>
 80047da:	b913      	cbnz	r3, 80047e2 <_printf_float+0x1b6>
 80047dc:	6822      	ldr	r2, [r4, #0]
 80047de:	07d2      	lsls	r2, r2, #31
 80047e0:	d501      	bpl.n	80047e6 <_printf_float+0x1ba>
 80047e2:	3302      	adds	r3, #2
 80047e4:	e7f4      	b.n	80047d0 <_printf_float+0x1a4>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e7f2      	b.n	80047d0 <_printf_float+0x1a4>
 80047ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80047ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047f0:	4299      	cmp	r1, r3
 80047f2:	db05      	blt.n	8004800 <_printf_float+0x1d4>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	6121      	str	r1, [r4, #16]
 80047f8:	07d8      	lsls	r0, r3, #31
 80047fa:	d5ea      	bpl.n	80047d2 <_printf_float+0x1a6>
 80047fc:	1c4b      	adds	r3, r1, #1
 80047fe:	e7e7      	b.n	80047d0 <_printf_float+0x1a4>
 8004800:	2900      	cmp	r1, #0
 8004802:	bfd4      	ite	le
 8004804:	f1c1 0202 	rsble	r2, r1, #2
 8004808:	2201      	movgt	r2, #1
 800480a:	4413      	add	r3, r2
 800480c:	e7e0      	b.n	80047d0 <_printf_float+0x1a4>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	055a      	lsls	r2, r3, #21
 8004812:	d407      	bmi.n	8004824 <_printf_float+0x1f8>
 8004814:	6923      	ldr	r3, [r4, #16]
 8004816:	4642      	mov	r2, r8
 8004818:	4631      	mov	r1, r6
 800481a:	4628      	mov	r0, r5
 800481c:	47b8      	blx	r7
 800481e:	3001      	adds	r0, #1
 8004820:	d12c      	bne.n	800487c <_printf_float+0x250>
 8004822:	e764      	b.n	80046ee <_printf_float+0xc2>
 8004824:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004828:	f240 80e0 	bls.w	80049ec <_printf_float+0x3c0>
 800482c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004830:	2200      	movs	r2, #0
 8004832:	2300      	movs	r3, #0
 8004834:	f7fc f958 	bl	8000ae8 <__aeabi_dcmpeq>
 8004838:	2800      	cmp	r0, #0
 800483a:	d034      	beq.n	80048a6 <_printf_float+0x27a>
 800483c:	4a37      	ldr	r2, [pc, #220]	; (800491c <_printf_float+0x2f0>)
 800483e:	2301      	movs	r3, #1
 8004840:	4631      	mov	r1, r6
 8004842:	4628      	mov	r0, r5
 8004844:	47b8      	blx	r7
 8004846:	3001      	adds	r0, #1
 8004848:	f43f af51 	beq.w	80046ee <_printf_float+0xc2>
 800484c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004850:	429a      	cmp	r2, r3
 8004852:	db02      	blt.n	800485a <_printf_float+0x22e>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	07d8      	lsls	r0, r3, #31
 8004858:	d510      	bpl.n	800487c <_printf_float+0x250>
 800485a:	ee18 3a10 	vmov	r3, s16
 800485e:	4652      	mov	r2, sl
 8004860:	4631      	mov	r1, r6
 8004862:	4628      	mov	r0, r5
 8004864:	47b8      	blx	r7
 8004866:	3001      	adds	r0, #1
 8004868:	f43f af41 	beq.w	80046ee <_printf_float+0xc2>
 800486c:	f04f 0800 	mov.w	r8, #0
 8004870:	f104 091a 	add.w	r9, r4, #26
 8004874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004876:	3b01      	subs	r3, #1
 8004878:	4543      	cmp	r3, r8
 800487a:	dc09      	bgt.n	8004890 <_printf_float+0x264>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	079b      	lsls	r3, r3, #30
 8004880:	f100 8105 	bmi.w	8004a8e <_printf_float+0x462>
 8004884:	68e0      	ldr	r0, [r4, #12]
 8004886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004888:	4298      	cmp	r0, r3
 800488a:	bfb8      	it	lt
 800488c:	4618      	movlt	r0, r3
 800488e:	e730      	b.n	80046f2 <_printf_float+0xc6>
 8004890:	2301      	movs	r3, #1
 8004892:	464a      	mov	r2, r9
 8004894:	4631      	mov	r1, r6
 8004896:	4628      	mov	r0, r5
 8004898:	47b8      	blx	r7
 800489a:	3001      	adds	r0, #1
 800489c:	f43f af27 	beq.w	80046ee <_printf_float+0xc2>
 80048a0:	f108 0801 	add.w	r8, r8, #1
 80048a4:	e7e6      	b.n	8004874 <_printf_float+0x248>
 80048a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	dc39      	bgt.n	8004920 <_printf_float+0x2f4>
 80048ac:	4a1b      	ldr	r2, [pc, #108]	; (800491c <_printf_float+0x2f0>)
 80048ae:	2301      	movs	r3, #1
 80048b0:	4631      	mov	r1, r6
 80048b2:	4628      	mov	r0, r5
 80048b4:	47b8      	blx	r7
 80048b6:	3001      	adds	r0, #1
 80048b8:	f43f af19 	beq.w	80046ee <_printf_float+0xc2>
 80048bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048c0:	4313      	orrs	r3, r2
 80048c2:	d102      	bne.n	80048ca <_printf_float+0x29e>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	07d9      	lsls	r1, r3, #31
 80048c8:	d5d8      	bpl.n	800487c <_printf_float+0x250>
 80048ca:	ee18 3a10 	vmov	r3, s16
 80048ce:	4652      	mov	r2, sl
 80048d0:	4631      	mov	r1, r6
 80048d2:	4628      	mov	r0, r5
 80048d4:	47b8      	blx	r7
 80048d6:	3001      	adds	r0, #1
 80048d8:	f43f af09 	beq.w	80046ee <_printf_float+0xc2>
 80048dc:	f04f 0900 	mov.w	r9, #0
 80048e0:	f104 0a1a 	add.w	sl, r4, #26
 80048e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e6:	425b      	negs	r3, r3
 80048e8:	454b      	cmp	r3, r9
 80048ea:	dc01      	bgt.n	80048f0 <_printf_float+0x2c4>
 80048ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ee:	e792      	b.n	8004816 <_printf_float+0x1ea>
 80048f0:	2301      	movs	r3, #1
 80048f2:	4652      	mov	r2, sl
 80048f4:	4631      	mov	r1, r6
 80048f6:	4628      	mov	r0, r5
 80048f8:	47b8      	blx	r7
 80048fa:	3001      	adds	r0, #1
 80048fc:	f43f aef7 	beq.w	80046ee <_printf_float+0xc2>
 8004900:	f109 0901 	add.w	r9, r9, #1
 8004904:	e7ee      	b.n	80048e4 <_printf_float+0x2b8>
 8004906:	bf00      	nop
 8004908:	7fefffff 	.word	0x7fefffff
 800490c:	0800a658 	.word	0x0800a658
 8004910:	0800a65c 	.word	0x0800a65c
 8004914:	0800a664 	.word	0x0800a664
 8004918:	0800a660 	.word	0x0800a660
 800491c:	0800a668 	.word	0x0800a668
 8004920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004924:	429a      	cmp	r2, r3
 8004926:	bfa8      	it	ge
 8004928:	461a      	movge	r2, r3
 800492a:	2a00      	cmp	r2, #0
 800492c:	4691      	mov	r9, r2
 800492e:	dc37      	bgt.n	80049a0 <_printf_float+0x374>
 8004930:	f04f 0b00 	mov.w	fp, #0
 8004934:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004938:	f104 021a 	add.w	r2, r4, #26
 800493c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800493e:	9305      	str	r3, [sp, #20]
 8004940:	eba3 0309 	sub.w	r3, r3, r9
 8004944:	455b      	cmp	r3, fp
 8004946:	dc33      	bgt.n	80049b0 <_printf_float+0x384>
 8004948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800494c:	429a      	cmp	r2, r3
 800494e:	db3b      	blt.n	80049c8 <_printf_float+0x39c>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	07da      	lsls	r2, r3, #31
 8004954:	d438      	bmi.n	80049c8 <_printf_float+0x39c>
 8004956:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004958:	9b05      	ldr	r3, [sp, #20]
 800495a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	eba2 0901 	sub.w	r9, r2, r1
 8004962:	4599      	cmp	r9, r3
 8004964:	bfa8      	it	ge
 8004966:	4699      	movge	r9, r3
 8004968:	f1b9 0f00 	cmp.w	r9, #0
 800496c:	dc35      	bgt.n	80049da <_printf_float+0x3ae>
 800496e:	f04f 0800 	mov.w	r8, #0
 8004972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004976:	f104 0a1a 	add.w	sl, r4, #26
 800497a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	eba3 0309 	sub.w	r3, r3, r9
 8004984:	4543      	cmp	r3, r8
 8004986:	f77f af79 	ble.w	800487c <_printf_float+0x250>
 800498a:	2301      	movs	r3, #1
 800498c:	4652      	mov	r2, sl
 800498e:	4631      	mov	r1, r6
 8004990:	4628      	mov	r0, r5
 8004992:	47b8      	blx	r7
 8004994:	3001      	adds	r0, #1
 8004996:	f43f aeaa 	beq.w	80046ee <_printf_float+0xc2>
 800499a:	f108 0801 	add.w	r8, r8, #1
 800499e:	e7ec      	b.n	800497a <_printf_float+0x34e>
 80049a0:	4613      	mov	r3, r2
 80049a2:	4631      	mov	r1, r6
 80049a4:	4642      	mov	r2, r8
 80049a6:	4628      	mov	r0, r5
 80049a8:	47b8      	blx	r7
 80049aa:	3001      	adds	r0, #1
 80049ac:	d1c0      	bne.n	8004930 <_printf_float+0x304>
 80049ae:	e69e      	b.n	80046ee <_printf_float+0xc2>
 80049b0:	2301      	movs	r3, #1
 80049b2:	4631      	mov	r1, r6
 80049b4:	4628      	mov	r0, r5
 80049b6:	9205      	str	r2, [sp, #20]
 80049b8:	47b8      	blx	r7
 80049ba:	3001      	adds	r0, #1
 80049bc:	f43f ae97 	beq.w	80046ee <_printf_float+0xc2>
 80049c0:	9a05      	ldr	r2, [sp, #20]
 80049c2:	f10b 0b01 	add.w	fp, fp, #1
 80049c6:	e7b9      	b.n	800493c <_printf_float+0x310>
 80049c8:	ee18 3a10 	vmov	r3, s16
 80049cc:	4652      	mov	r2, sl
 80049ce:	4631      	mov	r1, r6
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b8      	blx	r7
 80049d4:	3001      	adds	r0, #1
 80049d6:	d1be      	bne.n	8004956 <_printf_float+0x32a>
 80049d8:	e689      	b.n	80046ee <_printf_float+0xc2>
 80049da:	9a05      	ldr	r2, [sp, #20]
 80049dc:	464b      	mov	r3, r9
 80049de:	4442      	add	r2, r8
 80049e0:	4631      	mov	r1, r6
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b8      	blx	r7
 80049e6:	3001      	adds	r0, #1
 80049e8:	d1c1      	bne.n	800496e <_printf_float+0x342>
 80049ea:	e680      	b.n	80046ee <_printf_float+0xc2>
 80049ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049ee:	2a01      	cmp	r2, #1
 80049f0:	dc01      	bgt.n	80049f6 <_printf_float+0x3ca>
 80049f2:	07db      	lsls	r3, r3, #31
 80049f4:	d538      	bpl.n	8004a68 <_printf_float+0x43c>
 80049f6:	2301      	movs	r3, #1
 80049f8:	4642      	mov	r2, r8
 80049fa:	4631      	mov	r1, r6
 80049fc:	4628      	mov	r0, r5
 80049fe:	47b8      	blx	r7
 8004a00:	3001      	adds	r0, #1
 8004a02:	f43f ae74 	beq.w	80046ee <_printf_float+0xc2>
 8004a06:	ee18 3a10 	vmov	r3, s16
 8004a0a:	4652      	mov	r2, sl
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	4628      	mov	r0, r5
 8004a10:	47b8      	blx	r7
 8004a12:	3001      	adds	r0, #1
 8004a14:	f43f ae6b 	beq.w	80046ee <_printf_float+0xc2>
 8004a18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f7fc f862 	bl	8000ae8 <__aeabi_dcmpeq>
 8004a24:	b9d8      	cbnz	r0, 8004a5e <_printf_float+0x432>
 8004a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a28:	f108 0201 	add.w	r2, r8, #1
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	4631      	mov	r1, r6
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b8      	blx	r7
 8004a34:	3001      	adds	r0, #1
 8004a36:	d10e      	bne.n	8004a56 <_printf_float+0x42a>
 8004a38:	e659      	b.n	80046ee <_printf_float+0xc2>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4652      	mov	r2, sl
 8004a3e:	4631      	mov	r1, r6
 8004a40:	4628      	mov	r0, r5
 8004a42:	47b8      	blx	r7
 8004a44:	3001      	adds	r0, #1
 8004a46:	f43f ae52 	beq.w	80046ee <_printf_float+0xc2>
 8004a4a:	f108 0801 	add.w	r8, r8, #1
 8004a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a50:	3b01      	subs	r3, #1
 8004a52:	4543      	cmp	r3, r8
 8004a54:	dcf1      	bgt.n	8004a3a <_printf_float+0x40e>
 8004a56:	464b      	mov	r3, r9
 8004a58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a5c:	e6dc      	b.n	8004818 <_printf_float+0x1ec>
 8004a5e:	f04f 0800 	mov.w	r8, #0
 8004a62:	f104 0a1a 	add.w	sl, r4, #26
 8004a66:	e7f2      	b.n	8004a4e <_printf_float+0x422>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	4642      	mov	r2, r8
 8004a6c:	e7df      	b.n	8004a2e <_printf_float+0x402>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	464a      	mov	r2, r9
 8004a72:	4631      	mov	r1, r6
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b8      	blx	r7
 8004a78:	3001      	adds	r0, #1
 8004a7a:	f43f ae38 	beq.w	80046ee <_printf_float+0xc2>
 8004a7e:	f108 0801 	add.w	r8, r8, #1
 8004a82:	68e3      	ldr	r3, [r4, #12]
 8004a84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a86:	1a5b      	subs	r3, r3, r1
 8004a88:	4543      	cmp	r3, r8
 8004a8a:	dcf0      	bgt.n	8004a6e <_printf_float+0x442>
 8004a8c:	e6fa      	b.n	8004884 <_printf_float+0x258>
 8004a8e:	f04f 0800 	mov.w	r8, #0
 8004a92:	f104 0919 	add.w	r9, r4, #25
 8004a96:	e7f4      	b.n	8004a82 <_printf_float+0x456>

08004a98 <_printf_common>:
 8004a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a9c:	4616      	mov	r6, r2
 8004a9e:	4699      	mov	r9, r3
 8004aa0:	688a      	ldr	r2, [r1, #8]
 8004aa2:	690b      	ldr	r3, [r1, #16]
 8004aa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	bfb8      	it	lt
 8004aac:	4613      	movlt	r3, r2
 8004aae:	6033      	str	r3, [r6, #0]
 8004ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ab4:	4607      	mov	r7, r0
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	b10a      	cbz	r2, 8004abe <_printf_common+0x26>
 8004aba:	3301      	adds	r3, #1
 8004abc:	6033      	str	r3, [r6, #0]
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	0699      	lsls	r1, r3, #26
 8004ac2:	bf42      	ittt	mi
 8004ac4:	6833      	ldrmi	r3, [r6, #0]
 8004ac6:	3302      	addmi	r3, #2
 8004ac8:	6033      	strmi	r3, [r6, #0]
 8004aca:	6825      	ldr	r5, [r4, #0]
 8004acc:	f015 0506 	ands.w	r5, r5, #6
 8004ad0:	d106      	bne.n	8004ae0 <_printf_common+0x48>
 8004ad2:	f104 0a19 	add.w	sl, r4, #25
 8004ad6:	68e3      	ldr	r3, [r4, #12]
 8004ad8:	6832      	ldr	r2, [r6, #0]
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	42ab      	cmp	r3, r5
 8004ade:	dc26      	bgt.n	8004b2e <_printf_common+0x96>
 8004ae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ae4:	1e13      	subs	r3, r2, #0
 8004ae6:	6822      	ldr	r2, [r4, #0]
 8004ae8:	bf18      	it	ne
 8004aea:	2301      	movne	r3, #1
 8004aec:	0692      	lsls	r2, r2, #26
 8004aee:	d42b      	bmi.n	8004b48 <_printf_common+0xb0>
 8004af0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004af4:	4649      	mov	r1, r9
 8004af6:	4638      	mov	r0, r7
 8004af8:	47c0      	blx	r8
 8004afa:	3001      	adds	r0, #1
 8004afc:	d01e      	beq.n	8004b3c <_printf_common+0xa4>
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	68e5      	ldr	r5, [r4, #12]
 8004b02:	6832      	ldr	r2, [r6, #0]
 8004b04:	f003 0306 	and.w	r3, r3, #6
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	bf08      	it	eq
 8004b0c:	1aad      	subeq	r5, r5, r2
 8004b0e:	68a3      	ldr	r3, [r4, #8]
 8004b10:	6922      	ldr	r2, [r4, #16]
 8004b12:	bf0c      	ite	eq
 8004b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b18:	2500      	movne	r5, #0
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	bfc4      	itt	gt
 8004b1e:	1a9b      	subgt	r3, r3, r2
 8004b20:	18ed      	addgt	r5, r5, r3
 8004b22:	2600      	movs	r6, #0
 8004b24:	341a      	adds	r4, #26
 8004b26:	42b5      	cmp	r5, r6
 8004b28:	d11a      	bne.n	8004b60 <_printf_common+0xc8>
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	e008      	b.n	8004b40 <_printf_common+0xa8>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	4652      	mov	r2, sl
 8004b32:	4649      	mov	r1, r9
 8004b34:	4638      	mov	r0, r7
 8004b36:	47c0      	blx	r8
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d103      	bne.n	8004b44 <_printf_common+0xac>
 8004b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b44:	3501      	adds	r5, #1
 8004b46:	e7c6      	b.n	8004ad6 <_printf_common+0x3e>
 8004b48:	18e1      	adds	r1, r4, r3
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	2030      	movs	r0, #48	; 0x30
 8004b4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b52:	4422      	add	r2, r4
 8004b54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	e7c7      	b.n	8004af0 <_printf_common+0x58>
 8004b60:	2301      	movs	r3, #1
 8004b62:	4622      	mov	r2, r4
 8004b64:	4649      	mov	r1, r9
 8004b66:	4638      	mov	r0, r7
 8004b68:	47c0      	blx	r8
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d0e6      	beq.n	8004b3c <_printf_common+0xa4>
 8004b6e:	3601      	adds	r6, #1
 8004b70:	e7d9      	b.n	8004b26 <_printf_common+0x8e>
	...

08004b74 <_printf_i>:
 8004b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b78:	460c      	mov	r4, r1
 8004b7a:	4691      	mov	r9, r2
 8004b7c:	7e27      	ldrb	r7, [r4, #24]
 8004b7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b80:	2f78      	cmp	r7, #120	; 0x78
 8004b82:	4680      	mov	r8, r0
 8004b84:	469a      	mov	sl, r3
 8004b86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b8a:	d807      	bhi.n	8004b9c <_printf_i+0x28>
 8004b8c:	2f62      	cmp	r7, #98	; 0x62
 8004b8e:	d80a      	bhi.n	8004ba6 <_printf_i+0x32>
 8004b90:	2f00      	cmp	r7, #0
 8004b92:	f000 80d8 	beq.w	8004d46 <_printf_i+0x1d2>
 8004b96:	2f58      	cmp	r7, #88	; 0x58
 8004b98:	f000 80a3 	beq.w	8004ce2 <_printf_i+0x16e>
 8004b9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ba4:	e03a      	b.n	8004c1c <_printf_i+0xa8>
 8004ba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004baa:	2b15      	cmp	r3, #21
 8004bac:	d8f6      	bhi.n	8004b9c <_printf_i+0x28>
 8004bae:	a001      	add	r0, pc, #4	; (adr r0, 8004bb4 <_printf_i+0x40>)
 8004bb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004bb4:	08004c0d 	.word	0x08004c0d
 8004bb8:	08004c21 	.word	0x08004c21
 8004bbc:	08004b9d 	.word	0x08004b9d
 8004bc0:	08004b9d 	.word	0x08004b9d
 8004bc4:	08004b9d 	.word	0x08004b9d
 8004bc8:	08004b9d 	.word	0x08004b9d
 8004bcc:	08004c21 	.word	0x08004c21
 8004bd0:	08004b9d 	.word	0x08004b9d
 8004bd4:	08004b9d 	.word	0x08004b9d
 8004bd8:	08004b9d 	.word	0x08004b9d
 8004bdc:	08004b9d 	.word	0x08004b9d
 8004be0:	08004d2d 	.word	0x08004d2d
 8004be4:	08004c51 	.word	0x08004c51
 8004be8:	08004d0f 	.word	0x08004d0f
 8004bec:	08004b9d 	.word	0x08004b9d
 8004bf0:	08004b9d 	.word	0x08004b9d
 8004bf4:	08004d4f 	.word	0x08004d4f
 8004bf8:	08004b9d 	.word	0x08004b9d
 8004bfc:	08004c51 	.word	0x08004c51
 8004c00:	08004b9d 	.word	0x08004b9d
 8004c04:	08004b9d 	.word	0x08004b9d
 8004c08:	08004d17 	.word	0x08004d17
 8004c0c:	680b      	ldr	r3, [r1, #0]
 8004c0e:	1d1a      	adds	r2, r3, #4
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	600a      	str	r2, [r1, #0]
 8004c14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0a3      	b.n	8004d68 <_printf_i+0x1f4>
 8004c20:	6825      	ldr	r5, [r4, #0]
 8004c22:	6808      	ldr	r0, [r1, #0]
 8004c24:	062e      	lsls	r6, r5, #24
 8004c26:	f100 0304 	add.w	r3, r0, #4
 8004c2a:	d50a      	bpl.n	8004c42 <_printf_i+0xce>
 8004c2c:	6805      	ldr	r5, [r0, #0]
 8004c2e:	600b      	str	r3, [r1, #0]
 8004c30:	2d00      	cmp	r5, #0
 8004c32:	da03      	bge.n	8004c3c <_printf_i+0xc8>
 8004c34:	232d      	movs	r3, #45	; 0x2d
 8004c36:	426d      	negs	r5, r5
 8004c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c3c:	485e      	ldr	r0, [pc, #376]	; (8004db8 <_printf_i+0x244>)
 8004c3e:	230a      	movs	r3, #10
 8004c40:	e019      	b.n	8004c76 <_printf_i+0x102>
 8004c42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c46:	6805      	ldr	r5, [r0, #0]
 8004c48:	600b      	str	r3, [r1, #0]
 8004c4a:	bf18      	it	ne
 8004c4c:	b22d      	sxthne	r5, r5
 8004c4e:	e7ef      	b.n	8004c30 <_printf_i+0xbc>
 8004c50:	680b      	ldr	r3, [r1, #0]
 8004c52:	6825      	ldr	r5, [r4, #0]
 8004c54:	1d18      	adds	r0, r3, #4
 8004c56:	6008      	str	r0, [r1, #0]
 8004c58:	0628      	lsls	r0, r5, #24
 8004c5a:	d501      	bpl.n	8004c60 <_printf_i+0xec>
 8004c5c:	681d      	ldr	r5, [r3, #0]
 8004c5e:	e002      	b.n	8004c66 <_printf_i+0xf2>
 8004c60:	0669      	lsls	r1, r5, #25
 8004c62:	d5fb      	bpl.n	8004c5c <_printf_i+0xe8>
 8004c64:	881d      	ldrh	r5, [r3, #0]
 8004c66:	4854      	ldr	r0, [pc, #336]	; (8004db8 <_printf_i+0x244>)
 8004c68:	2f6f      	cmp	r7, #111	; 0x6f
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2308      	moveq	r3, #8
 8004c6e:	230a      	movne	r3, #10
 8004c70:	2100      	movs	r1, #0
 8004c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c76:	6866      	ldr	r6, [r4, #4]
 8004c78:	60a6      	str	r6, [r4, #8]
 8004c7a:	2e00      	cmp	r6, #0
 8004c7c:	bfa2      	ittt	ge
 8004c7e:	6821      	ldrge	r1, [r4, #0]
 8004c80:	f021 0104 	bicge.w	r1, r1, #4
 8004c84:	6021      	strge	r1, [r4, #0]
 8004c86:	b90d      	cbnz	r5, 8004c8c <_printf_i+0x118>
 8004c88:	2e00      	cmp	r6, #0
 8004c8a:	d04d      	beq.n	8004d28 <_printf_i+0x1b4>
 8004c8c:	4616      	mov	r6, r2
 8004c8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c92:	fb03 5711 	mls	r7, r3, r1, r5
 8004c96:	5dc7      	ldrb	r7, [r0, r7]
 8004c98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c9c:	462f      	mov	r7, r5
 8004c9e:	42bb      	cmp	r3, r7
 8004ca0:	460d      	mov	r5, r1
 8004ca2:	d9f4      	bls.n	8004c8e <_printf_i+0x11a>
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d10b      	bne.n	8004cc0 <_printf_i+0x14c>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	07df      	lsls	r7, r3, #31
 8004cac:	d508      	bpl.n	8004cc0 <_printf_i+0x14c>
 8004cae:	6923      	ldr	r3, [r4, #16]
 8004cb0:	6861      	ldr	r1, [r4, #4]
 8004cb2:	4299      	cmp	r1, r3
 8004cb4:	bfde      	ittt	le
 8004cb6:	2330      	movle	r3, #48	; 0x30
 8004cb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cc0:	1b92      	subs	r2, r2, r6
 8004cc2:	6122      	str	r2, [r4, #16]
 8004cc4:	f8cd a000 	str.w	sl, [sp]
 8004cc8:	464b      	mov	r3, r9
 8004cca:	aa03      	add	r2, sp, #12
 8004ccc:	4621      	mov	r1, r4
 8004cce:	4640      	mov	r0, r8
 8004cd0:	f7ff fee2 	bl	8004a98 <_printf_common>
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	d14c      	bne.n	8004d72 <_printf_i+0x1fe>
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cdc:	b004      	add	sp, #16
 8004cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce2:	4835      	ldr	r0, [pc, #212]	; (8004db8 <_printf_i+0x244>)
 8004ce4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	680e      	ldr	r6, [r1, #0]
 8004cec:	061f      	lsls	r7, r3, #24
 8004cee:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cf2:	600e      	str	r6, [r1, #0]
 8004cf4:	d514      	bpl.n	8004d20 <_printf_i+0x1ac>
 8004cf6:	07d9      	lsls	r1, r3, #31
 8004cf8:	bf44      	itt	mi
 8004cfa:	f043 0320 	orrmi.w	r3, r3, #32
 8004cfe:	6023      	strmi	r3, [r4, #0]
 8004d00:	b91d      	cbnz	r5, 8004d0a <_printf_i+0x196>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	f023 0320 	bic.w	r3, r3, #32
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	2310      	movs	r3, #16
 8004d0c:	e7b0      	b.n	8004c70 <_printf_i+0xfc>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	f043 0320 	orr.w	r3, r3, #32
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	2378      	movs	r3, #120	; 0x78
 8004d18:	4828      	ldr	r0, [pc, #160]	; (8004dbc <_printf_i+0x248>)
 8004d1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d1e:	e7e3      	b.n	8004ce8 <_printf_i+0x174>
 8004d20:	065e      	lsls	r6, r3, #25
 8004d22:	bf48      	it	mi
 8004d24:	b2ad      	uxthmi	r5, r5
 8004d26:	e7e6      	b.n	8004cf6 <_printf_i+0x182>
 8004d28:	4616      	mov	r6, r2
 8004d2a:	e7bb      	b.n	8004ca4 <_printf_i+0x130>
 8004d2c:	680b      	ldr	r3, [r1, #0]
 8004d2e:	6826      	ldr	r6, [r4, #0]
 8004d30:	6960      	ldr	r0, [r4, #20]
 8004d32:	1d1d      	adds	r5, r3, #4
 8004d34:	600d      	str	r5, [r1, #0]
 8004d36:	0635      	lsls	r5, r6, #24
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	d501      	bpl.n	8004d40 <_printf_i+0x1cc>
 8004d3c:	6018      	str	r0, [r3, #0]
 8004d3e:	e002      	b.n	8004d46 <_printf_i+0x1d2>
 8004d40:	0671      	lsls	r1, r6, #25
 8004d42:	d5fb      	bpl.n	8004d3c <_printf_i+0x1c8>
 8004d44:	8018      	strh	r0, [r3, #0]
 8004d46:	2300      	movs	r3, #0
 8004d48:	6123      	str	r3, [r4, #16]
 8004d4a:	4616      	mov	r6, r2
 8004d4c:	e7ba      	b.n	8004cc4 <_printf_i+0x150>
 8004d4e:	680b      	ldr	r3, [r1, #0]
 8004d50:	1d1a      	adds	r2, r3, #4
 8004d52:	600a      	str	r2, [r1, #0]
 8004d54:	681e      	ldr	r6, [r3, #0]
 8004d56:	6862      	ldr	r2, [r4, #4]
 8004d58:	2100      	movs	r1, #0
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f7fb fa50 	bl	8000200 <memchr>
 8004d60:	b108      	cbz	r0, 8004d66 <_printf_i+0x1f2>
 8004d62:	1b80      	subs	r0, r0, r6
 8004d64:	6060      	str	r0, [r4, #4]
 8004d66:	6863      	ldr	r3, [r4, #4]
 8004d68:	6123      	str	r3, [r4, #16]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d70:	e7a8      	b.n	8004cc4 <_printf_i+0x150>
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	4632      	mov	r2, r6
 8004d76:	4649      	mov	r1, r9
 8004d78:	4640      	mov	r0, r8
 8004d7a:	47d0      	blx	sl
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d0ab      	beq.n	8004cd8 <_printf_i+0x164>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	079b      	lsls	r3, r3, #30
 8004d84:	d413      	bmi.n	8004dae <_printf_i+0x23a>
 8004d86:	68e0      	ldr	r0, [r4, #12]
 8004d88:	9b03      	ldr	r3, [sp, #12]
 8004d8a:	4298      	cmp	r0, r3
 8004d8c:	bfb8      	it	lt
 8004d8e:	4618      	movlt	r0, r3
 8004d90:	e7a4      	b.n	8004cdc <_printf_i+0x168>
 8004d92:	2301      	movs	r3, #1
 8004d94:	4632      	mov	r2, r6
 8004d96:	4649      	mov	r1, r9
 8004d98:	4640      	mov	r0, r8
 8004d9a:	47d0      	blx	sl
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	d09b      	beq.n	8004cd8 <_printf_i+0x164>
 8004da0:	3501      	adds	r5, #1
 8004da2:	68e3      	ldr	r3, [r4, #12]
 8004da4:	9903      	ldr	r1, [sp, #12]
 8004da6:	1a5b      	subs	r3, r3, r1
 8004da8:	42ab      	cmp	r3, r5
 8004daa:	dcf2      	bgt.n	8004d92 <_printf_i+0x21e>
 8004dac:	e7eb      	b.n	8004d86 <_printf_i+0x212>
 8004dae:	2500      	movs	r5, #0
 8004db0:	f104 0619 	add.w	r6, r4, #25
 8004db4:	e7f5      	b.n	8004da2 <_printf_i+0x22e>
 8004db6:	bf00      	nop
 8004db8:	0800a66a 	.word	0x0800a66a
 8004dbc:	0800a67b 	.word	0x0800a67b

08004dc0 <_scanf_float>:
 8004dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc4:	b087      	sub	sp, #28
 8004dc6:	4617      	mov	r7, r2
 8004dc8:	9303      	str	r3, [sp, #12]
 8004dca:	688b      	ldr	r3, [r1, #8]
 8004dcc:	1e5a      	subs	r2, r3, #1
 8004dce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004dd2:	bf83      	ittte	hi
 8004dd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004dd8:	195b      	addhi	r3, r3, r5
 8004dda:	9302      	strhi	r3, [sp, #8]
 8004ddc:	2300      	movls	r3, #0
 8004dde:	bf86      	itte	hi
 8004de0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004de4:	608b      	strhi	r3, [r1, #8]
 8004de6:	9302      	strls	r3, [sp, #8]
 8004de8:	680b      	ldr	r3, [r1, #0]
 8004dea:	468b      	mov	fp, r1
 8004dec:	2500      	movs	r5, #0
 8004dee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004df2:	f84b 3b1c 	str.w	r3, [fp], #28
 8004df6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004dfa:	4680      	mov	r8, r0
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	465e      	mov	r6, fp
 8004e00:	46aa      	mov	sl, r5
 8004e02:	46a9      	mov	r9, r5
 8004e04:	9501      	str	r5, [sp, #4]
 8004e06:	68a2      	ldr	r2, [r4, #8]
 8004e08:	b152      	cbz	r2, 8004e20 <_scanf_float+0x60>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b4e      	cmp	r3, #78	; 0x4e
 8004e10:	d864      	bhi.n	8004edc <_scanf_float+0x11c>
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	d83c      	bhi.n	8004e90 <_scanf_float+0xd0>
 8004e16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004e1a:	b2c8      	uxtb	r0, r1
 8004e1c:	280e      	cmp	r0, #14
 8004e1e:	d93a      	bls.n	8004e96 <_scanf_float+0xd6>
 8004e20:	f1b9 0f00 	cmp.w	r9, #0
 8004e24:	d003      	beq.n	8004e2e <_scanf_float+0x6e>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e32:	f1ba 0f01 	cmp.w	sl, #1
 8004e36:	f200 8113 	bhi.w	8005060 <_scanf_float+0x2a0>
 8004e3a:	455e      	cmp	r6, fp
 8004e3c:	f200 8105 	bhi.w	800504a <_scanf_float+0x28a>
 8004e40:	2501      	movs	r5, #1
 8004e42:	4628      	mov	r0, r5
 8004e44:	b007      	add	sp, #28
 8004e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004e4e:	2a0d      	cmp	r2, #13
 8004e50:	d8e6      	bhi.n	8004e20 <_scanf_float+0x60>
 8004e52:	a101      	add	r1, pc, #4	; (adr r1, 8004e58 <_scanf_float+0x98>)
 8004e54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004e58:	08004f97 	.word	0x08004f97
 8004e5c:	08004e21 	.word	0x08004e21
 8004e60:	08004e21 	.word	0x08004e21
 8004e64:	08004e21 	.word	0x08004e21
 8004e68:	08004ff7 	.word	0x08004ff7
 8004e6c:	08004fcf 	.word	0x08004fcf
 8004e70:	08004e21 	.word	0x08004e21
 8004e74:	08004e21 	.word	0x08004e21
 8004e78:	08004fa5 	.word	0x08004fa5
 8004e7c:	08004e21 	.word	0x08004e21
 8004e80:	08004e21 	.word	0x08004e21
 8004e84:	08004e21 	.word	0x08004e21
 8004e88:	08004e21 	.word	0x08004e21
 8004e8c:	08004f5d 	.word	0x08004f5d
 8004e90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004e94:	e7db      	b.n	8004e4e <_scanf_float+0x8e>
 8004e96:	290e      	cmp	r1, #14
 8004e98:	d8c2      	bhi.n	8004e20 <_scanf_float+0x60>
 8004e9a:	a001      	add	r0, pc, #4	; (adr r0, 8004ea0 <_scanf_float+0xe0>)
 8004e9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004ea0:	08004f4f 	.word	0x08004f4f
 8004ea4:	08004e21 	.word	0x08004e21
 8004ea8:	08004f4f 	.word	0x08004f4f
 8004eac:	08004fe3 	.word	0x08004fe3
 8004eb0:	08004e21 	.word	0x08004e21
 8004eb4:	08004efd 	.word	0x08004efd
 8004eb8:	08004f39 	.word	0x08004f39
 8004ebc:	08004f39 	.word	0x08004f39
 8004ec0:	08004f39 	.word	0x08004f39
 8004ec4:	08004f39 	.word	0x08004f39
 8004ec8:	08004f39 	.word	0x08004f39
 8004ecc:	08004f39 	.word	0x08004f39
 8004ed0:	08004f39 	.word	0x08004f39
 8004ed4:	08004f39 	.word	0x08004f39
 8004ed8:	08004f39 	.word	0x08004f39
 8004edc:	2b6e      	cmp	r3, #110	; 0x6e
 8004ede:	d809      	bhi.n	8004ef4 <_scanf_float+0x134>
 8004ee0:	2b60      	cmp	r3, #96	; 0x60
 8004ee2:	d8b2      	bhi.n	8004e4a <_scanf_float+0x8a>
 8004ee4:	2b54      	cmp	r3, #84	; 0x54
 8004ee6:	d077      	beq.n	8004fd8 <_scanf_float+0x218>
 8004ee8:	2b59      	cmp	r3, #89	; 0x59
 8004eea:	d199      	bne.n	8004e20 <_scanf_float+0x60>
 8004eec:	2d07      	cmp	r5, #7
 8004eee:	d197      	bne.n	8004e20 <_scanf_float+0x60>
 8004ef0:	2508      	movs	r5, #8
 8004ef2:	e029      	b.n	8004f48 <_scanf_float+0x188>
 8004ef4:	2b74      	cmp	r3, #116	; 0x74
 8004ef6:	d06f      	beq.n	8004fd8 <_scanf_float+0x218>
 8004ef8:	2b79      	cmp	r3, #121	; 0x79
 8004efa:	e7f6      	b.n	8004eea <_scanf_float+0x12a>
 8004efc:	6821      	ldr	r1, [r4, #0]
 8004efe:	05c8      	lsls	r0, r1, #23
 8004f00:	d51a      	bpl.n	8004f38 <_scanf_float+0x178>
 8004f02:	9b02      	ldr	r3, [sp, #8]
 8004f04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004f08:	6021      	str	r1, [r4, #0]
 8004f0a:	f109 0901 	add.w	r9, r9, #1
 8004f0e:	b11b      	cbz	r3, 8004f18 <_scanf_float+0x158>
 8004f10:	3b01      	subs	r3, #1
 8004f12:	3201      	adds	r2, #1
 8004f14:	9302      	str	r3, [sp, #8]
 8004f16:	60a2      	str	r2, [r4, #8]
 8004f18:	68a3      	ldr	r3, [r4, #8]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	60a3      	str	r3, [r4, #8]
 8004f1e:	6923      	ldr	r3, [r4, #16]
 8004f20:	3301      	adds	r3, #1
 8004f22:	6123      	str	r3, [r4, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	607b      	str	r3, [r7, #4]
 8004f2c:	f340 8084 	ble.w	8005038 <_scanf_float+0x278>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	3301      	adds	r3, #1
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	e766      	b.n	8004e06 <_scanf_float+0x46>
 8004f38:	eb1a 0f05 	cmn.w	sl, r5
 8004f3c:	f47f af70 	bne.w	8004e20 <_scanf_float+0x60>
 8004f40:	6822      	ldr	r2, [r4, #0]
 8004f42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004f46:	6022      	str	r2, [r4, #0]
 8004f48:	f806 3b01 	strb.w	r3, [r6], #1
 8004f4c:	e7e4      	b.n	8004f18 <_scanf_float+0x158>
 8004f4e:	6822      	ldr	r2, [r4, #0]
 8004f50:	0610      	lsls	r0, r2, #24
 8004f52:	f57f af65 	bpl.w	8004e20 <_scanf_float+0x60>
 8004f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f5a:	e7f4      	b.n	8004f46 <_scanf_float+0x186>
 8004f5c:	f1ba 0f00 	cmp.w	sl, #0
 8004f60:	d10e      	bne.n	8004f80 <_scanf_float+0x1c0>
 8004f62:	f1b9 0f00 	cmp.w	r9, #0
 8004f66:	d10e      	bne.n	8004f86 <_scanf_float+0x1c6>
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f72:	d108      	bne.n	8004f86 <_scanf_float+0x1c6>
 8004f74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f78:	6022      	str	r2, [r4, #0]
 8004f7a:	f04f 0a01 	mov.w	sl, #1
 8004f7e:	e7e3      	b.n	8004f48 <_scanf_float+0x188>
 8004f80:	f1ba 0f02 	cmp.w	sl, #2
 8004f84:	d055      	beq.n	8005032 <_scanf_float+0x272>
 8004f86:	2d01      	cmp	r5, #1
 8004f88:	d002      	beq.n	8004f90 <_scanf_float+0x1d0>
 8004f8a:	2d04      	cmp	r5, #4
 8004f8c:	f47f af48 	bne.w	8004e20 <_scanf_float+0x60>
 8004f90:	3501      	adds	r5, #1
 8004f92:	b2ed      	uxtb	r5, r5
 8004f94:	e7d8      	b.n	8004f48 <_scanf_float+0x188>
 8004f96:	f1ba 0f01 	cmp.w	sl, #1
 8004f9a:	f47f af41 	bne.w	8004e20 <_scanf_float+0x60>
 8004f9e:	f04f 0a02 	mov.w	sl, #2
 8004fa2:	e7d1      	b.n	8004f48 <_scanf_float+0x188>
 8004fa4:	b97d      	cbnz	r5, 8004fc6 <_scanf_float+0x206>
 8004fa6:	f1b9 0f00 	cmp.w	r9, #0
 8004faa:	f47f af3c 	bne.w	8004e26 <_scanf_float+0x66>
 8004fae:	6822      	ldr	r2, [r4, #0]
 8004fb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004fb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004fb8:	f47f af39 	bne.w	8004e2e <_scanf_float+0x6e>
 8004fbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004fc0:	6022      	str	r2, [r4, #0]
 8004fc2:	2501      	movs	r5, #1
 8004fc4:	e7c0      	b.n	8004f48 <_scanf_float+0x188>
 8004fc6:	2d03      	cmp	r5, #3
 8004fc8:	d0e2      	beq.n	8004f90 <_scanf_float+0x1d0>
 8004fca:	2d05      	cmp	r5, #5
 8004fcc:	e7de      	b.n	8004f8c <_scanf_float+0x1cc>
 8004fce:	2d02      	cmp	r5, #2
 8004fd0:	f47f af26 	bne.w	8004e20 <_scanf_float+0x60>
 8004fd4:	2503      	movs	r5, #3
 8004fd6:	e7b7      	b.n	8004f48 <_scanf_float+0x188>
 8004fd8:	2d06      	cmp	r5, #6
 8004fda:	f47f af21 	bne.w	8004e20 <_scanf_float+0x60>
 8004fde:	2507      	movs	r5, #7
 8004fe0:	e7b2      	b.n	8004f48 <_scanf_float+0x188>
 8004fe2:	6822      	ldr	r2, [r4, #0]
 8004fe4:	0591      	lsls	r1, r2, #22
 8004fe6:	f57f af1b 	bpl.w	8004e20 <_scanf_float+0x60>
 8004fea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004fee:	6022      	str	r2, [r4, #0]
 8004ff0:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ff4:	e7a8      	b.n	8004f48 <_scanf_float+0x188>
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004ffc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005000:	d006      	beq.n	8005010 <_scanf_float+0x250>
 8005002:	0550      	lsls	r0, r2, #21
 8005004:	f57f af0c 	bpl.w	8004e20 <_scanf_float+0x60>
 8005008:	f1b9 0f00 	cmp.w	r9, #0
 800500c:	f43f af0f 	beq.w	8004e2e <_scanf_float+0x6e>
 8005010:	0591      	lsls	r1, r2, #22
 8005012:	bf58      	it	pl
 8005014:	9901      	ldrpl	r1, [sp, #4]
 8005016:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800501a:	bf58      	it	pl
 800501c:	eba9 0101 	subpl.w	r1, r9, r1
 8005020:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005024:	bf58      	it	pl
 8005026:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800502a:	6022      	str	r2, [r4, #0]
 800502c:	f04f 0900 	mov.w	r9, #0
 8005030:	e78a      	b.n	8004f48 <_scanf_float+0x188>
 8005032:	f04f 0a03 	mov.w	sl, #3
 8005036:	e787      	b.n	8004f48 <_scanf_float+0x188>
 8005038:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800503c:	4639      	mov	r1, r7
 800503e:	4640      	mov	r0, r8
 8005040:	4798      	blx	r3
 8005042:	2800      	cmp	r0, #0
 8005044:	f43f aedf 	beq.w	8004e06 <_scanf_float+0x46>
 8005048:	e6ea      	b.n	8004e20 <_scanf_float+0x60>
 800504a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800504e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005052:	463a      	mov	r2, r7
 8005054:	4640      	mov	r0, r8
 8005056:	4798      	blx	r3
 8005058:	6923      	ldr	r3, [r4, #16]
 800505a:	3b01      	subs	r3, #1
 800505c:	6123      	str	r3, [r4, #16]
 800505e:	e6ec      	b.n	8004e3a <_scanf_float+0x7a>
 8005060:	1e6b      	subs	r3, r5, #1
 8005062:	2b06      	cmp	r3, #6
 8005064:	d825      	bhi.n	80050b2 <_scanf_float+0x2f2>
 8005066:	2d02      	cmp	r5, #2
 8005068:	d836      	bhi.n	80050d8 <_scanf_float+0x318>
 800506a:	455e      	cmp	r6, fp
 800506c:	f67f aee8 	bls.w	8004e40 <_scanf_float+0x80>
 8005070:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005074:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005078:	463a      	mov	r2, r7
 800507a:	4640      	mov	r0, r8
 800507c:	4798      	blx	r3
 800507e:	6923      	ldr	r3, [r4, #16]
 8005080:	3b01      	subs	r3, #1
 8005082:	6123      	str	r3, [r4, #16]
 8005084:	e7f1      	b.n	800506a <_scanf_float+0x2aa>
 8005086:	9802      	ldr	r0, [sp, #8]
 8005088:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800508c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005090:	9002      	str	r0, [sp, #8]
 8005092:	463a      	mov	r2, r7
 8005094:	4640      	mov	r0, r8
 8005096:	4798      	blx	r3
 8005098:	6923      	ldr	r3, [r4, #16]
 800509a:	3b01      	subs	r3, #1
 800509c:	6123      	str	r3, [r4, #16]
 800509e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050a2:	fa5f fa8a 	uxtb.w	sl, sl
 80050a6:	f1ba 0f02 	cmp.w	sl, #2
 80050aa:	d1ec      	bne.n	8005086 <_scanf_float+0x2c6>
 80050ac:	3d03      	subs	r5, #3
 80050ae:	b2ed      	uxtb	r5, r5
 80050b0:	1b76      	subs	r6, r6, r5
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	05da      	lsls	r2, r3, #23
 80050b6:	d52f      	bpl.n	8005118 <_scanf_float+0x358>
 80050b8:	055b      	lsls	r3, r3, #21
 80050ba:	d510      	bpl.n	80050de <_scanf_float+0x31e>
 80050bc:	455e      	cmp	r6, fp
 80050be:	f67f aebf 	bls.w	8004e40 <_scanf_float+0x80>
 80050c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050ca:	463a      	mov	r2, r7
 80050cc:	4640      	mov	r0, r8
 80050ce:	4798      	blx	r3
 80050d0:	6923      	ldr	r3, [r4, #16]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	6123      	str	r3, [r4, #16]
 80050d6:	e7f1      	b.n	80050bc <_scanf_float+0x2fc>
 80050d8:	46aa      	mov	sl, r5
 80050da:	9602      	str	r6, [sp, #8]
 80050dc:	e7df      	b.n	800509e <_scanf_float+0x2de>
 80050de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80050e2:	6923      	ldr	r3, [r4, #16]
 80050e4:	2965      	cmp	r1, #101	; 0x65
 80050e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80050ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80050ee:	6123      	str	r3, [r4, #16]
 80050f0:	d00c      	beq.n	800510c <_scanf_float+0x34c>
 80050f2:	2945      	cmp	r1, #69	; 0x45
 80050f4:	d00a      	beq.n	800510c <_scanf_float+0x34c>
 80050f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050fa:	463a      	mov	r2, r7
 80050fc:	4640      	mov	r0, r8
 80050fe:	4798      	blx	r3
 8005100:	6923      	ldr	r3, [r4, #16]
 8005102:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005106:	3b01      	subs	r3, #1
 8005108:	1eb5      	subs	r5, r6, #2
 800510a:	6123      	str	r3, [r4, #16]
 800510c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005110:	463a      	mov	r2, r7
 8005112:	4640      	mov	r0, r8
 8005114:	4798      	blx	r3
 8005116:	462e      	mov	r6, r5
 8005118:	6825      	ldr	r5, [r4, #0]
 800511a:	f015 0510 	ands.w	r5, r5, #16
 800511e:	d158      	bne.n	80051d2 <_scanf_float+0x412>
 8005120:	7035      	strb	r5, [r6, #0]
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800512c:	d11c      	bne.n	8005168 <_scanf_float+0x3a8>
 800512e:	9b01      	ldr	r3, [sp, #4]
 8005130:	454b      	cmp	r3, r9
 8005132:	eba3 0209 	sub.w	r2, r3, r9
 8005136:	d124      	bne.n	8005182 <_scanf_float+0x3c2>
 8005138:	2200      	movs	r2, #0
 800513a:	4659      	mov	r1, fp
 800513c:	4640      	mov	r0, r8
 800513e:	f000 ff79 	bl	8006034 <_strtod_r>
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	6821      	ldr	r1, [r4, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f011 0f02 	tst.w	r1, #2
 800514c:	ec57 6b10 	vmov	r6, r7, d0
 8005150:	f103 0204 	add.w	r2, r3, #4
 8005154:	d020      	beq.n	8005198 <_scanf_float+0x3d8>
 8005156:	9903      	ldr	r1, [sp, #12]
 8005158:	600a      	str	r2, [r1, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	e9c3 6700 	strd	r6, r7, [r3]
 8005160:	68e3      	ldr	r3, [r4, #12]
 8005162:	3301      	adds	r3, #1
 8005164:	60e3      	str	r3, [r4, #12]
 8005166:	e66c      	b.n	8004e42 <_scanf_float+0x82>
 8005168:	9b04      	ldr	r3, [sp, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0e4      	beq.n	8005138 <_scanf_float+0x378>
 800516e:	9905      	ldr	r1, [sp, #20]
 8005170:	230a      	movs	r3, #10
 8005172:	462a      	mov	r2, r5
 8005174:	3101      	adds	r1, #1
 8005176:	4640      	mov	r0, r8
 8005178:	f000 ffe6 	bl	8006148 <_strtol_r>
 800517c:	9b04      	ldr	r3, [sp, #16]
 800517e:	9e05      	ldr	r6, [sp, #20]
 8005180:	1ac2      	subs	r2, r0, r3
 8005182:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005186:	429e      	cmp	r6, r3
 8005188:	bf28      	it	cs
 800518a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800518e:	4912      	ldr	r1, [pc, #72]	; (80051d8 <_scanf_float+0x418>)
 8005190:	4630      	mov	r0, r6
 8005192:	f000 f909 	bl	80053a8 <siprintf>
 8005196:	e7cf      	b.n	8005138 <_scanf_float+0x378>
 8005198:	f011 0f04 	tst.w	r1, #4
 800519c:	9903      	ldr	r1, [sp, #12]
 800519e:	600a      	str	r2, [r1, #0]
 80051a0:	d1db      	bne.n	800515a <_scanf_float+0x39a>
 80051a2:	f8d3 8000 	ldr.w	r8, [r3]
 80051a6:	ee10 2a10 	vmov	r2, s0
 80051aa:	ee10 0a10 	vmov	r0, s0
 80051ae:	463b      	mov	r3, r7
 80051b0:	4639      	mov	r1, r7
 80051b2:	f7fb fccb 	bl	8000b4c <__aeabi_dcmpun>
 80051b6:	b128      	cbz	r0, 80051c4 <_scanf_float+0x404>
 80051b8:	4808      	ldr	r0, [pc, #32]	; (80051dc <_scanf_float+0x41c>)
 80051ba:	f000 f8ef 	bl	800539c <nanf>
 80051be:	ed88 0a00 	vstr	s0, [r8]
 80051c2:	e7cd      	b.n	8005160 <_scanf_float+0x3a0>
 80051c4:	4630      	mov	r0, r6
 80051c6:	4639      	mov	r1, r7
 80051c8:	f7fb fd1e 	bl	8000c08 <__aeabi_d2f>
 80051cc:	f8c8 0000 	str.w	r0, [r8]
 80051d0:	e7c6      	b.n	8005160 <_scanf_float+0x3a0>
 80051d2:	2500      	movs	r5, #0
 80051d4:	e635      	b.n	8004e42 <_scanf_float+0x82>
 80051d6:	bf00      	nop
 80051d8:	0800a68c 	.word	0x0800a68c
 80051dc:	0800ab08 	.word	0x0800ab08

080051e0 <iprintf>:
 80051e0:	b40f      	push	{r0, r1, r2, r3}
 80051e2:	4b0a      	ldr	r3, [pc, #40]	; (800520c <iprintf+0x2c>)
 80051e4:	b513      	push	{r0, r1, r4, lr}
 80051e6:	681c      	ldr	r4, [r3, #0]
 80051e8:	b124      	cbz	r4, 80051f4 <iprintf+0x14>
 80051ea:	69a3      	ldr	r3, [r4, #24]
 80051ec:	b913      	cbnz	r3, 80051f4 <iprintf+0x14>
 80051ee:	4620      	mov	r0, r4
 80051f0:	f001 ff40 	bl	8007074 <__sinit>
 80051f4:	ab05      	add	r3, sp, #20
 80051f6:	9a04      	ldr	r2, [sp, #16]
 80051f8:	68a1      	ldr	r1, [r4, #8]
 80051fa:	9301      	str	r3, [sp, #4]
 80051fc:	4620      	mov	r0, r4
 80051fe:	f003 fad3 	bl	80087a8 <_vfiprintf_r>
 8005202:	b002      	add	sp, #8
 8005204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005208:	b004      	add	sp, #16
 800520a:	4770      	bx	lr
 800520c:	20000014 	.word	0x20000014

08005210 <setvbuf>:
 8005210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005214:	461d      	mov	r5, r3
 8005216:	4b5d      	ldr	r3, [pc, #372]	; (800538c <setvbuf+0x17c>)
 8005218:	681f      	ldr	r7, [r3, #0]
 800521a:	4604      	mov	r4, r0
 800521c:	460e      	mov	r6, r1
 800521e:	4690      	mov	r8, r2
 8005220:	b127      	cbz	r7, 800522c <setvbuf+0x1c>
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	b913      	cbnz	r3, 800522c <setvbuf+0x1c>
 8005226:	4638      	mov	r0, r7
 8005228:	f001 ff24 	bl	8007074 <__sinit>
 800522c:	4b58      	ldr	r3, [pc, #352]	; (8005390 <setvbuf+0x180>)
 800522e:	429c      	cmp	r4, r3
 8005230:	d167      	bne.n	8005302 <setvbuf+0xf2>
 8005232:	687c      	ldr	r4, [r7, #4]
 8005234:	f1b8 0f02 	cmp.w	r8, #2
 8005238:	d006      	beq.n	8005248 <setvbuf+0x38>
 800523a:	f1b8 0f01 	cmp.w	r8, #1
 800523e:	f200 809f 	bhi.w	8005380 <setvbuf+0x170>
 8005242:	2d00      	cmp	r5, #0
 8005244:	f2c0 809c 	blt.w	8005380 <setvbuf+0x170>
 8005248:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800524a:	07db      	lsls	r3, r3, #31
 800524c:	d405      	bmi.n	800525a <setvbuf+0x4a>
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	0598      	lsls	r0, r3, #22
 8005252:	d402      	bmi.n	800525a <setvbuf+0x4a>
 8005254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005256:	f002 fb1e 	bl	8007896 <__retarget_lock_acquire_recursive>
 800525a:	4621      	mov	r1, r4
 800525c:	4638      	mov	r0, r7
 800525e:	f001 fe75 	bl	8006f4c <_fflush_r>
 8005262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005264:	b141      	cbz	r1, 8005278 <setvbuf+0x68>
 8005266:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800526a:	4299      	cmp	r1, r3
 800526c:	d002      	beq.n	8005274 <setvbuf+0x64>
 800526e:	4638      	mov	r0, r7
 8005270:	f003 f86a 	bl	8008348 <_free_r>
 8005274:	2300      	movs	r3, #0
 8005276:	6363      	str	r3, [r4, #52]	; 0x34
 8005278:	2300      	movs	r3, #0
 800527a:	61a3      	str	r3, [r4, #24]
 800527c:	6063      	str	r3, [r4, #4]
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	0619      	lsls	r1, r3, #24
 8005282:	d503      	bpl.n	800528c <setvbuf+0x7c>
 8005284:	6921      	ldr	r1, [r4, #16]
 8005286:	4638      	mov	r0, r7
 8005288:	f003 f85e 	bl	8008348 <_free_r>
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	f1b8 0f02 	cmp.w	r8, #2
 800529a:	81a3      	strh	r3, [r4, #12]
 800529c:	d06c      	beq.n	8005378 <setvbuf+0x168>
 800529e:	ab01      	add	r3, sp, #4
 80052a0:	466a      	mov	r2, sp
 80052a2:	4621      	mov	r1, r4
 80052a4:	4638      	mov	r0, r7
 80052a6:	f002 faf8 	bl	800789a <__swhatbuf_r>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	4318      	orrs	r0, r3
 80052ae:	81a0      	strh	r0, [r4, #12]
 80052b0:	2d00      	cmp	r5, #0
 80052b2:	d130      	bne.n	8005316 <setvbuf+0x106>
 80052b4:	9d00      	ldr	r5, [sp, #0]
 80052b6:	4628      	mov	r0, r5
 80052b8:	f002 fb54 	bl	8007964 <malloc>
 80052bc:	4606      	mov	r6, r0
 80052be:	2800      	cmp	r0, #0
 80052c0:	d155      	bne.n	800536e <setvbuf+0x15e>
 80052c2:	f8dd 9000 	ldr.w	r9, [sp]
 80052c6:	45a9      	cmp	r9, r5
 80052c8:	d14a      	bne.n	8005360 <setvbuf+0x150>
 80052ca:	f04f 35ff 	mov.w	r5, #4294967295
 80052ce:	2200      	movs	r2, #0
 80052d0:	60a2      	str	r2, [r4, #8]
 80052d2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80052d6:	6022      	str	r2, [r4, #0]
 80052d8:	6122      	str	r2, [r4, #16]
 80052da:	2201      	movs	r2, #1
 80052dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052e0:	6162      	str	r2, [r4, #20]
 80052e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052e4:	f043 0302 	orr.w	r3, r3, #2
 80052e8:	07d2      	lsls	r2, r2, #31
 80052ea:	81a3      	strh	r3, [r4, #12]
 80052ec:	d405      	bmi.n	80052fa <setvbuf+0xea>
 80052ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80052f2:	d102      	bne.n	80052fa <setvbuf+0xea>
 80052f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052f6:	f002 facf 	bl	8007898 <__retarget_lock_release_recursive>
 80052fa:	4628      	mov	r0, r5
 80052fc:	b003      	add	sp, #12
 80052fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005302:	4b24      	ldr	r3, [pc, #144]	; (8005394 <setvbuf+0x184>)
 8005304:	429c      	cmp	r4, r3
 8005306:	d101      	bne.n	800530c <setvbuf+0xfc>
 8005308:	68bc      	ldr	r4, [r7, #8]
 800530a:	e793      	b.n	8005234 <setvbuf+0x24>
 800530c:	4b22      	ldr	r3, [pc, #136]	; (8005398 <setvbuf+0x188>)
 800530e:	429c      	cmp	r4, r3
 8005310:	bf08      	it	eq
 8005312:	68fc      	ldreq	r4, [r7, #12]
 8005314:	e78e      	b.n	8005234 <setvbuf+0x24>
 8005316:	2e00      	cmp	r6, #0
 8005318:	d0cd      	beq.n	80052b6 <setvbuf+0xa6>
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	b913      	cbnz	r3, 8005324 <setvbuf+0x114>
 800531e:	4638      	mov	r0, r7
 8005320:	f001 fea8 	bl	8007074 <__sinit>
 8005324:	f1b8 0f01 	cmp.w	r8, #1
 8005328:	bf08      	it	eq
 800532a:	89a3      	ldrheq	r3, [r4, #12]
 800532c:	6026      	str	r6, [r4, #0]
 800532e:	bf04      	itt	eq
 8005330:	f043 0301 	orreq.w	r3, r3, #1
 8005334:	81a3      	strheq	r3, [r4, #12]
 8005336:	89a2      	ldrh	r2, [r4, #12]
 8005338:	f012 0308 	ands.w	r3, r2, #8
 800533c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005340:	d01c      	beq.n	800537c <setvbuf+0x16c>
 8005342:	07d3      	lsls	r3, r2, #31
 8005344:	bf41      	itttt	mi
 8005346:	2300      	movmi	r3, #0
 8005348:	426d      	negmi	r5, r5
 800534a:	60a3      	strmi	r3, [r4, #8]
 800534c:	61a5      	strmi	r5, [r4, #24]
 800534e:	bf58      	it	pl
 8005350:	60a5      	strpl	r5, [r4, #8]
 8005352:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005354:	f015 0501 	ands.w	r5, r5, #1
 8005358:	d115      	bne.n	8005386 <setvbuf+0x176>
 800535a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800535e:	e7c8      	b.n	80052f2 <setvbuf+0xe2>
 8005360:	4648      	mov	r0, r9
 8005362:	f002 faff 	bl	8007964 <malloc>
 8005366:	4606      	mov	r6, r0
 8005368:	2800      	cmp	r0, #0
 800536a:	d0ae      	beq.n	80052ca <setvbuf+0xba>
 800536c:	464d      	mov	r5, r9
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005374:	81a3      	strh	r3, [r4, #12]
 8005376:	e7d0      	b.n	800531a <setvbuf+0x10a>
 8005378:	2500      	movs	r5, #0
 800537a:	e7a8      	b.n	80052ce <setvbuf+0xbe>
 800537c:	60a3      	str	r3, [r4, #8]
 800537e:	e7e8      	b.n	8005352 <setvbuf+0x142>
 8005380:	f04f 35ff 	mov.w	r5, #4294967295
 8005384:	e7b9      	b.n	80052fa <setvbuf+0xea>
 8005386:	2500      	movs	r5, #0
 8005388:	e7b7      	b.n	80052fa <setvbuf+0xea>
 800538a:	bf00      	nop
 800538c:	20000014 	.word	0x20000014
 8005390:	0800a8a0 	.word	0x0800a8a0
 8005394:	0800a8c0 	.word	0x0800a8c0
 8005398:	0800a880 	.word	0x0800a880

0800539c <nanf>:
 800539c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80053a4 <nanf+0x8>
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	7fc00000 	.word	0x7fc00000

080053a8 <siprintf>:
 80053a8:	b40e      	push	{r1, r2, r3}
 80053aa:	b500      	push	{lr}
 80053ac:	b09c      	sub	sp, #112	; 0x70
 80053ae:	ab1d      	add	r3, sp, #116	; 0x74
 80053b0:	9002      	str	r0, [sp, #8]
 80053b2:	9006      	str	r0, [sp, #24]
 80053b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053b8:	4809      	ldr	r0, [pc, #36]	; (80053e0 <siprintf+0x38>)
 80053ba:	9107      	str	r1, [sp, #28]
 80053bc:	9104      	str	r1, [sp, #16]
 80053be:	4909      	ldr	r1, [pc, #36]	; (80053e4 <siprintf+0x3c>)
 80053c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c4:	9105      	str	r1, [sp, #20]
 80053c6:	6800      	ldr	r0, [r0, #0]
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	a902      	add	r1, sp, #8
 80053cc:	f003 f8c2 	bl	8008554 <_svfiprintf_r>
 80053d0:	9b02      	ldr	r3, [sp, #8]
 80053d2:	2200      	movs	r2, #0
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	b01c      	add	sp, #112	; 0x70
 80053d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053dc:	b003      	add	sp, #12
 80053de:	4770      	bx	lr
 80053e0:	20000014 	.word	0x20000014
 80053e4:	ffff0208 	.word	0xffff0208

080053e8 <sulp>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	4604      	mov	r4, r0
 80053ec:	460d      	mov	r5, r1
 80053ee:	ec45 4b10 	vmov	d0, r4, r5
 80053f2:	4616      	mov	r6, r2
 80053f4:	f002 fe4a 	bl	800808c <__ulp>
 80053f8:	ec51 0b10 	vmov	r0, r1, d0
 80053fc:	b17e      	cbz	r6, 800541e <sulp+0x36>
 80053fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005402:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005406:	2b00      	cmp	r3, #0
 8005408:	dd09      	ble.n	800541e <sulp+0x36>
 800540a:	051b      	lsls	r3, r3, #20
 800540c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005410:	2400      	movs	r4, #0
 8005412:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005416:	4622      	mov	r2, r4
 8005418:	462b      	mov	r3, r5
 800541a:	f7fb f8fd 	bl	8000618 <__aeabi_dmul>
 800541e:	bd70      	pop	{r4, r5, r6, pc}

08005420 <_strtod_l>:
 8005420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005424:	b0a3      	sub	sp, #140	; 0x8c
 8005426:	461f      	mov	r7, r3
 8005428:	2300      	movs	r3, #0
 800542a:	931e      	str	r3, [sp, #120]	; 0x78
 800542c:	4ba4      	ldr	r3, [pc, #656]	; (80056c0 <_strtod_l+0x2a0>)
 800542e:	9219      	str	r2, [sp, #100]	; 0x64
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	9307      	str	r3, [sp, #28]
 8005434:	4604      	mov	r4, r0
 8005436:	4618      	mov	r0, r3
 8005438:	4688      	mov	r8, r1
 800543a:	f7fa fed9 	bl	80001f0 <strlen>
 800543e:	f04f 0a00 	mov.w	sl, #0
 8005442:	4605      	mov	r5, r0
 8005444:	f04f 0b00 	mov.w	fp, #0
 8005448:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800544c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800544e:	781a      	ldrb	r2, [r3, #0]
 8005450:	2a2b      	cmp	r2, #43	; 0x2b
 8005452:	d04c      	beq.n	80054ee <_strtod_l+0xce>
 8005454:	d839      	bhi.n	80054ca <_strtod_l+0xaa>
 8005456:	2a0d      	cmp	r2, #13
 8005458:	d832      	bhi.n	80054c0 <_strtod_l+0xa0>
 800545a:	2a08      	cmp	r2, #8
 800545c:	d832      	bhi.n	80054c4 <_strtod_l+0xa4>
 800545e:	2a00      	cmp	r2, #0
 8005460:	d03c      	beq.n	80054dc <_strtod_l+0xbc>
 8005462:	2300      	movs	r3, #0
 8005464:	930e      	str	r3, [sp, #56]	; 0x38
 8005466:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005468:	7833      	ldrb	r3, [r6, #0]
 800546a:	2b30      	cmp	r3, #48	; 0x30
 800546c:	f040 80b4 	bne.w	80055d8 <_strtod_l+0x1b8>
 8005470:	7873      	ldrb	r3, [r6, #1]
 8005472:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005476:	2b58      	cmp	r3, #88	; 0x58
 8005478:	d16c      	bne.n	8005554 <_strtod_l+0x134>
 800547a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	ab1e      	add	r3, sp, #120	; 0x78
 8005480:	9702      	str	r7, [sp, #8]
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	4a8f      	ldr	r2, [pc, #572]	; (80056c4 <_strtod_l+0x2a4>)
 8005486:	ab1f      	add	r3, sp, #124	; 0x7c
 8005488:	a91d      	add	r1, sp, #116	; 0x74
 800548a:	4620      	mov	r0, r4
 800548c:	f001 fef6 	bl	800727c <__gethex>
 8005490:	f010 0707 	ands.w	r7, r0, #7
 8005494:	4605      	mov	r5, r0
 8005496:	d005      	beq.n	80054a4 <_strtod_l+0x84>
 8005498:	2f06      	cmp	r7, #6
 800549a:	d12a      	bne.n	80054f2 <_strtod_l+0xd2>
 800549c:	3601      	adds	r6, #1
 800549e:	2300      	movs	r3, #0
 80054a0:	961d      	str	r6, [sp, #116]	; 0x74
 80054a2:	930e      	str	r3, [sp, #56]	; 0x38
 80054a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f040 8596 	bne.w	8005fd8 <_strtod_l+0xbb8>
 80054ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054ae:	b1db      	cbz	r3, 80054e8 <_strtod_l+0xc8>
 80054b0:	4652      	mov	r2, sl
 80054b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80054b6:	ec43 2b10 	vmov	d0, r2, r3
 80054ba:	b023      	add	sp, #140	; 0x8c
 80054bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c0:	2a20      	cmp	r2, #32
 80054c2:	d1ce      	bne.n	8005462 <_strtod_l+0x42>
 80054c4:	3301      	adds	r3, #1
 80054c6:	931d      	str	r3, [sp, #116]	; 0x74
 80054c8:	e7c0      	b.n	800544c <_strtod_l+0x2c>
 80054ca:	2a2d      	cmp	r2, #45	; 0x2d
 80054cc:	d1c9      	bne.n	8005462 <_strtod_l+0x42>
 80054ce:	2201      	movs	r2, #1
 80054d0:	920e      	str	r2, [sp, #56]	; 0x38
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	921d      	str	r2, [sp, #116]	; 0x74
 80054d6:	785b      	ldrb	r3, [r3, #1]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1c4      	bne.n	8005466 <_strtod_l+0x46>
 80054dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f040 8576 	bne.w	8005fd4 <_strtod_l+0xbb4>
 80054e8:	4652      	mov	r2, sl
 80054ea:	465b      	mov	r3, fp
 80054ec:	e7e3      	b.n	80054b6 <_strtod_l+0x96>
 80054ee:	2200      	movs	r2, #0
 80054f0:	e7ee      	b.n	80054d0 <_strtod_l+0xb0>
 80054f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80054f4:	b13a      	cbz	r2, 8005506 <_strtod_l+0xe6>
 80054f6:	2135      	movs	r1, #53	; 0x35
 80054f8:	a820      	add	r0, sp, #128	; 0x80
 80054fa:	f002 fed2 	bl	80082a2 <__copybits>
 80054fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005500:	4620      	mov	r0, r4
 8005502:	f002 fa97 	bl	8007a34 <_Bfree>
 8005506:	3f01      	subs	r7, #1
 8005508:	2f05      	cmp	r7, #5
 800550a:	d807      	bhi.n	800551c <_strtod_l+0xfc>
 800550c:	e8df f007 	tbb	[pc, r7]
 8005510:	1d180b0e 	.word	0x1d180b0e
 8005514:	030e      	.short	0x030e
 8005516:	f04f 0b00 	mov.w	fp, #0
 800551a:	46da      	mov	sl, fp
 800551c:	0728      	lsls	r0, r5, #28
 800551e:	d5c1      	bpl.n	80054a4 <_strtod_l+0x84>
 8005520:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005524:	e7be      	b.n	80054a4 <_strtod_l+0x84>
 8005526:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800552a:	e7f7      	b.n	800551c <_strtod_l+0xfc>
 800552c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005530:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005532:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005536:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800553a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800553e:	e7ed      	b.n	800551c <_strtod_l+0xfc>
 8005540:	f8df b184 	ldr.w	fp, [pc, #388]	; 80056c8 <_strtod_l+0x2a8>
 8005544:	f04f 0a00 	mov.w	sl, #0
 8005548:	e7e8      	b.n	800551c <_strtod_l+0xfc>
 800554a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800554e:	f04f 3aff 	mov.w	sl, #4294967295
 8005552:	e7e3      	b.n	800551c <_strtod_l+0xfc>
 8005554:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	921d      	str	r2, [sp, #116]	; 0x74
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b30      	cmp	r3, #48	; 0x30
 800555e:	d0f9      	beq.n	8005554 <_strtod_l+0x134>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d09f      	beq.n	80054a4 <_strtod_l+0x84>
 8005564:	2301      	movs	r3, #1
 8005566:	f04f 0900 	mov.w	r9, #0
 800556a:	9304      	str	r3, [sp, #16]
 800556c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800556e:	930a      	str	r3, [sp, #40]	; 0x28
 8005570:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005574:	464f      	mov	r7, r9
 8005576:	220a      	movs	r2, #10
 8005578:	981d      	ldr	r0, [sp, #116]	; 0x74
 800557a:	7806      	ldrb	r6, [r0, #0]
 800557c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005580:	b2d9      	uxtb	r1, r3
 8005582:	2909      	cmp	r1, #9
 8005584:	d92a      	bls.n	80055dc <_strtod_l+0x1bc>
 8005586:	9907      	ldr	r1, [sp, #28]
 8005588:	462a      	mov	r2, r5
 800558a:	f003 fa98 	bl	8008abe <strncmp>
 800558e:	b398      	cbz	r0, 80055f8 <_strtod_l+0x1d8>
 8005590:	2000      	movs	r0, #0
 8005592:	4633      	mov	r3, r6
 8005594:	463d      	mov	r5, r7
 8005596:	9007      	str	r0, [sp, #28]
 8005598:	4602      	mov	r2, r0
 800559a:	2b65      	cmp	r3, #101	; 0x65
 800559c:	d001      	beq.n	80055a2 <_strtod_l+0x182>
 800559e:	2b45      	cmp	r3, #69	; 0x45
 80055a0:	d118      	bne.n	80055d4 <_strtod_l+0x1b4>
 80055a2:	b91d      	cbnz	r5, 80055ac <_strtod_l+0x18c>
 80055a4:	9b04      	ldr	r3, [sp, #16]
 80055a6:	4303      	orrs	r3, r0
 80055a8:	d098      	beq.n	80054dc <_strtod_l+0xbc>
 80055aa:	2500      	movs	r5, #0
 80055ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80055b0:	f108 0301 	add.w	r3, r8, #1
 80055b4:	931d      	str	r3, [sp, #116]	; 0x74
 80055b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80055ba:	2b2b      	cmp	r3, #43	; 0x2b
 80055bc:	d075      	beq.n	80056aa <_strtod_l+0x28a>
 80055be:	2b2d      	cmp	r3, #45	; 0x2d
 80055c0:	d07b      	beq.n	80056ba <_strtod_l+0x29a>
 80055c2:	f04f 0c00 	mov.w	ip, #0
 80055c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80055ca:	2909      	cmp	r1, #9
 80055cc:	f240 8082 	bls.w	80056d4 <_strtod_l+0x2b4>
 80055d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80055d4:	2600      	movs	r6, #0
 80055d6:	e09d      	b.n	8005714 <_strtod_l+0x2f4>
 80055d8:	2300      	movs	r3, #0
 80055da:	e7c4      	b.n	8005566 <_strtod_l+0x146>
 80055dc:	2f08      	cmp	r7, #8
 80055de:	bfd8      	it	le
 80055e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80055e2:	f100 0001 	add.w	r0, r0, #1
 80055e6:	bfda      	itte	le
 80055e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80055ec:	9309      	strle	r3, [sp, #36]	; 0x24
 80055ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 80055f2:	3701      	adds	r7, #1
 80055f4:	901d      	str	r0, [sp, #116]	; 0x74
 80055f6:	e7bf      	b.n	8005578 <_strtod_l+0x158>
 80055f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80055fa:	195a      	adds	r2, r3, r5
 80055fc:	921d      	str	r2, [sp, #116]	; 0x74
 80055fe:	5d5b      	ldrb	r3, [r3, r5]
 8005600:	2f00      	cmp	r7, #0
 8005602:	d037      	beq.n	8005674 <_strtod_l+0x254>
 8005604:	9007      	str	r0, [sp, #28]
 8005606:	463d      	mov	r5, r7
 8005608:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800560c:	2a09      	cmp	r2, #9
 800560e:	d912      	bls.n	8005636 <_strtod_l+0x216>
 8005610:	2201      	movs	r2, #1
 8005612:	e7c2      	b.n	800559a <_strtod_l+0x17a>
 8005614:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	921d      	str	r2, [sp, #116]	; 0x74
 800561a:	785b      	ldrb	r3, [r3, #1]
 800561c:	3001      	adds	r0, #1
 800561e:	2b30      	cmp	r3, #48	; 0x30
 8005620:	d0f8      	beq.n	8005614 <_strtod_l+0x1f4>
 8005622:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005626:	2a08      	cmp	r2, #8
 8005628:	f200 84db 	bhi.w	8005fe2 <_strtod_l+0xbc2>
 800562c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800562e:	9007      	str	r0, [sp, #28]
 8005630:	2000      	movs	r0, #0
 8005632:	920a      	str	r2, [sp, #40]	; 0x28
 8005634:	4605      	mov	r5, r0
 8005636:	3b30      	subs	r3, #48	; 0x30
 8005638:	f100 0201 	add.w	r2, r0, #1
 800563c:	d014      	beq.n	8005668 <_strtod_l+0x248>
 800563e:	9907      	ldr	r1, [sp, #28]
 8005640:	4411      	add	r1, r2
 8005642:	9107      	str	r1, [sp, #28]
 8005644:	462a      	mov	r2, r5
 8005646:	eb00 0e05 	add.w	lr, r0, r5
 800564a:	210a      	movs	r1, #10
 800564c:	4572      	cmp	r2, lr
 800564e:	d113      	bne.n	8005678 <_strtod_l+0x258>
 8005650:	182a      	adds	r2, r5, r0
 8005652:	2a08      	cmp	r2, #8
 8005654:	f105 0501 	add.w	r5, r5, #1
 8005658:	4405      	add	r5, r0
 800565a:	dc1c      	bgt.n	8005696 <_strtod_l+0x276>
 800565c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800565e:	220a      	movs	r2, #10
 8005660:	fb02 3301 	mla	r3, r2, r1, r3
 8005664:	9309      	str	r3, [sp, #36]	; 0x24
 8005666:	2200      	movs	r2, #0
 8005668:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800566a:	1c59      	adds	r1, r3, #1
 800566c:	911d      	str	r1, [sp, #116]	; 0x74
 800566e:	785b      	ldrb	r3, [r3, #1]
 8005670:	4610      	mov	r0, r2
 8005672:	e7c9      	b.n	8005608 <_strtod_l+0x1e8>
 8005674:	4638      	mov	r0, r7
 8005676:	e7d2      	b.n	800561e <_strtod_l+0x1fe>
 8005678:	2a08      	cmp	r2, #8
 800567a:	dc04      	bgt.n	8005686 <_strtod_l+0x266>
 800567c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800567e:	434e      	muls	r6, r1
 8005680:	9609      	str	r6, [sp, #36]	; 0x24
 8005682:	3201      	adds	r2, #1
 8005684:	e7e2      	b.n	800564c <_strtod_l+0x22c>
 8005686:	f102 0c01 	add.w	ip, r2, #1
 800568a:	f1bc 0f10 	cmp.w	ip, #16
 800568e:	bfd8      	it	le
 8005690:	fb01 f909 	mulle.w	r9, r1, r9
 8005694:	e7f5      	b.n	8005682 <_strtod_l+0x262>
 8005696:	2d10      	cmp	r5, #16
 8005698:	bfdc      	itt	le
 800569a:	220a      	movle	r2, #10
 800569c:	fb02 3909 	mlale	r9, r2, r9, r3
 80056a0:	e7e1      	b.n	8005666 <_strtod_l+0x246>
 80056a2:	2300      	movs	r3, #0
 80056a4:	9307      	str	r3, [sp, #28]
 80056a6:	2201      	movs	r2, #1
 80056a8:	e77c      	b.n	80055a4 <_strtod_l+0x184>
 80056aa:	f04f 0c00 	mov.w	ip, #0
 80056ae:	f108 0302 	add.w	r3, r8, #2
 80056b2:	931d      	str	r3, [sp, #116]	; 0x74
 80056b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80056b8:	e785      	b.n	80055c6 <_strtod_l+0x1a6>
 80056ba:	f04f 0c01 	mov.w	ip, #1
 80056be:	e7f6      	b.n	80056ae <_strtod_l+0x28e>
 80056c0:	0800a94c 	.word	0x0800a94c
 80056c4:	0800a694 	.word	0x0800a694
 80056c8:	7ff00000 	.word	0x7ff00000
 80056cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80056ce:	1c59      	adds	r1, r3, #1
 80056d0:	911d      	str	r1, [sp, #116]	; 0x74
 80056d2:	785b      	ldrb	r3, [r3, #1]
 80056d4:	2b30      	cmp	r3, #48	; 0x30
 80056d6:	d0f9      	beq.n	80056cc <_strtod_l+0x2ac>
 80056d8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80056dc:	2908      	cmp	r1, #8
 80056de:	f63f af79 	bhi.w	80055d4 <_strtod_l+0x1b4>
 80056e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80056e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80056e8:	9308      	str	r3, [sp, #32]
 80056ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	911d      	str	r1, [sp, #116]	; 0x74
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80056f6:	2e09      	cmp	r6, #9
 80056f8:	d937      	bls.n	800576a <_strtod_l+0x34a>
 80056fa:	9e08      	ldr	r6, [sp, #32]
 80056fc:	1b89      	subs	r1, r1, r6
 80056fe:	2908      	cmp	r1, #8
 8005700:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005704:	dc02      	bgt.n	800570c <_strtod_l+0x2ec>
 8005706:	4576      	cmp	r6, lr
 8005708:	bfa8      	it	ge
 800570a:	4676      	movge	r6, lr
 800570c:	f1bc 0f00 	cmp.w	ip, #0
 8005710:	d000      	beq.n	8005714 <_strtod_l+0x2f4>
 8005712:	4276      	negs	r6, r6
 8005714:	2d00      	cmp	r5, #0
 8005716:	d14f      	bne.n	80057b8 <_strtod_l+0x398>
 8005718:	9904      	ldr	r1, [sp, #16]
 800571a:	4301      	orrs	r1, r0
 800571c:	f47f aec2 	bne.w	80054a4 <_strtod_l+0x84>
 8005720:	2a00      	cmp	r2, #0
 8005722:	f47f aedb 	bne.w	80054dc <_strtod_l+0xbc>
 8005726:	2b69      	cmp	r3, #105	; 0x69
 8005728:	d027      	beq.n	800577a <_strtod_l+0x35a>
 800572a:	dc24      	bgt.n	8005776 <_strtod_l+0x356>
 800572c:	2b49      	cmp	r3, #73	; 0x49
 800572e:	d024      	beq.n	800577a <_strtod_l+0x35a>
 8005730:	2b4e      	cmp	r3, #78	; 0x4e
 8005732:	f47f aed3 	bne.w	80054dc <_strtod_l+0xbc>
 8005736:	499e      	ldr	r1, [pc, #632]	; (80059b0 <_strtod_l+0x590>)
 8005738:	a81d      	add	r0, sp, #116	; 0x74
 800573a:	f001 fff7 	bl	800772c <__match>
 800573e:	2800      	cmp	r0, #0
 8005740:	f43f aecc 	beq.w	80054dc <_strtod_l+0xbc>
 8005744:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b28      	cmp	r3, #40	; 0x28
 800574a:	d12d      	bne.n	80057a8 <_strtod_l+0x388>
 800574c:	4999      	ldr	r1, [pc, #612]	; (80059b4 <_strtod_l+0x594>)
 800574e:	aa20      	add	r2, sp, #128	; 0x80
 8005750:	a81d      	add	r0, sp, #116	; 0x74
 8005752:	f001 ffff 	bl	8007754 <__hexnan>
 8005756:	2805      	cmp	r0, #5
 8005758:	d126      	bne.n	80057a8 <_strtod_l+0x388>
 800575a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800575c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005760:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005764:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005768:	e69c      	b.n	80054a4 <_strtod_l+0x84>
 800576a:	210a      	movs	r1, #10
 800576c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005770:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005774:	e7b9      	b.n	80056ea <_strtod_l+0x2ca>
 8005776:	2b6e      	cmp	r3, #110	; 0x6e
 8005778:	e7db      	b.n	8005732 <_strtod_l+0x312>
 800577a:	498f      	ldr	r1, [pc, #572]	; (80059b8 <_strtod_l+0x598>)
 800577c:	a81d      	add	r0, sp, #116	; 0x74
 800577e:	f001 ffd5 	bl	800772c <__match>
 8005782:	2800      	cmp	r0, #0
 8005784:	f43f aeaa 	beq.w	80054dc <_strtod_l+0xbc>
 8005788:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800578a:	498c      	ldr	r1, [pc, #560]	; (80059bc <_strtod_l+0x59c>)
 800578c:	3b01      	subs	r3, #1
 800578e:	a81d      	add	r0, sp, #116	; 0x74
 8005790:	931d      	str	r3, [sp, #116]	; 0x74
 8005792:	f001 ffcb 	bl	800772c <__match>
 8005796:	b910      	cbnz	r0, 800579e <_strtod_l+0x37e>
 8005798:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800579a:	3301      	adds	r3, #1
 800579c:	931d      	str	r3, [sp, #116]	; 0x74
 800579e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80059cc <_strtod_l+0x5ac>
 80057a2:	f04f 0a00 	mov.w	sl, #0
 80057a6:	e67d      	b.n	80054a4 <_strtod_l+0x84>
 80057a8:	4885      	ldr	r0, [pc, #532]	; (80059c0 <_strtod_l+0x5a0>)
 80057aa:	f003 f92d 	bl	8008a08 <nan>
 80057ae:	ed8d 0b04 	vstr	d0, [sp, #16]
 80057b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80057b6:	e675      	b.n	80054a4 <_strtod_l+0x84>
 80057b8:	9b07      	ldr	r3, [sp, #28]
 80057ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057bc:	1af3      	subs	r3, r6, r3
 80057be:	2f00      	cmp	r7, #0
 80057c0:	bf08      	it	eq
 80057c2:	462f      	moveq	r7, r5
 80057c4:	2d10      	cmp	r5, #16
 80057c6:	9308      	str	r3, [sp, #32]
 80057c8:	46a8      	mov	r8, r5
 80057ca:	bfa8      	it	ge
 80057cc:	f04f 0810 	movge.w	r8, #16
 80057d0:	f7fa fea8 	bl	8000524 <__aeabi_ui2d>
 80057d4:	2d09      	cmp	r5, #9
 80057d6:	4682      	mov	sl, r0
 80057d8:	468b      	mov	fp, r1
 80057da:	dd13      	ble.n	8005804 <_strtod_l+0x3e4>
 80057dc:	4b79      	ldr	r3, [pc, #484]	; (80059c4 <_strtod_l+0x5a4>)
 80057de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80057e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80057e6:	f7fa ff17 	bl	8000618 <__aeabi_dmul>
 80057ea:	4682      	mov	sl, r0
 80057ec:	4648      	mov	r0, r9
 80057ee:	468b      	mov	fp, r1
 80057f0:	f7fa fe98 	bl	8000524 <__aeabi_ui2d>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4650      	mov	r0, sl
 80057fa:	4659      	mov	r1, fp
 80057fc:	f7fa fd56 	bl	80002ac <__adddf3>
 8005800:	4682      	mov	sl, r0
 8005802:	468b      	mov	fp, r1
 8005804:	2d0f      	cmp	r5, #15
 8005806:	dc38      	bgt.n	800587a <_strtod_l+0x45a>
 8005808:	9b08      	ldr	r3, [sp, #32]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f43f ae4a 	beq.w	80054a4 <_strtod_l+0x84>
 8005810:	dd24      	ble.n	800585c <_strtod_l+0x43c>
 8005812:	2b16      	cmp	r3, #22
 8005814:	dc0b      	bgt.n	800582e <_strtod_l+0x40e>
 8005816:	4d6b      	ldr	r5, [pc, #428]	; (80059c4 <_strtod_l+0x5a4>)
 8005818:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800581c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005820:	4652      	mov	r2, sl
 8005822:	465b      	mov	r3, fp
 8005824:	f7fa fef8 	bl	8000618 <__aeabi_dmul>
 8005828:	4682      	mov	sl, r0
 800582a:	468b      	mov	fp, r1
 800582c:	e63a      	b.n	80054a4 <_strtod_l+0x84>
 800582e:	9a08      	ldr	r2, [sp, #32]
 8005830:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005834:	4293      	cmp	r3, r2
 8005836:	db20      	blt.n	800587a <_strtod_l+0x45a>
 8005838:	4c62      	ldr	r4, [pc, #392]	; (80059c4 <_strtod_l+0x5a4>)
 800583a:	f1c5 050f 	rsb	r5, r5, #15
 800583e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005842:	4652      	mov	r2, sl
 8005844:	465b      	mov	r3, fp
 8005846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800584a:	f7fa fee5 	bl	8000618 <__aeabi_dmul>
 800584e:	9b08      	ldr	r3, [sp, #32]
 8005850:	1b5d      	subs	r5, r3, r5
 8005852:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005856:	e9d4 2300 	ldrd	r2, r3, [r4]
 800585a:	e7e3      	b.n	8005824 <_strtod_l+0x404>
 800585c:	9b08      	ldr	r3, [sp, #32]
 800585e:	3316      	adds	r3, #22
 8005860:	db0b      	blt.n	800587a <_strtod_l+0x45a>
 8005862:	9b07      	ldr	r3, [sp, #28]
 8005864:	4a57      	ldr	r2, [pc, #348]	; (80059c4 <_strtod_l+0x5a4>)
 8005866:	1b9e      	subs	r6, r3, r6
 8005868:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800586c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005870:	4650      	mov	r0, sl
 8005872:	4659      	mov	r1, fp
 8005874:	f7fa fffa 	bl	800086c <__aeabi_ddiv>
 8005878:	e7d6      	b.n	8005828 <_strtod_l+0x408>
 800587a:	9b08      	ldr	r3, [sp, #32]
 800587c:	eba5 0808 	sub.w	r8, r5, r8
 8005880:	4498      	add	r8, r3
 8005882:	f1b8 0f00 	cmp.w	r8, #0
 8005886:	dd71      	ble.n	800596c <_strtod_l+0x54c>
 8005888:	f018 030f 	ands.w	r3, r8, #15
 800588c:	d00a      	beq.n	80058a4 <_strtod_l+0x484>
 800588e:	494d      	ldr	r1, [pc, #308]	; (80059c4 <_strtod_l+0x5a4>)
 8005890:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005894:	4652      	mov	r2, sl
 8005896:	465b      	mov	r3, fp
 8005898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800589c:	f7fa febc 	bl	8000618 <__aeabi_dmul>
 80058a0:	4682      	mov	sl, r0
 80058a2:	468b      	mov	fp, r1
 80058a4:	f038 080f 	bics.w	r8, r8, #15
 80058a8:	d04d      	beq.n	8005946 <_strtod_l+0x526>
 80058aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80058ae:	dd22      	ble.n	80058f6 <_strtod_l+0x4d6>
 80058b0:	2500      	movs	r5, #0
 80058b2:	462e      	mov	r6, r5
 80058b4:	9509      	str	r5, [sp, #36]	; 0x24
 80058b6:	9507      	str	r5, [sp, #28]
 80058b8:	2322      	movs	r3, #34	; 0x22
 80058ba:	f8df b110 	ldr.w	fp, [pc, #272]	; 80059cc <_strtod_l+0x5ac>
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	f04f 0a00 	mov.w	sl, #0
 80058c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f43f adec 	beq.w	80054a4 <_strtod_l+0x84>
 80058cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80058ce:	4620      	mov	r0, r4
 80058d0:	f002 f8b0 	bl	8007a34 <_Bfree>
 80058d4:	9907      	ldr	r1, [sp, #28]
 80058d6:	4620      	mov	r0, r4
 80058d8:	f002 f8ac 	bl	8007a34 <_Bfree>
 80058dc:	4631      	mov	r1, r6
 80058de:	4620      	mov	r0, r4
 80058e0:	f002 f8a8 	bl	8007a34 <_Bfree>
 80058e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058e6:	4620      	mov	r0, r4
 80058e8:	f002 f8a4 	bl	8007a34 <_Bfree>
 80058ec:	4629      	mov	r1, r5
 80058ee:	4620      	mov	r0, r4
 80058f0:	f002 f8a0 	bl	8007a34 <_Bfree>
 80058f4:	e5d6      	b.n	80054a4 <_strtod_l+0x84>
 80058f6:	2300      	movs	r3, #0
 80058f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80058fc:	4650      	mov	r0, sl
 80058fe:	4659      	mov	r1, fp
 8005900:	4699      	mov	r9, r3
 8005902:	f1b8 0f01 	cmp.w	r8, #1
 8005906:	dc21      	bgt.n	800594c <_strtod_l+0x52c>
 8005908:	b10b      	cbz	r3, 800590e <_strtod_l+0x4ee>
 800590a:	4682      	mov	sl, r0
 800590c:	468b      	mov	fp, r1
 800590e:	4b2e      	ldr	r3, [pc, #184]	; (80059c8 <_strtod_l+0x5a8>)
 8005910:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005914:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005918:	4652      	mov	r2, sl
 800591a:	465b      	mov	r3, fp
 800591c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005920:	f7fa fe7a 	bl	8000618 <__aeabi_dmul>
 8005924:	4b29      	ldr	r3, [pc, #164]	; (80059cc <_strtod_l+0x5ac>)
 8005926:	460a      	mov	r2, r1
 8005928:	400b      	ands	r3, r1
 800592a:	4929      	ldr	r1, [pc, #164]	; (80059d0 <_strtod_l+0x5b0>)
 800592c:	428b      	cmp	r3, r1
 800592e:	4682      	mov	sl, r0
 8005930:	d8be      	bhi.n	80058b0 <_strtod_l+0x490>
 8005932:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005936:	428b      	cmp	r3, r1
 8005938:	bf86      	itte	hi
 800593a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80059d4 <_strtod_l+0x5b4>
 800593e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005942:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005946:	2300      	movs	r3, #0
 8005948:	9304      	str	r3, [sp, #16]
 800594a:	e081      	b.n	8005a50 <_strtod_l+0x630>
 800594c:	f018 0f01 	tst.w	r8, #1
 8005950:	d007      	beq.n	8005962 <_strtod_l+0x542>
 8005952:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <_strtod_l+0x5a8>)
 8005954:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f7fa fe5c 	bl	8000618 <__aeabi_dmul>
 8005960:	2301      	movs	r3, #1
 8005962:	f109 0901 	add.w	r9, r9, #1
 8005966:	ea4f 0868 	mov.w	r8, r8, asr #1
 800596a:	e7ca      	b.n	8005902 <_strtod_l+0x4e2>
 800596c:	d0eb      	beq.n	8005946 <_strtod_l+0x526>
 800596e:	f1c8 0800 	rsb	r8, r8, #0
 8005972:	f018 020f 	ands.w	r2, r8, #15
 8005976:	d00a      	beq.n	800598e <_strtod_l+0x56e>
 8005978:	4b12      	ldr	r3, [pc, #72]	; (80059c4 <_strtod_l+0x5a4>)
 800597a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800597e:	4650      	mov	r0, sl
 8005980:	4659      	mov	r1, fp
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	f7fa ff71 	bl	800086c <__aeabi_ddiv>
 800598a:	4682      	mov	sl, r0
 800598c:	468b      	mov	fp, r1
 800598e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005992:	d0d8      	beq.n	8005946 <_strtod_l+0x526>
 8005994:	f1b8 0f1f 	cmp.w	r8, #31
 8005998:	dd1e      	ble.n	80059d8 <_strtod_l+0x5b8>
 800599a:	2500      	movs	r5, #0
 800599c:	462e      	mov	r6, r5
 800599e:	9509      	str	r5, [sp, #36]	; 0x24
 80059a0:	9507      	str	r5, [sp, #28]
 80059a2:	2322      	movs	r3, #34	; 0x22
 80059a4:	f04f 0a00 	mov.w	sl, #0
 80059a8:	f04f 0b00 	mov.w	fp, #0
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	e789      	b.n	80058c4 <_strtod_l+0x4a4>
 80059b0:	0800a665 	.word	0x0800a665
 80059b4:	0800a6a8 	.word	0x0800a6a8
 80059b8:	0800a65d 	.word	0x0800a65d
 80059bc:	0800a7ec 	.word	0x0800a7ec
 80059c0:	0800ab08 	.word	0x0800ab08
 80059c4:	0800a9e8 	.word	0x0800a9e8
 80059c8:	0800a9c0 	.word	0x0800a9c0
 80059cc:	7ff00000 	.word	0x7ff00000
 80059d0:	7ca00000 	.word	0x7ca00000
 80059d4:	7fefffff 	.word	0x7fefffff
 80059d8:	f018 0310 	ands.w	r3, r8, #16
 80059dc:	bf18      	it	ne
 80059de:	236a      	movne	r3, #106	; 0x6a
 80059e0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005d98 <_strtod_l+0x978>
 80059e4:	9304      	str	r3, [sp, #16]
 80059e6:	4650      	mov	r0, sl
 80059e8:	4659      	mov	r1, fp
 80059ea:	2300      	movs	r3, #0
 80059ec:	f018 0f01 	tst.w	r8, #1
 80059f0:	d004      	beq.n	80059fc <_strtod_l+0x5dc>
 80059f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80059f6:	f7fa fe0f 	bl	8000618 <__aeabi_dmul>
 80059fa:	2301      	movs	r3, #1
 80059fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005a00:	f109 0908 	add.w	r9, r9, #8
 8005a04:	d1f2      	bne.n	80059ec <_strtod_l+0x5cc>
 8005a06:	b10b      	cbz	r3, 8005a0c <_strtod_l+0x5ec>
 8005a08:	4682      	mov	sl, r0
 8005a0a:	468b      	mov	fp, r1
 8005a0c:	9b04      	ldr	r3, [sp, #16]
 8005a0e:	b1bb      	cbz	r3, 8005a40 <_strtod_l+0x620>
 8005a10:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005a14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	4659      	mov	r1, fp
 8005a1c:	dd10      	ble.n	8005a40 <_strtod_l+0x620>
 8005a1e:	2b1f      	cmp	r3, #31
 8005a20:	f340 8128 	ble.w	8005c74 <_strtod_l+0x854>
 8005a24:	2b34      	cmp	r3, #52	; 0x34
 8005a26:	bfde      	ittt	le
 8005a28:	3b20      	suble	r3, #32
 8005a2a:	f04f 32ff 	movle.w	r2, #4294967295
 8005a2e:	fa02 f303 	lslle.w	r3, r2, r3
 8005a32:	f04f 0a00 	mov.w	sl, #0
 8005a36:	bfcc      	ite	gt
 8005a38:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005a3c:	ea03 0b01 	andle.w	fp, r3, r1
 8005a40:	2200      	movs	r2, #0
 8005a42:	2300      	movs	r3, #0
 8005a44:	4650      	mov	r0, sl
 8005a46:	4659      	mov	r1, fp
 8005a48:	f7fb f84e 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d1a4      	bne.n	800599a <_strtod_l+0x57a>
 8005a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a56:	462b      	mov	r3, r5
 8005a58:	463a      	mov	r2, r7
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f002 f856 	bl	8007b0c <__s2b>
 8005a60:	9009      	str	r0, [sp, #36]	; 0x24
 8005a62:	2800      	cmp	r0, #0
 8005a64:	f43f af24 	beq.w	80058b0 <_strtod_l+0x490>
 8005a68:	9b07      	ldr	r3, [sp, #28]
 8005a6a:	1b9e      	subs	r6, r3, r6
 8005a6c:	9b08      	ldr	r3, [sp, #32]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bfb4      	ite	lt
 8005a72:	4633      	movlt	r3, r6
 8005a74:	2300      	movge	r3, #0
 8005a76:	9310      	str	r3, [sp, #64]	; 0x40
 8005a78:	9b08      	ldr	r3, [sp, #32]
 8005a7a:	2500      	movs	r5, #0
 8005a7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005a80:	9318      	str	r3, [sp, #96]	; 0x60
 8005a82:	462e      	mov	r6, r5
 8005a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a86:	4620      	mov	r0, r4
 8005a88:	6859      	ldr	r1, [r3, #4]
 8005a8a:	f001 ff93 	bl	80079b4 <_Balloc>
 8005a8e:	9007      	str	r0, [sp, #28]
 8005a90:	2800      	cmp	r0, #0
 8005a92:	f43f af11 	beq.w	80058b8 <_strtod_l+0x498>
 8005a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a98:	691a      	ldr	r2, [r3, #16]
 8005a9a:	3202      	adds	r2, #2
 8005a9c:	f103 010c 	add.w	r1, r3, #12
 8005aa0:	0092      	lsls	r2, r2, #2
 8005aa2:	300c      	adds	r0, #12
 8005aa4:	f001 ff78 	bl	8007998 <memcpy>
 8005aa8:	ec4b ab10 	vmov	d0, sl, fp
 8005aac:	aa20      	add	r2, sp, #128	; 0x80
 8005aae:	a91f      	add	r1, sp, #124	; 0x7c
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005ab6:	f002 fb65 	bl	8008184 <__d2b>
 8005aba:	901e      	str	r0, [sp, #120]	; 0x78
 8005abc:	2800      	cmp	r0, #0
 8005abe:	f43f aefb 	beq.w	80058b8 <_strtod_l+0x498>
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f002 f8bb 	bl	8007c40 <__i2b>
 8005aca:	4606      	mov	r6, r0
 8005acc:	2800      	cmp	r0, #0
 8005ace:	f43f aef3 	beq.w	80058b8 <_strtod_l+0x498>
 8005ad2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ad4:	9904      	ldr	r1, [sp, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bfab      	itete	ge
 8005ada:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005adc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005ade:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005ae0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005ae4:	bfac      	ite	ge
 8005ae6:	eb03 0902 	addge.w	r9, r3, r2
 8005aea:	1ad7      	sublt	r7, r2, r3
 8005aec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005aee:	eba3 0801 	sub.w	r8, r3, r1
 8005af2:	4490      	add	r8, r2
 8005af4:	4ba3      	ldr	r3, [pc, #652]	; (8005d84 <_strtod_l+0x964>)
 8005af6:	f108 38ff 	add.w	r8, r8, #4294967295
 8005afa:	4598      	cmp	r8, r3
 8005afc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005b00:	f280 80cc 	bge.w	8005c9c <_strtod_l+0x87c>
 8005b04:	eba3 0308 	sub.w	r3, r3, r8
 8005b08:	2b1f      	cmp	r3, #31
 8005b0a:	eba2 0203 	sub.w	r2, r2, r3
 8005b0e:	f04f 0101 	mov.w	r1, #1
 8005b12:	f300 80b6 	bgt.w	8005c82 <_strtod_l+0x862>
 8005b16:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1a:	9311      	str	r3, [sp, #68]	; 0x44
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	930c      	str	r3, [sp, #48]	; 0x30
 8005b20:	eb09 0802 	add.w	r8, r9, r2
 8005b24:	9b04      	ldr	r3, [sp, #16]
 8005b26:	45c1      	cmp	r9, r8
 8005b28:	4417      	add	r7, r2
 8005b2a:	441f      	add	r7, r3
 8005b2c:	464b      	mov	r3, r9
 8005b2e:	bfa8      	it	ge
 8005b30:	4643      	movge	r3, r8
 8005b32:	42bb      	cmp	r3, r7
 8005b34:	bfa8      	it	ge
 8005b36:	463b      	movge	r3, r7
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bfc2      	ittt	gt
 8005b3c:	eba8 0803 	subgt.w	r8, r8, r3
 8005b40:	1aff      	subgt	r7, r7, r3
 8005b42:	eba9 0903 	subgt.w	r9, r9, r3
 8005b46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	dd17      	ble.n	8005b7c <_strtod_l+0x75c>
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	461a      	mov	r2, r3
 8005b50:	4620      	mov	r0, r4
 8005b52:	f002 f931 	bl	8007db8 <__pow5mult>
 8005b56:	4606      	mov	r6, r0
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	f43f aead 	beq.w	80058b8 <_strtod_l+0x498>
 8005b5e:	4601      	mov	r1, r0
 8005b60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005b62:	4620      	mov	r0, r4
 8005b64:	f002 f882 	bl	8007c6c <__multiply>
 8005b68:	900f      	str	r0, [sp, #60]	; 0x3c
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	f43f aea4 	beq.w	80058b8 <_strtod_l+0x498>
 8005b70:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005b72:	4620      	mov	r0, r4
 8005b74:	f001 ff5e 	bl	8007a34 <_Bfree>
 8005b78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b7a:	931e      	str	r3, [sp, #120]	; 0x78
 8005b7c:	f1b8 0f00 	cmp.w	r8, #0
 8005b80:	f300 8091 	bgt.w	8005ca6 <_strtod_l+0x886>
 8005b84:	9b08      	ldr	r3, [sp, #32]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	dd08      	ble.n	8005b9c <_strtod_l+0x77c>
 8005b8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005b8c:	9907      	ldr	r1, [sp, #28]
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f002 f912 	bl	8007db8 <__pow5mult>
 8005b94:	9007      	str	r0, [sp, #28]
 8005b96:	2800      	cmp	r0, #0
 8005b98:	f43f ae8e 	beq.w	80058b8 <_strtod_l+0x498>
 8005b9c:	2f00      	cmp	r7, #0
 8005b9e:	dd08      	ble.n	8005bb2 <_strtod_l+0x792>
 8005ba0:	9907      	ldr	r1, [sp, #28]
 8005ba2:	463a      	mov	r2, r7
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f002 f961 	bl	8007e6c <__lshift>
 8005baa:	9007      	str	r0, [sp, #28]
 8005bac:	2800      	cmp	r0, #0
 8005bae:	f43f ae83 	beq.w	80058b8 <_strtod_l+0x498>
 8005bb2:	f1b9 0f00 	cmp.w	r9, #0
 8005bb6:	dd08      	ble.n	8005bca <_strtod_l+0x7aa>
 8005bb8:	4631      	mov	r1, r6
 8005bba:	464a      	mov	r2, r9
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f002 f955 	bl	8007e6c <__lshift>
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	f43f ae77 	beq.w	80058b8 <_strtod_l+0x498>
 8005bca:	9a07      	ldr	r2, [sp, #28]
 8005bcc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f002 f9d4 	bl	8007f7c <__mdiff>
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	f43f ae6e 	beq.w	80058b8 <_strtod_l+0x498>
 8005bdc:	68c3      	ldr	r3, [r0, #12]
 8005bde:	930f      	str	r3, [sp, #60]	; 0x3c
 8005be0:	2300      	movs	r3, #0
 8005be2:	60c3      	str	r3, [r0, #12]
 8005be4:	4631      	mov	r1, r6
 8005be6:	f002 f9ad 	bl	8007f44 <__mcmp>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	da65      	bge.n	8005cba <_strtod_l+0x89a>
 8005bee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bf0:	ea53 030a 	orrs.w	r3, r3, sl
 8005bf4:	f040 8087 	bne.w	8005d06 <_strtod_l+0x8e6>
 8005bf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f040 8082 	bne.w	8005d06 <_strtod_l+0x8e6>
 8005c02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005c06:	0d1b      	lsrs	r3, r3, #20
 8005c08:	051b      	lsls	r3, r3, #20
 8005c0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005c0e:	d97a      	bls.n	8005d06 <_strtod_l+0x8e6>
 8005c10:	696b      	ldr	r3, [r5, #20]
 8005c12:	b913      	cbnz	r3, 8005c1a <_strtod_l+0x7fa>
 8005c14:	692b      	ldr	r3, [r5, #16]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	dd75      	ble.n	8005d06 <_strtod_l+0x8e6>
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f002 f924 	bl	8007e6c <__lshift>
 8005c24:	4631      	mov	r1, r6
 8005c26:	4605      	mov	r5, r0
 8005c28:	f002 f98c 	bl	8007f44 <__mcmp>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	dd6a      	ble.n	8005d06 <_strtod_l+0x8e6>
 8005c30:	9904      	ldr	r1, [sp, #16]
 8005c32:	4a55      	ldr	r2, [pc, #340]	; (8005d88 <_strtod_l+0x968>)
 8005c34:	465b      	mov	r3, fp
 8005c36:	2900      	cmp	r1, #0
 8005c38:	f000 8085 	beq.w	8005d46 <_strtod_l+0x926>
 8005c3c:	ea02 010b 	and.w	r1, r2, fp
 8005c40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005c44:	dc7f      	bgt.n	8005d46 <_strtod_l+0x926>
 8005c46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005c4a:	f77f aeaa 	ble.w	80059a2 <_strtod_l+0x582>
 8005c4e:	4a4f      	ldr	r2, [pc, #316]	; (8005d8c <_strtod_l+0x96c>)
 8005c50:	2300      	movs	r3, #0
 8005c52:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8005c56:	4650      	mov	r0, sl
 8005c58:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005c5c:	4659      	mov	r1, fp
 8005c5e:	f7fa fcdb 	bl	8000618 <__aeabi_dmul>
 8005c62:	460b      	mov	r3, r1
 8005c64:	4303      	orrs	r3, r0
 8005c66:	bf08      	it	eq
 8005c68:	2322      	moveq	r3, #34	; 0x22
 8005c6a:	4682      	mov	sl, r0
 8005c6c:	468b      	mov	fp, r1
 8005c6e:	bf08      	it	eq
 8005c70:	6023      	streq	r3, [r4, #0]
 8005c72:	e62b      	b.n	80058cc <_strtod_l+0x4ac>
 8005c74:	f04f 32ff 	mov.w	r2, #4294967295
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	ea03 0a0a 	and.w	sl, r3, sl
 8005c80:	e6de      	b.n	8005a40 <_strtod_l+0x620>
 8005c82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005c86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005c8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005c8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005c92:	fa01 f308 	lsl.w	r3, r1, r8
 8005c96:	930c      	str	r3, [sp, #48]	; 0x30
 8005c98:	9111      	str	r1, [sp, #68]	; 0x44
 8005c9a:	e741      	b.n	8005b20 <_strtod_l+0x700>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	930c      	str	r3, [sp, #48]	; 0x30
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	9311      	str	r3, [sp, #68]	; 0x44
 8005ca4:	e73c      	b.n	8005b20 <_strtod_l+0x700>
 8005ca6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005ca8:	4642      	mov	r2, r8
 8005caa:	4620      	mov	r0, r4
 8005cac:	f002 f8de 	bl	8007e6c <__lshift>
 8005cb0:	901e      	str	r0, [sp, #120]	; 0x78
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	f47f af66 	bne.w	8005b84 <_strtod_l+0x764>
 8005cb8:	e5fe      	b.n	80058b8 <_strtod_l+0x498>
 8005cba:	465f      	mov	r7, fp
 8005cbc:	d16e      	bne.n	8005d9c <_strtod_l+0x97c>
 8005cbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005cc4:	b342      	cbz	r2, 8005d18 <_strtod_l+0x8f8>
 8005cc6:	4a32      	ldr	r2, [pc, #200]	; (8005d90 <_strtod_l+0x970>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d128      	bne.n	8005d1e <_strtod_l+0x8fe>
 8005ccc:	9b04      	ldr	r3, [sp, #16]
 8005cce:	4650      	mov	r0, sl
 8005cd0:	b1eb      	cbz	r3, 8005d0e <_strtod_l+0x8ee>
 8005cd2:	4a2d      	ldr	r2, [pc, #180]	; (8005d88 <_strtod_l+0x968>)
 8005cd4:	403a      	ands	r2, r7
 8005cd6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005cda:	f04f 31ff 	mov.w	r1, #4294967295
 8005cde:	d819      	bhi.n	8005d14 <_strtod_l+0x8f4>
 8005ce0:	0d12      	lsrs	r2, r2, #20
 8005ce2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cea:	4298      	cmp	r0, r3
 8005cec:	d117      	bne.n	8005d1e <_strtod_l+0x8fe>
 8005cee:	4b29      	ldr	r3, [pc, #164]	; (8005d94 <_strtod_l+0x974>)
 8005cf0:	429f      	cmp	r7, r3
 8005cf2:	d102      	bne.n	8005cfa <_strtod_l+0x8da>
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f43f addf 	beq.w	80058b8 <_strtod_l+0x498>
 8005cfa:	4b23      	ldr	r3, [pc, #140]	; (8005d88 <_strtod_l+0x968>)
 8005cfc:	403b      	ands	r3, r7
 8005cfe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005d02:	f04f 0a00 	mov.w	sl, #0
 8005d06:	9b04      	ldr	r3, [sp, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1a0      	bne.n	8005c4e <_strtod_l+0x82e>
 8005d0c:	e5de      	b.n	80058cc <_strtod_l+0x4ac>
 8005d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d12:	e7ea      	b.n	8005cea <_strtod_l+0x8ca>
 8005d14:	460b      	mov	r3, r1
 8005d16:	e7e8      	b.n	8005cea <_strtod_l+0x8ca>
 8005d18:	ea53 030a 	orrs.w	r3, r3, sl
 8005d1c:	d088      	beq.n	8005c30 <_strtod_l+0x810>
 8005d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d20:	b1db      	cbz	r3, 8005d5a <_strtod_l+0x93a>
 8005d22:	423b      	tst	r3, r7
 8005d24:	d0ef      	beq.n	8005d06 <_strtod_l+0x8e6>
 8005d26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d28:	9a04      	ldr	r2, [sp, #16]
 8005d2a:	4650      	mov	r0, sl
 8005d2c:	4659      	mov	r1, fp
 8005d2e:	b1c3      	cbz	r3, 8005d62 <_strtod_l+0x942>
 8005d30:	f7ff fb5a 	bl	80053e8 <sulp>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d3c:	f7fa fab6 	bl	80002ac <__adddf3>
 8005d40:	4682      	mov	sl, r0
 8005d42:	468b      	mov	fp, r1
 8005d44:	e7df      	b.n	8005d06 <_strtod_l+0x8e6>
 8005d46:	4013      	ands	r3, r2
 8005d48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005d4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005d50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005d54:	f04f 3aff 	mov.w	sl, #4294967295
 8005d58:	e7d5      	b.n	8005d06 <_strtod_l+0x8e6>
 8005d5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d5c:	ea13 0f0a 	tst.w	r3, sl
 8005d60:	e7e0      	b.n	8005d24 <_strtod_l+0x904>
 8005d62:	f7ff fb41 	bl	80053e8 <sulp>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d6e:	f7fa fa9b 	bl	80002a8 <__aeabi_dsub>
 8005d72:	2200      	movs	r2, #0
 8005d74:	2300      	movs	r3, #0
 8005d76:	4682      	mov	sl, r0
 8005d78:	468b      	mov	fp, r1
 8005d7a:	f7fa feb5 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d0c1      	beq.n	8005d06 <_strtod_l+0x8e6>
 8005d82:	e60e      	b.n	80059a2 <_strtod_l+0x582>
 8005d84:	fffffc02 	.word	0xfffffc02
 8005d88:	7ff00000 	.word	0x7ff00000
 8005d8c:	39500000 	.word	0x39500000
 8005d90:	000fffff 	.word	0x000fffff
 8005d94:	7fefffff 	.word	0x7fefffff
 8005d98:	0800a6c0 	.word	0x0800a6c0
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f002 fa4c 	bl	800823c <__ratio>
 8005da4:	ec59 8b10 	vmov	r8, r9, d0
 8005da8:	ee10 0a10 	vmov	r0, s0
 8005dac:	2200      	movs	r2, #0
 8005dae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005db2:	4649      	mov	r1, r9
 8005db4:	f7fa feac 	bl	8000b10 <__aeabi_dcmple>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	d07c      	beq.n	8005eb6 <_strtod_l+0xa96>
 8005dbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d04c      	beq.n	8005e5c <_strtod_l+0xa3c>
 8005dc2:	4b95      	ldr	r3, [pc, #596]	; (8006018 <_strtod_l+0xbf8>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005dca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006018 <_strtod_l+0xbf8>
 8005dce:	f04f 0800 	mov.w	r8, #0
 8005dd2:	4b92      	ldr	r3, [pc, #584]	; (800601c <_strtod_l+0xbfc>)
 8005dd4:	403b      	ands	r3, r7
 8005dd6:	9311      	str	r3, [sp, #68]	; 0x44
 8005dd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005dda:	4b91      	ldr	r3, [pc, #580]	; (8006020 <_strtod_l+0xc00>)
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	f040 80b2 	bne.w	8005f46 <_strtod_l+0xb26>
 8005de2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005de6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005dee:	ec4b ab10 	vmov	d0, sl, fp
 8005df2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005df6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005dfa:	f002 f947 	bl	800808c <__ulp>
 8005dfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e02:	ec53 2b10 	vmov	r2, r3, d0
 8005e06:	f7fa fc07 	bl	8000618 <__aeabi_dmul>
 8005e0a:	4652      	mov	r2, sl
 8005e0c:	465b      	mov	r3, fp
 8005e0e:	f7fa fa4d 	bl	80002ac <__adddf3>
 8005e12:	460b      	mov	r3, r1
 8005e14:	4981      	ldr	r1, [pc, #516]	; (800601c <_strtod_l+0xbfc>)
 8005e16:	4a83      	ldr	r2, [pc, #524]	; (8006024 <_strtod_l+0xc04>)
 8005e18:	4019      	ands	r1, r3
 8005e1a:	4291      	cmp	r1, r2
 8005e1c:	4682      	mov	sl, r0
 8005e1e:	d95e      	bls.n	8005ede <_strtod_l+0xabe>
 8005e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e22:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d103      	bne.n	8005e32 <_strtod_l+0xa12>
 8005e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	f43f ad43 	beq.w	80058b8 <_strtod_l+0x498>
 8005e32:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006030 <_strtod_l+0xc10>
 8005e36:	f04f 3aff 	mov.w	sl, #4294967295
 8005e3a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f001 fdf9 	bl	8007a34 <_Bfree>
 8005e42:	9907      	ldr	r1, [sp, #28]
 8005e44:	4620      	mov	r0, r4
 8005e46:	f001 fdf5 	bl	8007a34 <_Bfree>
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f001 fdf1 	bl	8007a34 <_Bfree>
 8005e52:	4629      	mov	r1, r5
 8005e54:	4620      	mov	r0, r4
 8005e56:	f001 fded 	bl	8007a34 <_Bfree>
 8005e5a:	e613      	b.n	8005a84 <_strtod_l+0x664>
 8005e5c:	f1ba 0f00 	cmp.w	sl, #0
 8005e60:	d11b      	bne.n	8005e9a <_strtod_l+0xa7a>
 8005e62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e66:	b9f3      	cbnz	r3, 8005ea6 <_strtod_l+0xa86>
 8005e68:	4b6b      	ldr	r3, [pc, #428]	; (8006018 <_strtod_l+0xbf8>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	4640      	mov	r0, r8
 8005e6e:	4649      	mov	r1, r9
 8005e70:	f7fa fe44 	bl	8000afc <__aeabi_dcmplt>
 8005e74:	b9d0      	cbnz	r0, 8005eac <_strtod_l+0xa8c>
 8005e76:	4640      	mov	r0, r8
 8005e78:	4649      	mov	r1, r9
 8005e7a:	4b6b      	ldr	r3, [pc, #428]	; (8006028 <_strtod_l+0xc08>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f7fa fbcb 	bl	8000618 <__aeabi_dmul>
 8005e82:	4680      	mov	r8, r0
 8005e84:	4689      	mov	r9, r1
 8005e86:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005e8a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005e8e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e90:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005e94:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005e98:	e79b      	b.n	8005dd2 <_strtod_l+0x9b2>
 8005e9a:	f1ba 0f01 	cmp.w	sl, #1
 8005e9e:	d102      	bne.n	8005ea6 <_strtod_l+0xa86>
 8005ea0:	2f00      	cmp	r7, #0
 8005ea2:	f43f ad7e 	beq.w	80059a2 <_strtod_l+0x582>
 8005ea6:	4b61      	ldr	r3, [pc, #388]	; (800602c <_strtod_l+0xc0c>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	e78c      	b.n	8005dc6 <_strtod_l+0x9a6>
 8005eac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006028 <_strtod_l+0xc08>
 8005eb0:	f04f 0800 	mov.w	r8, #0
 8005eb4:	e7e7      	b.n	8005e86 <_strtod_l+0xa66>
 8005eb6:	4b5c      	ldr	r3, [pc, #368]	; (8006028 <_strtod_l+0xc08>)
 8005eb8:	4640      	mov	r0, r8
 8005eba:	4649      	mov	r1, r9
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f7fa fbab 	bl	8000618 <__aeabi_dmul>
 8005ec2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ec4:	4680      	mov	r8, r0
 8005ec6:	4689      	mov	r9, r1
 8005ec8:	b933      	cbnz	r3, 8005ed8 <_strtod_l+0xab8>
 8005eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ece:	9012      	str	r0, [sp, #72]	; 0x48
 8005ed0:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ed2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005ed6:	e7dd      	b.n	8005e94 <_strtod_l+0xa74>
 8005ed8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8005edc:	e7f9      	b.n	8005ed2 <_strtod_l+0xab2>
 8005ede:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005ee2:	9b04      	ldr	r3, [sp, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1a8      	bne.n	8005e3a <_strtod_l+0xa1a>
 8005ee8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005eec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005eee:	0d1b      	lsrs	r3, r3, #20
 8005ef0:	051b      	lsls	r3, r3, #20
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d1a1      	bne.n	8005e3a <_strtod_l+0xa1a>
 8005ef6:	4640      	mov	r0, r8
 8005ef8:	4649      	mov	r1, r9
 8005efa:	f7fa feed 	bl	8000cd8 <__aeabi_d2lz>
 8005efe:	f7fa fb5d 	bl	80005bc <__aeabi_l2d>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4640      	mov	r0, r8
 8005f08:	4649      	mov	r1, r9
 8005f0a:	f7fa f9cd 	bl	80002a8 <__aeabi_dsub>
 8005f0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f14:	ea43 030a 	orr.w	r3, r3, sl
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	4680      	mov	r8, r0
 8005f1c:	4689      	mov	r9, r1
 8005f1e:	d053      	beq.n	8005fc8 <_strtod_l+0xba8>
 8005f20:	a335      	add	r3, pc, #212	; (adr r3, 8005ff8 <_strtod_l+0xbd8>)
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	f7fa fde9 	bl	8000afc <__aeabi_dcmplt>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	f47f acce 	bne.w	80058cc <_strtod_l+0x4ac>
 8005f30:	a333      	add	r3, pc, #204	; (adr r3, 8006000 <_strtod_l+0xbe0>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	4640      	mov	r0, r8
 8005f38:	4649      	mov	r1, r9
 8005f3a:	f7fa fdfd 	bl	8000b38 <__aeabi_dcmpgt>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	f43f af7b 	beq.w	8005e3a <_strtod_l+0xa1a>
 8005f44:	e4c2      	b.n	80058cc <_strtod_l+0x4ac>
 8005f46:	9b04      	ldr	r3, [sp, #16]
 8005f48:	b333      	cbz	r3, 8005f98 <_strtod_l+0xb78>
 8005f4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005f50:	d822      	bhi.n	8005f98 <_strtod_l+0xb78>
 8005f52:	a32d      	add	r3, pc, #180	; (adr r3, 8006008 <_strtod_l+0xbe8>)
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	4640      	mov	r0, r8
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	f7fa fdd8 	bl	8000b10 <__aeabi_dcmple>
 8005f60:	b1a0      	cbz	r0, 8005f8c <_strtod_l+0xb6c>
 8005f62:	4649      	mov	r1, r9
 8005f64:	4640      	mov	r0, r8
 8005f66:	f7fa fe2f 	bl	8000bc8 <__aeabi_d2uiz>
 8005f6a:	2801      	cmp	r0, #1
 8005f6c:	bf38      	it	cc
 8005f6e:	2001      	movcc	r0, #1
 8005f70:	f7fa fad8 	bl	8000524 <__aeabi_ui2d>
 8005f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f76:	4680      	mov	r8, r0
 8005f78:	4689      	mov	r9, r1
 8005f7a:	bb13      	cbnz	r3, 8005fc2 <_strtod_l+0xba2>
 8005f7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f80:	9014      	str	r0, [sp, #80]	; 0x50
 8005f82:	9315      	str	r3, [sp, #84]	; 0x54
 8005f84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005f88:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005f90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	930d      	str	r3, [sp, #52]	; 0x34
 8005f98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f9c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005fa0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005fa4:	f002 f872 	bl	800808c <__ulp>
 8005fa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fac:	ec53 2b10 	vmov	r2, r3, d0
 8005fb0:	f7fa fb32 	bl	8000618 <__aeabi_dmul>
 8005fb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fb8:	f7fa f978 	bl	80002ac <__adddf3>
 8005fbc:	4682      	mov	sl, r0
 8005fbe:	468b      	mov	fp, r1
 8005fc0:	e78f      	b.n	8005ee2 <_strtod_l+0xac2>
 8005fc2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005fc6:	e7dd      	b.n	8005f84 <_strtod_l+0xb64>
 8005fc8:	a311      	add	r3, pc, #68	; (adr r3, 8006010 <_strtod_l+0xbf0>)
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	f7fa fd95 	bl	8000afc <__aeabi_dcmplt>
 8005fd2:	e7b4      	b.n	8005f3e <_strtod_l+0xb1e>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	930e      	str	r3, [sp, #56]	; 0x38
 8005fd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005fda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	f7ff ba65 	b.w	80054ac <_strtod_l+0x8c>
 8005fe2:	2b65      	cmp	r3, #101	; 0x65
 8005fe4:	f43f ab5d 	beq.w	80056a2 <_strtod_l+0x282>
 8005fe8:	2b45      	cmp	r3, #69	; 0x45
 8005fea:	f43f ab5a 	beq.w	80056a2 <_strtod_l+0x282>
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f7ff bb92 	b.w	8005718 <_strtod_l+0x2f8>
 8005ff4:	f3af 8000 	nop.w
 8005ff8:	94a03595 	.word	0x94a03595
 8005ffc:	3fdfffff 	.word	0x3fdfffff
 8006000:	35afe535 	.word	0x35afe535
 8006004:	3fe00000 	.word	0x3fe00000
 8006008:	ffc00000 	.word	0xffc00000
 800600c:	41dfffff 	.word	0x41dfffff
 8006010:	94a03595 	.word	0x94a03595
 8006014:	3fcfffff 	.word	0x3fcfffff
 8006018:	3ff00000 	.word	0x3ff00000
 800601c:	7ff00000 	.word	0x7ff00000
 8006020:	7fe00000 	.word	0x7fe00000
 8006024:	7c9fffff 	.word	0x7c9fffff
 8006028:	3fe00000 	.word	0x3fe00000
 800602c:	bff00000 	.word	0xbff00000
 8006030:	7fefffff 	.word	0x7fefffff

08006034 <_strtod_r>:
 8006034:	4b01      	ldr	r3, [pc, #4]	; (800603c <_strtod_r+0x8>)
 8006036:	f7ff b9f3 	b.w	8005420 <_strtod_l>
 800603a:	bf00      	nop
 800603c:	2000007c 	.word	0x2000007c

08006040 <_strtol_l.isra.0>:
 8006040:	2b01      	cmp	r3, #1
 8006042:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006046:	d001      	beq.n	800604c <_strtol_l.isra.0+0xc>
 8006048:	2b24      	cmp	r3, #36	; 0x24
 800604a:	d906      	bls.n	800605a <_strtol_l.isra.0+0x1a>
 800604c:	f7fe fa1c 	bl	8004488 <__errno>
 8006050:	2316      	movs	r3, #22
 8006052:	6003      	str	r3, [r0, #0]
 8006054:	2000      	movs	r0, #0
 8006056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605a:	4f3a      	ldr	r7, [pc, #232]	; (8006144 <_strtol_l.isra.0+0x104>)
 800605c:	468e      	mov	lr, r1
 800605e:	4676      	mov	r6, lr
 8006060:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006064:	5de5      	ldrb	r5, [r4, r7]
 8006066:	f015 0508 	ands.w	r5, r5, #8
 800606a:	d1f8      	bne.n	800605e <_strtol_l.isra.0+0x1e>
 800606c:	2c2d      	cmp	r4, #45	; 0x2d
 800606e:	d134      	bne.n	80060da <_strtol_l.isra.0+0x9a>
 8006070:	f89e 4000 	ldrb.w	r4, [lr]
 8006074:	f04f 0801 	mov.w	r8, #1
 8006078:	f106 0e02 	add.w	lr, r6, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d05c      	beq.n	800613a <_strtol_l.isra.0+0xfa>
 8006080:	2b10      	cmp	r3, #16
 8006082:	d10c      	bne.n	800609e <_strtol_l.isra.0+0x5e>
 8006084:	2c30      	cmp	r4, #48	; 0x30
 8006086:	d10a      	bne.n	800609e <_strtol_l.isra.0+0x5e>
 8006088:	f89e 4000 	ldrb.w	r4, [lr]
 800608c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006090:	2c58      	cmp	r4, #88	; 0x58
 8006092:	d14d      	bne.n	8006130 <_strtol_l.isra.0+0xf0>
 8006094:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006098:	2310      	movs	r3, #16
 800609a:	f10e 0e02 	add.w	lr, lr, #2
 800609e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80060a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80060a6:	2600      	movs	r6, #0
 80060a8:	fbbc f9f3 	udiv	r9, ip, r3
 80060ac:	4635      	mov	r5, r6
 80060ae:	fb03 ca19 	mls	sl, r3, r9, ip
 80060b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80060b6:	2f09      	cmp	r7, #9
 80060b8:	d818      	bhi.n	80060ec <_strtol_l.isra.0+0xac>
 80060ba:	463c      	mov	r4, r7
 80060bc:	42a3      	cmp	r3, r4
 80060be:	dd24      	ble.n	800610a <_strtol_l.isra.0+0xca>
 80060c0:	2e00      	cmp	r6, #0
 80060c2:	db1f      	blt.n	8006104 <_strtol_l.isra.0+0xc4>
 80060c4:	45a9      	cmp	r9, r5
 80060c6:	d31d      	bcc.n	8006104 <_strtol_l.isra.0+0xc4>
 80060c8:	d101      	bne.n	80060ce <_strtol_l.isra.0+0x8e>
 80060ca:	45a2      	cmp	sl, r4
 80060cc:	db1a      	blt.n	8006104 <_strtol_l.isra.0+0xc4>
 80060ce:	fb05 4503 	mla	r5, r5, r3, r4
 80060d2:	2601      	movs	r6, #1
 80060d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80060d8:	e7eb      	b.n	80060b2 <_strtol_l.isra.0+0x72>
 80060da:	2c2b      	cmp	r4, #43	; 0x2b
 80060dc:	bf08      	it	eq
 80060de:	f89e 4000 	ldrbeq.w	r4, [lr]
 80060e2:	46a8      	mov	r8, r5
 80060e4:	bf08      	it	eq
 80060e6:	f106 0e02 	addeq.w	lr, r6, #2
 80060ea:	e7c7      	b.n	800607c <_strtol_l.isra.0+0x3c>
 80060ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80060f0:	2f19      	cmp	r7, #25
 80060f2:	d801      	bhi.n	80060f8 <_strtol_l.isra.0+0xb8>
 80060f4:	3c37      	subs	r4, #55	; 0x37
 80060f6:	e7e1      	b.n	80060bc <_strtol_l.isra.0+0x7c>
 80060f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80060fc:	2f19      	cmp	r7, #25
 80060fe:	d804      	bhi.n	800610a <_strtol_l.isra.0+0xca>
 8006100:	3c57      	subs	r4, #87	; 0x57
 8006102:	e7db      	b.n	80060bc <_strtol_l.isra.0+0x7c>
 8006104:	f04f 36ff 	mov.w	r6, #4294967295
 8006108:	e7e4      	b.n	80060d4 <_strtol_l.isra.0+0x94>
 800610a:	2e00      	cmp	r6, #0
 800610c:	da05      	bge.n	800611a <_strtol_l.isra.0+0xda>
 800610e:	2322      	movs	r3, #34	; 0x22
 8006110:	6003      	str	r3, [r0, #0]
 8006112:	4665      	mov	r5, ip
 8006114:	b942      	cbnz	r2, 8006128 <_strtol_l.isra.0+0xe8>
 8006116:	4628      	mov	r0, r5
 8006118:	e79d      	b.n	8006056 <_strtol_l.isra.0+0x16>
 800611a:	f1b8 0f00 	cmp.w	r8, #0
 800611e:	d000      	beq.n	8006122 <_strtol_l.isra.0+0xe2>
 8006120:	426d      	negs	r5, r5
 8006122:	2a00      	cmp	r2, #0
 8006124:	d0f7      	beq.n	8006116 <_strtol_l.isra.0+0xd6>
 8006126:	b10e      	cbz	r6, 800612c <_strtol_l.isra.0+0xec>
 8006128:	f10e 31ff 	add.w	r1, lr, #4294967295
 800612c:	6011      	str	r1, [r2, #0]
 800612e:	e7f2      	b.n	8006116 <_strtol_l.isra.0+0xd6>
 8006130:	2430      	movs	r4, #48	; 0x30
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1b3      	bne.n	800609e <_strtol_l.isra.0+0x5e>
 8006136:	2308      	movs	r3, #8
 8006138:	e7b1      	b.n	800609e <_strtol_l.isra.0+0x5e>
 800613a:	2c30      	cmp	r4, #48	; 0x30
 800613c:	d0a4      	beq.n	8006088 <_strtol_l.isra.0+0x48>
 800613e:	230a      	movs	r3, #10
 8006140:	e7ad      	b.n	800609e <_strtol_l.isra.0+0x5e>
 8006142:	bf00      	nop
 8006144:	0800a6e9 	.word	0x0800a6e9

08006148 <_strtol_r>:
 8006148:	f7ff bf7a 	b.w	8006040 <_strtol_l.isra.0>

0800614c <quorem>:
 800614c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006150:	6903      	ldr	r3, [r0, #16]
 8006152:	690c      	ldr	r4, [r1, #16]
 8006154:	42a3      	cmp	r3, r4
 8006156:	4607      	mov	r7, r0
 8006158:	f2c0 8081 	blt.w	800625e <quorem+0x112>
 800615c:	3c01      	subs	r4, #1
 800615e:	f101 0814 	add.w	r8, r1, #20
 8006162:	f100 0514 	add.w	r5, r0, #20
 8006166:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800616a:	9301      	str	r3, [sp, #4]
 800616c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006170:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006174:	3301      	adds	r3, #1
 8006176:	429a      	cmp	r2, r3
 8006178:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800617c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006180:	fbb2 f6f3 	udiv	r6, r2, r3
 8006184:	d331      	bcc.n	80061ea <quorem+0x9e>
 8006186:	f04f 0e00 	mov.w	lr, #0
 800618a:	4640      	mov	r0, r8
 800618c:	46ac      	mov	ip, r5
 800618e:	46f2      	mov	sl, lr
 8006190:	f850 2b04 	ldr.w	r2, [r0], #4
 8006194:	b293      	uxth	r3, r2
 8006196:	fb06 e303 	mla	r3, r6, r3, lr
 800619a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800619e:	b29b      	uxth	r3, r3
 80061a0:	ebaa 0303 	sub.w	r3, sl, r3
 80061a4:	0c12      	lsrs	r2, r2, #16
 80061a6:	f8dc a000 	ldr.w	sl, [ip]
 80061aa:	fb06 e202 	mla	r2, r6, r2, lr
 80061ae:	fa13 f38a 	uxtah	r3, r3, sl
 80061b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061b6:	fa1f fa82 	uxth.w	sl, r2
 80061ba:	f8dc 2000 	ldr.w	r2, [ip]
 80061be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80061c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061cc:	4581      	cmp	r9, r0
 80061ce:	f84c 3b04 	str.w	r3, [ip], #4
 80061d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061d6:	d2db      	bcs.n	8006190 <quorem+0x44>
 80061d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80061dc:	b92b      	cbnz	r3, 80061ea <quorem+0x9e>
 80061de:	9b01      	ldr	r3, [sp, #4]
 80061e0:	3b04      	subs	r3, #4
 80061e2:	429d      	cmp	r5, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	d32e      	bcc.n	8006246 <quorem+0xfa>
 80061e8:	613c      	str	r4, [r7, #16]
 80061ea:	4638      	mov	r0, r7
 80061ec:	f001 feaa 	bl	8007f44 <__mcmp>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	db24      	blt.n	800623e <quorem+0xf2>
 80061f4:	3601      	adds	r6, #1
 80061f6:	4628      	mov	r0, r5
 80061f8:	f04f 0c00 	mov.w	ip, #0
 80061fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006200:	f8d0 e000 	ldr.w	lr, [r0]
 8006204:	b293      	uxth	r3, r2
 8006206:	ebac 0303 	sub.w	r3, ip, r3
 800620a:	0c12      	lsrs	r2, r2, #16
 800620c:	fa13 f38e 	uxtah	r3, r3, lr
 8006210:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006214:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006218:	b29b      	uxth	r3, r3
 800621a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800621e:	45c1      	cmp	r9, r8
 8006220:	f840 3b04 	str.w	r3, [r0], #4
 8006224:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006228:	d2e8      	bcs.n	80061fc <quorem+0xb0>
 800622a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800622e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006232:	b922      	cbnz	r2, 800623e <quorem+0xf2>
 8006234:	3b04      	subs	r3, #4
 8006236:	429d      	cmp	r5, r3
 8006238:	461a      	mov	r2, r3
 800623a:	d30a      	bcc.n	8006252 <quorem+0x106>
 800623c:	613c      	str	r4, [r7, #16]
 800623e:	4630      	mov	r0, r6
 8006240:	b003      	add	sp, #12
 8006242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	3b04      	subs	r3, #4
 800624a:	2a00      	cmp	r2, #0
 800624c:	d1cc      	bne.n	80061e8 <quorem+0x9c>
 800624e:	3c01      	subs	r4, #1
 8006250:	e7c7      	b.n	80061e2 <quorem+0x96>
 8006252:	6812      	ldr	r2, [r2, #0]
 8006254:	3b04      	subs	r3, #4
 8006256:	2a00      	cmp	r2, #0
 8006258:	d1f0      	bne.n	800623c <quorem+0xf0>
 800625a:	3c01      	subs	r4, #1
 800625c:	e7eb      	b.n	8006236 <quorem+0xea>
 800625e:	2000      	movs	r0, #0
 8006260:	e7ee      	b.n	8006240 <quorem+0xf4>
 8006262:	0000      	movs	r0, r0
 8006264:	0000      	movs	r0, r0
	...

08006268 <_dtoa_r>:
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	ed2d 8b02 	vpush	{d8}
 8006270:	ec57 6b10 	vmov	r6, r7, d0
 8006274:	b095      	sub	sp, #84	; 0x54
 8006276:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006278:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800627c:	9105      	str	r1, [sp, #20]
 800627e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006282:	4604      	mov	r4, r0
 8006284:	9209      	str	r2, [sp, #36]	; 0x24
 8006286:	930f      	str	r3, [sp, #60]	; 0x3c
 8006288:	b975      	cbnz	r5, 80062a8 <_dtoa_r+0x40>
 800628a:	2010      	movs	r0, #16
 800628c:	f001 fb6a 	bl	8007964 <malloc>
 8006290:	4602      	mov	r2, r0
 8006292:	6260      	str	r0, [r4, #36]	; 0x24
 8006294:	b920      	cbnz	r0, 80062a0 <_dtoa_r+0x38>
 8006296:	4bb2      	ldr	r3, [pc, #712]	; (8006560 <_dtoa_r+0x2f8>)
 8006298:	21ea      	movs	r1, #234	; 0xea
 800629a:	48b2      	ldr	r0, [pc, #712]	; (8006564 <_dtoa_r+0x2fc>)
 800629c:	f002 fd02 	bl	8008ca4 <__assert_func>
 80062a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062a4:	6005      	str	r5, [r0, #0]
 80062a6:	60c5      	str	r5, [r0, #12]
 80062a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062aa:	6819      	ldr	r1, [r3, #0]
 80062ac:	b151      	cbz	r1, 80062c4 <_dtoa_r+0x5c>
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	604a      	str	r2, [r1, #4]
 80062b2:	2301      	movs	r3, #1
 80062b4:	4093      	lsls	r3, r2
 80062b6:	608b      	str	r3, [r1, #8]
 80062b8:	4620      	mov	r0, r4
 80062ba:	f001 fbbb 	bl	8007a34 <_Bfree>
 80062be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	1e3b      	subs	r3, r7, #0
 80062c6:	bfb9      	ittee	lt
 80062c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80062cc:	9303      	strlt	r3, [sp, #12]
 80062ce:	2300      	movge	r3, #0
 80062d0:	f8c8 3000 	strge.w	r3, [r8]
 80062d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80062d8:	4ba3      	ldr	r3, [pc, #652]	; (8006568 <_dtoa_r+0x300>)
 80062da:	bfbc      	itt	lt
 80062dc:	2201      	movlt	r2, #1
 80062de:	f8c8 2000 	strlt.w	r2, [r8]
 80062e2:	ea33 0309 	bics.w	r3, r3, r9
 80062e6:	d11b      	bne.n	8006320 <_dtoa_r+0xb8>
 80062e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062f4:	4333      	orrs	r3, r6
 80062f6:	f000 857a 	beq.w	8006dee <_dtoa_r+0xb86>
 80062fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062fc:	b963      	cbnz	r3, 8006318 <_dtoa_r+0xb0>
 80062fe:	4b9b      	ldr	r3, [pc, #620]	; (800656c <_dtoa_r+0x304>)
 8006300:	e024      	b.n	800634c <_dtoa_r+0xe4>
 8006302:	4b9b      	ldr	r3, [pc, #620]	; (8006570 <_dtoa_r+0x308>)
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	3308      	adds	r3, #8
 8006308:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	9800      	ldr	r0, [sp, #0]
 800630e:	b015      	add	sp, #84	; 0x54
 8006310:	ecbd 8b02 	vpop	{d8}
 8006314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006318:	4b94      	ldr	r3, [pc, #592]	; (800656c <_dtoa_r+0x304>)
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	3303      	adds	r3, #3
 800631e:	e7f3      	b.n	8006308 <_dtoa_r+0xa0>
 8006320:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006324:	2200      	movs	r2, #0
 8006326:	ec51 0b17 	vmov	r0, r1, d7
 800632a:	2300      	movs	r3, #0
 800632c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006330:	f7fa fbda 	bl	8000ae8 <__aeabi_dcmpeq>
 8006334:	4680      	mov	r8, r0
 8006336:	b158      	cbz	r0, 8006350 <_dtoa_r+0xe8>
 8006338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800633a:	2301      	movs	r3, #1
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 8551 	beq.w	8006de8 <_dtoa_r+0xb80>
 8006346:	488b      	ldr	r0, [pc, #556]	; (8006574 <_dtoa_r+0x30c>)
 8006348:	6018      	str	r0, [r3, #0]
 800634a:	1e43      	subs	r3, r0, #1
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	e7dd      	b.n	800630c <_dtoa_r+0xa4>
 8006350:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006354:	aa12      	add	r2, sp, #72	; 0x48
 8006356:	a913      	add	r1, sp, #76	; 0x4c
 8006358:	4620      	mov	r0, r4
 800635a:	f001 ff13 	bl	8008184 <__d2b>
 800635e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006362:	4683      	mov	fp, r0
 8006364:	2d00      	cmp	r5, #0
 8006366:	d07c      	beq.n	8006462 <_dtoa_r+0x1fa>
 8006368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800636a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800636e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006372:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006376:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800637a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800637e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006382:	4b7d      	ldr	r3, [pc, #500]	; (8006578 <_dtoa_r+0x310>)
 8006384:	2200      	movs	r2, #0
 8006386:	4630      	mov	r0, r6
 8006388:	4639      	mov	r1, r7
 800638a:	f7f9 ff8d 	bl	80002a8 <__aeabi_dsub>
 800638e:	a36e      	add	r3, pc, #440	; (adr r3, 8006548 <_dtoa_r+0x2e0>)
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	f7fa f940 	bl	8000618 <__aeabi_dmul>
 8006398:	a36d      	add	r3, pc, #436	; (adr r3, 8006550 <_dtoa_r+0x2e8>)
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	f7f9 ff85 	bl	80002ac <__adddf3>
 80063a2:	4606      	mov	r6, r0
 80063a4:	4628      	mov	r0, r5
 80063a6:	460f      	mov	r7, r1
 80063a8:	f7fa f8cc 	bl	8000544 <__aeabi_i2d>
 80063ac:	a36a      	add	r3, pc, #424	; (adr r3, 8006558 <_dtoa_r+0x2f0>)
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	f7fa f931 	bl	8000618 <__aeabi_dmul>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4630      	mov	r0, r6
 80063bc:	4639      	mov	r1, r7
 80063be:	f7f9 ff75 	bl	80002ac <__adddf3>
 80063c2:	4606      	mov	r6, r0
 80063c4:	460f      	mov	r7, r1
 80063c6:	f7fa fbd7 	bl	8000b78 <__aeabi_d2iz>
 80063ca:	2200      	movs	r2, #0
 80063cc:	4682      	mov	sl, r0
 80063ce:	2300      	movs	r3, #0
 80063d0:	4630      	mov	r0, r6
 80063d2:	4639      	mov	r1, r7
 80063d4:	f7fa fb92 	bl	8000afc <__aeabi_dcmplt>
 80063d8:	b148      	cbz	r0, 80063ee <_dtoa_r+0x186>
 80063da:	4650      	mov	r0, sl
 80063dc:	f7fa f8b2 	bl	8000544 <__aeabi_i2d>
 80063e0:	4632      	mov	r2, r6
 80063e2:	463b      	mov	r3, r7
 80063e4:	f7fa fb80 	bl	8000ae8 <__aeabi_dcmpeq>
 80063e8:	b908      	cbnz	r0, 80063ee <_dtoa_r+0x186>
 80063ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063ee:	f1ba 0f16 	cmp.w	sl, #22
 80063f2:	d854      	bhi.n	800649e <_dtoa_r+0x236>
 80063f4:	4b61      	ldr	r3, [pc, #388]	; (800657c <_dtoa_r+0x314>)
 80063f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006402:	f7fa fb7b 	bl	8000afc <__aeabi_dcmplt>
 8006406:	2800      	cmp	r0, #0
 8006408:	d04b      	beq.n	80064a2 <_dtoa_r+0x23a>
 800640a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800640e:	2300      	movs	r3, #0
 8006410:	930e      	str	r3, [sp, #56]	; 0x38
 8006412:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006414:	1b5d      	subs	r5, r3, r5
 8006416:	1e6b      	subs	r3, r5, #1
 8006418:	9304      	str	r3, [sp, #16]
 800641a:	bf43      	ittte	mi
 800641c:	2300      	movmi	r3, #0
 800641e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006422:	9304      	strmi	r3, [sp, #16]
 8006424:	f04f 0800 	movpl.w	r8, #0
 8006428:	f1ba 0f00 	cmp.w	sl, #0
 800642c:	db3b      	blt.n	80064a6 <_dtoa_r+0x23e>
 800642e:	9b04      	ldr	r3, [sp, #16]
 8006430:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006434:	4453      	add	r3, sl
 8006436:	9304      	str	r3, [sp, #16]
 8006438:	2300      	movs	r3, #0
 800643a:	9306      	str	r3, [sp, #24]
 800643c:	9b05      	ldr	r3, [sp, #20]
 800643e:	2b09      	cmp	r3, #9
 8006440:	d869      	bhi.n	8006516 <_dtoa_r+0x2ae>
 8006442:	2b05      	cmp	r3, #5
 8006444:	bfc4      	itt	gt
 8006446:	3b04      	subgt	r3, #4
 8006448:	9305      	strgt	r3, [sp, #20]
 800644a:	9b05      	ldr	r3, [sp, #20]
 800644c:	f1a3 0302 	sub.w	r3, r3, #2
 8006450:	bfcc      	ite	gt
 8006452:	2500      	movgt	r5, #0
 8006454:	2501      	movle	r5, #1
 8006456:	2b03      	cmp	r3, #3
 8006458:	d869      	bhi.n	800652e <_dtoa_r+0x2c6>
 800645a:	e8df f003 	tbb	[pc, r3]
 800645e:	4e2c      	.short	0x4e2c
 8006460:	5a4c      	.short	0x5a4c
 8006462:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006466:	441d      	add	r5, r3
 8006468:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800646c:	2b20      	cmp	r3, #32
 800646e:	bfc1      	itttt	gt
 8006470:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006474:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006478:	fa09 f303 	lslgt.w	r3, r9, r3
 800647c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006480:	bfda      	itte	le
 8006482:	f1c3 0320 	rsble	r3, r3, #32
 8006486:	fa06 f003 	lslle.w	r0, r6, r3
 800648a:	4318      	orrgt	r0, r3
 800648c:	f7fa f84a 	bl	8000524 <__aeabi_ui2d>
 8006490:	2301      	movs	r3, #1
 8006492:	4606      	mov	r6, r0
 8006494:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006498:	3d01      	subs	r5, #1
 800649a:	9310      	str	r3, [sp, #64]	; 0x40
 800649c:	e771      	b.n	8006382 <_dtoa_r+0x11a>
 800649e:	2301      	movs	r3, #1
 80064a0:	e7b6      	b.n	8006410 <_dtoa_r+0x1a8>
 80064a2:	900e      	str	r0, [sp, #56]	; 0x38
 80064a4:	e7b5      	b.n	8006412 <_dtoa_r+0x1aa>
 80064a6:	f1ca 0300 	rsb	r3, sl, #0
 80064aa:	9306      	str	r3, [sp, #24]
 80064ac:	2300      	movs	r3, #0
 80064ae:	eba8 080a 	sub.w	r8, r8, sl
 80064b2:	930d      	str	r3, [sp, #52]	; 0x34
 80064b4:	e7c2      	b.n	800643c <_dtoa_r+0x1d4>
 80064b6:	2300      	movs	r3, #0
 80064b8:	9308      	str	r3, [sp, #32]
 80064ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064bc:	2b00      	cmp	r3, #0
 80064be:	dc39      	bgt.n	8006534 <_dtoa_r+0x2cc>
 80064c0:	f04f 0901 	mov.w	r9, #1
 80064c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80064c8:	464b      	mov	r3, r9
 80064ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80064ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80064d0:	2200      	movs	r2, #0
 80064d2:	6042      	str	r2, [r0, #4]
 80064d4:	2204      	movs	r2, #4
 80064d6:	f102 0614 	add.w	r6, r2, #20
 80064da:	429e      	cmp	r6, r3
 80064dc:	6841      	ldr	r1, [r0, #4]
 80064de:	d92f      	bls.n	8006540 <_dtoa_r+0x2d8>
 80064e0:	4620      	mov	r0, r4
 80064e2:	f001 fa67 	bl	80079b4 <_Balloc>
 80064e6:	9000      	str	r0, [sp, #0]
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d14b      	bne.n	8006584 <_dtoa_r+0x31c>
 80064ec:	4b24      	ldr	r3, [pc, #144]	; (8006580 <_dtoa_r+0x318>)
 80064ee:	4602      	mov	r2, r0
 80064f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064f4:	e6d1      	b.n	800629a <_dtoa_r+0x32>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e7de      	b.n	80064b8 <_dtoa_r+0x250>
 80064fa:	2300      	movs	r3, #0
 80064fc:	9308      	str	r3, [sp, #32]
 80064fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006500:	eb0a 0903 	add.w	r9, sl, r3
 8006504:	f109 0301 	add.w	r3, r9, #1
 8006508:	2b01      	cmp	r3, #1
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	bfb8      	it	lt
 800650e:	2301      	movlt	r3, #1
 8006510:	e7dd      	b.n	80064ce <_dtoa_r+0x266>
 8006512:	2301      	movs	r3, #1
 8006514:	e7f2      	b.n	80064fc <_dtoa_r+0x294>
 8006516:	2501      	movs	r5, #1
 8006518:	2300      	movs	r3, #0
 800651a:	9305      	str	r3, [sp, #20]
 800651c:	9508      	str	r5, [sp, #32]
 800651e:	f04f 39ff 	mov.w	r9, #4294967295
 8006522:	2200      	movs	r2, #0
 8006524:	f8cd 9004 	str.w	r9, [sp, #4]
 8006528:	2312      	movs	r3, #18
 800652a:	9209      	str	r2, [sp, #36]	; 0x24
 800652c:	e7cf      	b.n	80064ce <_dtoa_r+0x266>
 800652e:	2301      	movs	r3, #1
 8006530:	9308      	str	r3, [sp, #32]
 8006532:	e7f4      	b.n	800651e <_dtoa_r+0x2b6>
 8006534:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006538:	f8cd 9004 	str.w	r9, [sp, #4]
 800653c:	464b      	mov	r3, r9
 800653e:	e7c6      	b.n	80064ce <_dtoa_r+0x266>
 8006540:	3101      	adds	r1, #1
 8006542:	6041      	str	r1, [r0, #4]
 8006544:	0052      	lsls	r2, r2, #1
 8006546:	e7c6      	b.n	80064d6 <_dtoa_r+0x26e>
 8006548:	636f4361 	.word	0x636f4361
 800654c:	3fd287a7 	.word	0x3fd287a7
 8006550:	8b60c8b3 	.word	0x8b60c8b3
 8006554:	3fc68a28 	.word	0x3fc68a28
 8006558:	509f79fb 	.word	0x509f79fb
 800655c:	3fd34413 	.word	0x3fd34413
 8006560:	0800a7f6 	.word	0x0800a7f6
 8006564:	0800a80d 	.word	0x0800a80d
 8006568:	7ff00000 	.word	0x7ff00000
 800656c:	0800a7f2 	.word	0x0800a7f2
 8006570:	0800a7e9 	.word	0x0800a7e9
 8006574:	0800a669 	.word	0x0800a669
 8006578:	3ff80000 	.word	0x3ff80000
 800657c:	0800a9e8 	.word	0x0800a9e8
 8006580:	0800a86c 	.word	0x0800a86c
 8006584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006586:	9a00      	ldr	r2, [sp, #0]
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	9b01      	ldr	r3, [sp, #4]
 800658c:	2b0e      	cmp	r3, #14
 800658e:	f200 80ad 	bhi.w	80066ec <_dtoa_r+0x484>
 8006592:	2d00      	cmp	r5, #0
 8006594:	f000 80aa 	beq.w	80066ec <_dtoa_r+0x484>
 8006598:	f1ba 0f00 	cmp.w	sl, #0
 800659c:	dd36      	ble.n	800660c <_dtoa_r+0x3a4>
 800659e:	4ac3      	ldr	r2, [pc, #780]	; (80068ac <_dtoa_r+0x644>)
 80065a0:	f00a 030f 	and.w	r3, sl, #15
 80065a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065a8:	ed93 7b00 	vldr	d7, [r3]
 80065ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80065b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80065b4:	eeb0 8a47 	vmov.f32	s16, s14
 80065b8:	eef0 8a67 	vmov.f32	s17, s15
 80065bc:	d016      	beq.n	80065ec <_dtoa_r+0x384>
 80065be:	4bbc      	ldr	r3, [pc, #752]	; (80068b0 <_dtoa_r+0x648>)
 80065c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065c8:	f7fa f950 	bl	800086c <__aeabi_ddiv>
 80065cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065d0:	f007 070f 	and.w	r7, r7, #15
 80065d4:	2503      	movs	r5, #3
 80065d6:	4eb6      	ldr	r6, [pc, #728]	; (80068b0 <_dtoa_r+0x648>)
 80065d8:	b957      	cbnz	r7, 80065f0 <_dtoa_r+0x388>
 80065da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065de:	ec53 2b18 	vmov	r2, r3, d8
 80065e2:	f7fa f943 	bl	800086c <__aeabi_ddiv>
 80065e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ea:	e029      	b.n	8006640 <_dtoa_r+0x3d8>
 80065ec:	2502      	movs	r5, #2
 80065ee:	e7f2      	b.n	80065d6 <_dtoa_r+0x36e>
 80065f0:	07f9      	lsls	r1, r7, #31
 80065f2:	d508      	bpl.n	8006606 <_dtoa_r+0x39e>
 80065f4:	ec51 0b18 	vmov	r0, r1, d8
 80065f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065fc:	f7fa f80c 	bl	8000618 <__aeabi_dmul>
 8006600:	ec41 0b18 	vmov	d8, r0, r1
 8006604:	3501      	adds	r5, #1
 8006606:	107f      	asrs	r7, r7, #1
 8006608:	3608      	adds	r6, #8
 800660a:	e7e5      	b.n	80065d8 <_dtoa_r+0x370>
 800660c:	f000 80a6 	beq.w	800675c <_dtoa_r+0x4f4>
 8006610:	f1ca 0600 	rsb	r6, sl, #0
 8006614:	4ba5      	ldr	r3, [pc, #660]	; (80068ac <_dtoa_r+0x644>)
 8006616:	4fa6      	ldr	r7, [pc, #664]	; (80068b0 <_dtoa_r+0x648>)
 8006618:	f006 020f 	and.w	r2, r6, #15
 800661c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006628:	f7f9 fff6 	bl	8000618 <__aeabi_dmul>
 800662c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006630:	1136      	asrs	r6, r6, #4
 8006632:	2300      	movs	r3, #0
 8006634:	2502      	movs	r5, #2
 8006636:	2e00      	cmp	r6, #0
 8006638:	f040 8085 	bne.w	8006746 <_dtoa_r+0x4de>
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1d2      	bne.n	80065e6 <_dtoa_r+0x37e>
 8006640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 808c 	beq.w	8006760 <_dtoa_r+0x4f8>
 8006648:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800664c:	4b99      	ldr	r3, [pc, #612]	; (80068b4 <_dtoa_r+0x64c>)
 800664e:	2200      	movs	r2, #0
 8006650:	4630      	mov	r0, r6
 8006652:	4639      	mov	r1, r7
 8006654:	f7fa fa52 	bl	8000afc <__aeabi_dcmplt>
 8006658:	2800      	cmp	r0, #0
 800665a:	f000 8081 	beq.w	8006760 <_dtoa_r+0x4f8>
 800665e:	9b01      	ldr	r3, [sp, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d07d      	beq.n	8006760 <_dtoa_r+0x4f8>
 8006664:	f1b9 0f00 	cmp.w	r9, #0
 8006668:	dd3c      	ble.n	80066e4 <_dtoa_r+0x47c>
 800666a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800666e:	9307      	str	r3, [sp, #28]
 8006670:	2200      	movs	r2, #0
 8006672:	4b91      	ldr	r3, [pc, #580]	; (80068b8 <_dtoa_r+0x650>)
 8006674:	4630      	mov	r0, r6
 8006676:	4639      	mov	r1, r7
 8006678:	f7f9 ffce 	bl	8000618 <__aeabi_dmul>
 800667c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006680:	3501      	adds	r5, #1
 8006682:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006686:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800668a:	4628      	mov	r0, r5
 800668c:	f7f9 ff5a 	bl	8000544 <__aeabi_i2d>
 8006690:	4632      	mov	r2, r6
 8006692:	463b      	mov	r3, r7
 8006694:	f7f9 ffc0 	bl	8000618 <__aeabi_dmul>
 8006698:	4b88      	ldr	r3, [pc, #544]	; (80068bc <_dtoa_r+0x654>)
 800669a:	2200      	movs	r2, #0
 800669c:	f7f9 fe06 	bl	80002ac <__adddf3>
 80066a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80066a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066a8:	9303      	str	r3, [sp, #12]
 80066aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d15c      	bne.n	800676a <_dtoa_r+0x502>
 80066b0:	4b83      	ldr	r3, [pc, #524]	; (80068c0 <_dtoa_r+0x658>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	4630      	mov	r0, r6
 80066b6:	4639      	mov	r1, r7
 80066b8:	f7f9 fdf6 	bl	80002a8 <__aeabi_dsub>
 80066bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066c0:	4606      	mov	r6, r0
 80066c2:	460f      	mov	r7, r1
 80066c4:	f7fa fa38 	bl	8000b38 <__aeabi_dcmpgt>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	f040 8296 	bne.w	8006bfa <_dtoa_r+0x992>
 80066ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80066d2:	4630      	mov	r0, r6
 80066d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066d8:	4639      	mov	r1, r7
 80066da:	f7fa fa0f 	bl	8000afc <__aeabi_dcmplt>
 80066de:	2800      	cmp	r0, #0
 80066e0:	f040 8288 	bne.w	8006bf4 <_dtoa_r+0x98c>
 80066e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f2c0 8158 	blt.w	80069a4 <_dtoa_r+0x73c>
 80066f4:	f1ba 0f0e 	cmp.w	sl, #14
 80066f8:	f300 8154 	bgt.w	80069a4 <_dtoa_r+0x73c>
 80066fc:	4b6b      	ldr	r3, [pc, #428]	; (80068ac <_dtoa_r+0x644>)
 80066fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006702:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	f280 80e3 	bge.w	80068d4 <_dtoa_r+0x66c>
 800670e:	9b01      	ldr	r3, [sp, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	f300 80df 	bgt.w	80068d4 <_dtoa_r+0x66c>
 8006716:	f040 826d 	bne.w	8006bf4 <_dtoa_r+0x98c>
 800671a:	4b69      	ldr	r3, [pc, #420]	; (80068c0 <_dtoa_r+0x658>)
 800671c:	2200      	movs	r2, #0
 800671e:	4640      	mov	r0, r8
 8006720:	4649      	mov	r1, r9
 8006722:	f7f9 ff79 	bl	8000618 <__aeabi_dmul>
 8006726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800672a:	f7fa f9fb 	bl	8000b24 <__aeabi_dcmpge>
 800672e:	9e01      	ldr	r6, [sp, #4]
 8006730:	4637      	mov	r7, r6
 8006732:	2800      	cmp	r0, #0
 8006734:	f040 8243 	bne.w	8006bbe <_dtoa_r+0x956>
 8006738:	9d00      	ldr	r5, [sp, #0]
 800673a:	2331      	movs	r3, #49	; 0x31
 800673c:	f805 3b01 	strb.w	r3, [r5], #1
 8006740:	f10a 0a01 	add.w	sl, sl, #1
 8006744:	e23f      	b.n	8006bc6 <_dtoa_r+0x95e>
 8006746:	07f2      	lsls	r2, r6, #31
 8006748:	d505      	bpl.n	8006756 <_dtoa_r+0x4ee>
 800674a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800674e:	f7f9 ff63 	bl	8000618 <__aeabi_dmul>
 8006752:	3501      	adds	r5, #1
 8006754:	2301      	movs	r3, #1
 8006756:	1076      	asrs	r6, r6, #1
 8006758:	3708      	adds	r7, #8
 800675a:	e76c      	b.n	8006636 <_dtoa_r+0x3ce>
 800675c:	2502      	movs	r5, #2
 800675e:	e76f      	b.n	8006640 <_dtoa_r+0x3d8>
 8006760:	9b01      	ldr	r3, [sp, #4]
 8006762:	f8cd a01c 	str.w	sl, [sp, #28]
 8006766:	930c      	str	r3, [sp, #48]	; 0x30
 8006768:	e78d      	b.n	8006686 <_dtoa_r+0x41e>
 800676a:	9900      	ldr	r1, [sp, #0]
 800676c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800676e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006770:	4b4e      	ldr	r3, [pc, #312]	; (80068ac <_dtoa_r+0x644>)
 8006772:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006776:	4401      	add	r1, r0
 8006778:	9102      	str	r1, [sp, #8]
 800677a:	9908      	ldr	r1, [sp, #32]
 800677c:	eeb0 8a47 	vmov.f32	s16, s14
 8006780:	eef0 8a67 	vmov.f32	s17, s15
 8006784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006788:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800678c:	2900      	cmp	r1, #0
 800678e:	d045      	beq.n	800681c <_dtoa_r+0x5b4>
 8006790:	494c      	ldr	r1, [pc, #304]	; (80068c4 <_dtoa_r+0x65c>)
 8006792:	2000      	movs	r0, #0
 8006794:	f7fa f86a 	bl	800086c <__aeabi_ddiv>
 8006798:	ec53 2b18 	vmov	r2, r3, d8
 800679c:	f7f9 fd84 	bl	80002a8 <__aeabi_dsub>
 80067a0:	9d00      	ldr	r5, [sp, #0]
 80067a2:	ec41 0b18 	vmov	d8, r0, r1
 80067a6:	4639      	mov	r1, r7
 80067a8:	4630      	mov	r0, r6
 80067aa:	f7fa f9e5 	bl	8000b78 <__aeabi_d2iz>
 80067ae:	900c      	str	r0, [sp, #48]	; 0x30
 80067b0:	f7f9 fec8 	bl	8000544 <__aeabi_i2d>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4630      	mov	r0, r6
 80067ba:	4639      	mov	r1, r7
 80067bc:	f7f9 fd74 	bl	80002a8 <__aeabi_dsub>
 80067c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067c2:	3330      	adds	r3, #48	; 0x30
 80067c4:	f805 3b01 	strb.w	r3, [r5], #1
 80067c8:	ec53 2b18 	vmov	r2, r3, d8
 80067cc:	4606      	mov	r6, r0
 80067ce:	460f      	mov	r7, r1
 80067d0:	f7fa f994 	bl	8000afc <__aeabi_dcmplt>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d165      	bne.n	80068a4 <_dtoa_r+0x63c>
 80067d8:	4632      	mov	r2, r6
 80067da:	463b      	mov	r3, r7
 80067dc:	4935      	ldr	r1, [pc, #212]	; (80068b4 <_dtoa_r+0x64c>)
 80067de:	2000      	movs	r0, #0
 80067e0:	f7f9 fd62 	bl	80002a8 <__aeabi_dsub>
 80067e4:	ec53 2b18 	vmov	r2, r3, d8
 80067e8:	f7fa f988 	bl	8000afc <__aeabi_dcmplt>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f040 80b9 	bne.w	8006964 <_dtoa_r+0x6fc>
 80067f2:	9b02      	ldr	r3, [sp, #8]
 80067f4:	429d      	cmp	r5, r3
 80067f6:	f43f af75 	beq.w	80066e4 <_dtoa_r+0x47c>
 80067fa:	4b2f      	ldr	r3, [pc, #188]	; (80068b8 <_dtoa_r+0x650>)
 80067fc:	ec51 0b18 	vmov	r0, r1, d8
 8006800:	2200      	movs	r2, #0
 8006802:	f7f9 ff09 	bl	8000618 <__aeabi_dmul>
 8006806:	4b2c      	ldr	r3, [pc, #176]	; (80068b8 <_dtoa_r+0x650>)
 8006808:	ec41 0b18 	vmov	d8, r0, r1
 800680c:	2200      	movs	r2, #0
 800680e:	4630      	mov	r0, r6
 8006810:	4639      	mov	r1, r7
 8006812:	f7f9 ff01 	bl	8000618 <__aeabi_dmul>
 8006816:	4606      	mov	r6, r0
 8006818:	460f      	mov	r7, r1
 800681a:	e7c4      	b.n	80067a6 <_dtoa_r+0x53e>
 800681c:	ec51 0b17 	vmov	r0, r1, d7
 8006820:	f7f9 fefa 	bl	8000618 <__aeabi_dmul>
 8006824:	9b02      	ldr	r3, [sp, #8]
 8006826:	9d00      	ldr	r5, [sp, #0]
 8006828:	930c      	str	r3, [sp, #48]	; 0x30
 800682a:	ec41 0b18 	vmov	d8, r0, r1
 800682e:	4639      	mov	r1, r7
 8006830:	4630      	mov	r0, r6
 8006832:	f7fa f9a1 	bl	8000b78 <__aeabi_d2iz>
 8006836:	9011      	str	r0, [sp, #68]	; 0x44
 8006838:	f7f9 fe84 	bl	8000544 <__aeabi_i2d>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4630      	mov	r0, r6
 8006842:	4639      	mov	r1, r7
 8006844:	f7f9 fd30 	bl	80002a8 <__aeabi_dsub>
 8006848:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800684a:	3330      	adds	r3, #48	; 0x30
 800684c:	f805 3b01 	strb.w	r3, [r5], #1
 8006850:	9b02      	ldr	r3, [sp, #8]
 8006852:	429d      	cmp	r5, r3
 8006854:	4606      	mov	r6, r0
 8006856:	460f      	mov	r7, r1
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	d134      	bne.n	80068c8 <_dtoa_r+0x660>
 800685e:	4b19      	ldr	r3, [pc, #100]	; (80068c4 <_dtoa_r+0x65c>)
 8006860:	ec51 0b18 	vmov	r0, r1, d8
 8006864:	f7f9 fd22 	bl	80002ac <__adddf3>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4630      	mov	r0, r6
 800686e:	4639      	mov	r1, r7
 8006870:	f7fa f962 	bl	8000b38 <__aeabi_dcmpgt>
 8006874:	2800      	cmp	r0, #0
 8006876:	d175      	bne.n	8006964 <_dtoa_r+0x6fc>
 8006878:	ec53 2b18 	vmov	r2, r3, d8
 800687c:	4911      	ldr	r1, [pc, #68]	; (80068c4 <_dtoa_r+0x65c>)
 800687e:	2000      	movs	r0, #0
 8006880:	f7f9 fd12 	bl	80002a8 <__aeabi_dsub>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4630      	mov	r0, r6
 800688a:	4639      	mov	r1, r7
 800688c:	f7fa f936 	bl	8000afc <__aeabi_dcmplt>
 8006890:	2800      	cmp	r0, #0
 8006892:	f43f af27 	beq.w	80066e4 <_dtoa_r+0x47c>
 8006896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006898:	1e6b      	subs	r3, r5, #1
 800689a:	930c      	str	r3, [sp, #48]	; 0x30
 800689c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068a0:	2b30      	cmp	r3, #48	; 0x30
 80068a2:	d0f8      	beq.n	8006896 <_dtoa_r+0x62e>
 80068a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80068a8:	e04a      	b.n	8006940 <_dtoa_r+0x6d8>
 80068aa:	bf00      	nop
 80068ac:	0800a9e8 	.word	0x0800a9e8
 80068b0:	0800a9c0 	.word	0x0800a9c0
 80068b4:	3ff00000 	.word	0x3ff00000
 80068b8:	40240000 	.word	0x40240000
 80068bc:	401c0000 	.word	0x401c0000
 80068c0:	40140000 	.word	0x40140000
 80068c4:	3fe00000 	.word	0x3fe00000
 80068c8:	4baf      	ldr	r3, [pc, #700]	; (8006b88 <_dtoa_r+0x920>)
 80068ca:	f7f9 fea5 	bl	8000618 <__aeabi_dmul>
 80068ce:	4606      	mov	r6, r0
 80068d0:	460f      	mov	r7, r1
 80068d2:	e7ac      	b.n	800682e <_dtoa_r+0x5c6>
 80068d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80068d8:	9d00      	ldr	r5, [sp, #0]
 80068da:	4642      	mov	r2, r8
 80068dc:	464b      	mov	r3, r9
 80068de:	4630      	mov	r0, r6
 80068e0:	4639      	mov	r1, r7
 80068e2:	f7f9 ffc3 	bl	800086c <__aeabi_ddiv>
 80068e6:	f7fa f947 	bl	8000b78 <__aeabi_d2iz>
 80068ea:	9002      	str	r0, [sp, #8]
 80068ec:	f7f9 fe2a 	bl	8000544 <__aeabi_i2d>
 80068f0:	4642      	mov	r2, r8
 80068f2:	464b      	mov	r3, r9
 80068f4:	f7f9 fe90 	bl	8000618 <__aeabi_dmul>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	f7f9 fcd2 	bl	80002a8 <__aeabi_dsub>
 8006904:	9e02      	ldr	r6, [sp, #8]
 8006906:	9f01      	ldr	r7, [sp, #4]
 8006908:	3630      	adds	r6, #48	; 0x30
 800690a:	f805 6b01 	strb.w	r6, [r5], #1
 800690e:	9e00      	ldr	r6, [sp, #0]
 8006910:	1bae      	subs	r6, r5, r6
 8006912:	42b7      	cmp	r7, r6
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	d137      	bne.n	800698a <_dtoa_r+0x722>
 800691a:	f7f9 fcc7 	bl	80002ac <__adddf3>
 800691e:	4642      	mov	r2, r8
 8006920:	464b      	mov	r3, r9
 8006922:	4606      	mov	r6, r0
 8006924:	460f      	mov	r7, r1
 8006926:	f7fa f907 	bl	8000b38 <__aeabi_dcmpgt>
 800692a:	b9c8      	cbnz	r0, 8006960 <_dtoa_r+0x6f8>
 800692c:	4642      	mov	r2, r8
 800692e:	464b      	mov	r3, r9
 8006930:	4630      	mov	r0, r6
 8006932:	4639      	mov	r1, r7
 8006934:	f7fa f8d8 	bl	8000ae8 <__aeabi_dcmpeq>
 8006938:	b110      	cbz	r0, 8006940 <_dtoa_r+0x6d8>
 800693a:	9b02      	ldr	r3, [sp, #8]
 800693c:	07d9      	lsls	r1, r3, #31
 800693e:	d40f      	bmi.n	8006960 <_dtoa_r+0x6f8>
 8006940:	4620      	mov	r0, r4
 8006942:	4659      	mov	r1, fp
 8006944:	f001 f876 	bl	8007a34 <_Bfree>
 8006948:	2300      	movs	r3, #0
 800694a:	702b      	strb	r3, [r5, #0]
 800694c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800694e:	f10a 0001 	add.w	r0, sl, #1
 8006952:	6018      	str	r0, [r3, #0]
 8006954:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006956:	2b00      	cmp	r3, #0
 8006958:	f43f acd8 	beq.w	800630c <_dtoa_r+0xa4>
 800695c:	601d      	str	r5, [r3, #0]
 800695e:	e4d5      	b.n	800630c <_dtoa_r+0xa4>
 8006960:	f8cd a01c 	str.w	sl, [sp, #28]
 8006964:	462b      	mov	r3, r5
 8006966:	461d      	mov	r5, r3
 8006968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800696c:	2a39      	cmp	r2, #57	; 0x39
 800696e:	d108      	bne.n	8006982 <_dtoa_r+0x71a>
 8006970:	9a00      	ldr	r2, [sp, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d1f7      	bne.n	8006966 <_dtoa_r+0x6fe>
 8006976:	9a07      	ldr	r2, [sp, #28]
 8006978:	9900      	ldr	r1, [sp, #0]
 800697a:	3201      	adds	r2, #1
 800697c:	9207      	str	r2, [sp, #28]
 800697e:	2230      	movs	r2, #48	; 0x30
 8006980:	700a      	strb	r2, [r1, #0]
 8006982:	781a      	ldrb	r2, [r3, #0]
 8006984:	3201      	adds	r2, #1
 8006986:	701a      	strb	r2, [r3, #0]
 8006988:	e78c      	b.n	80068a4 <_dtoa_r+0x63c>
 800698a:	4b7f      	ldr	r3, [pc, #508]	; (8006b88 <_dtoa_r+0x920>)
 800698c:	2200      	movs	r2, #0
 800698e:	f7f9 fe43 	bl	8000618 <__aeabi_dmul>
 8006992:	2200      	movs	r2, #0
 8006994:	2300      	movs	r3, #0
 8006996:	4606      	mov	r6, r0
 8006998:	460f      	mov	r7, r1
 800699a:	f7fa f8a5 	bl	8000ae8 <__aeabi_dcmpeq>
 800699e:	2800      	cmp	r0, #0
 80069a0:	d09b      	beq.n	80068da <_dtoa_r+0x672>
 80069a2:	e7cd      	b.n	8006940 <_dtoa_r+0x6d8>
 80069a4:	9a08      	ldr	r2, [sp, #32]
 80069a6:	2a00      	cmp	r2, #0
 80069a8:	f000 80c4 	beq.w	8006b34 <_dtoa_r+0x8cc>
 80069ac:	9a05      	ldr	r2, [sp, #20]
 80069ae:	2a01      	cmp	r2, #1
 80069b0:	f300 80a8 	bgt.w	8006b04 <_dtoa_r+0x89c>
 80069b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069b6:	2a00      	cmp	r2, #0
 80069b8:	f000 80a0 	beq.w	8006afc <_dtoa_r+0x894>
 80069bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069c0:	9e06      	ldr	r6, [sp, #24]
 80069c2:	4645      	mov	r5, r8
 80069c4:	9a04      	ldr	r2, [sp, #16]
 80069c6:	2101      	movs	r1, #1
 80069c8:	441a      	add	r2, r3
 80069ca:	4620      	mov	r0, r4
 80069cc:	4498      	add	r8, r3
 80069ce:	9204      	str	r2, [sp, #16]
 80069d0:	f001 f936 	bl	8007c40 <__i2b>
 80069d4:	4607      	mov	r7, r0
 80069d6:	2d00      	cmp	r5, #0
 80069d8:	dd0b      	ble.n	80069f2 <_dtoa_r+0x78a>
 80069da:	9b04      	ldr	r3, [sp, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	dd08      	ble.n	80069f2 <_dtoa_r+0x78a>
 80069e0:	42ab      	cmp	r3, r5
 80069e2:	9a04      	ldr	r2, [sp, #16]
 80069e4:	bfa8      	it	ge
 80069e6:	462b      	movge	r3, r5
 80069e8:	eba8 0803 	sub.w	r8, r8, r3
 80069ec:	1aed      	subs	r5, r5, r3
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	9304      	str	r3, [sp, #16]
 80069f2:	9b06      	ldr	r3, [sp, #24]
 80069f4:	b1fb      	cbz	r3, 8006a36 <_dtoa_r+0x7ce>
 80069f6:	9b08      	ldr	r3, [sp, #32]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 809f 	beq.w	8006b3c <_dtoa_r+0x8d4>
 80069fe:	2e00      	cmp	r6, #0
 8006a00:	dd11      	ble.n	8006a26 <_dtoa_r+0x7be>
 8006a02:	4639      	mov	r1, r7
 8006a04:	4632      	mov	r2, r6
 8006a06:	4620      	mov	r0, r4
 8006a08:	f001 f9d6 	bl	8007db8 <__pow5mult>
 8006a0c:	465a      	mov	r2, fp
 8006a0e:	4601      	mov	r1, r0
 8006a10:	4607      	mov	r7, r0
 8006a12:	4620      	mov	r0, r4
 8006a14:	f001 f92a 	bl	8007c6c <__multiply>
 8006a18:	4659      	mov	r1, fp
 8006a1a:	9007      	str	r0, [sp, #28]
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f001 f809 	bl	8007a34 <_Bfree>
 8006a22:	9b07      	ldr	r3, [sp, #28]
 8006a24:	469b      	mov	fp, r3
 8006a26:	9b06      	ldr	r3, [sp, #24]
 8006a28:	1b9a      	subs	r2, r3, r6
 8006a2a:	d004      	beq.n	8006a36 <_dtoa_r+0x7ce>
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f001 f9c2 	bl	8007db8 <__pow5mult>
 8006a34:	4683      	mov	fp, r0
 8006a36:	2101      	movs	r1, #1
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f001 f901 	bl	8007c40 <__i2b>
 8006a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	4606      	mov	r6, r0
 8006a44:	dd7c      	ble.n	8006b40 <_dtoa_r+0x8d8>
 8006a46:	461a      	mov	r2, r3
 8006a48:	4601      	mov	r1, r0
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f001 f9b4 	bl	8007db8 <__pow5mult>
 8006a50:	9b05      	ldr	r3, [sp, #20]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	4606      	mov	r6, r0
 8006a56:	dd76      	ble.n	8006b46 <_dtoa_r+0x8de>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9306      	str	r3, [sp, #24]
 8006a5c:	6933      	ldr	r3, [r6, #16]
 8006a5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a62:	6918      	ldr	r0, [r3, #16]
 8006a64:	f001 f89c 	bl	8007ba0 <__hi0bits>
 8006a68:	f1c0 0020 	rsb	r0, r0, #32
 8006a6c:	9b04      	ldr	r3, [sp, #16]
 8006a6e:	4418      	add	r0, r3
 8006a70:	f010 001f 	ands.w	r0, r0, #31
 8006a74:	f000 8086 	beq.w	8006b84 <_dtoa_r+0x91c>
 8006a78:	f1c0 0320 	rsb	r3, r0, #32
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	dd7f      	ble.n	8006b80 <_dtoa_r+0x918>
 8006a80:	f1c0 001c 	rsb	r0, r0, #28
 8006a84:	9b04      	ldr	r3, [sp, #16]
 8006a86:	4403      	add	r3, r0
 8006a88:	4480      	add	r8, r0
 8006a8a:	4405      	add	r5, r0
 8006a8c:	9304      	str	r3, [sp, #16]
 8006a8e:	f1b8 0f00 	cmp.w	r8, #0
 8006a92:	dd05      	ble.n	8006aa0 <_dtoa_r+0x838>
 8006a94:	4659      	mov	r1, fp
 8006a96:	4642      	mov	r2, r8
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f001 f9e7 	bl	8007e6c <__lshift>
 8006a9e:	4683      	mov	fp, r0
 8006aa0:	9b04      	ldr	r3, [sp, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	dd05      	ble.n	8006ab2 <_dtoa_r+0x84a>
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f001 f9de 	bl	8007e6c <__lshift>
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d069      	beq.n	8006b8c <_dtoa_r+0x924>
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4658      	mov	r0, fp
 8006abc:	f001 fa42 	bl	8007f44 <__mcmp>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	da63      	bge.n	8006b8c <_dtoa_r+0x924>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4659      	mov	r1, fp
 8006ac8:	220a      	movs	r2, #10
 8006aca:	4620      	mov	r0, r4
 8006acc:	f000 ffd4 	bl	8007a78 <__multadd>
 8006ad0:	9b08      	ldr	r3, [sp, #32]
 8006ad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ad6:	4683      	mov	fp, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 818f 	beq.w	8006dfc <_dtoa_r+0xb94>
 8006ade:	4639      	mov	r1, r7
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	220a      	movs	r2, #10
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 ffc7 	bl	8007a78 <__multadd>
 8006aea:	f1b9 0f00 	cmp.w	r9, #0
 8006aee:	4607      	mov	r7, r0
 8006af0:	f300 808e 	bgt.w	8006c10 <_dtoa_r+0x9a8>
 8006af4:	9b05      	ldr	r3, [sp, #20]
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	dc50      	bgt.n	8006b9c <_dtoa_r+0x934>
 8006afa:	e089      	b.n	8006c10 <_dtoa_r+0x9a8>
 8006afc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006afe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b02:	e75d      	b.n	80069c0 <_dtoa_r+0x758>
 8006b04:	9b01      	ldr	r3, [sp, #4]
 8006b06:	1e5e      	subs	r6, r3, #1
 8006b08:	9b06      	ldr	r3, [sp, #24]
 8006b0a:	42b3      	cmp	r3, r6
 8006b0c:	bfbf      	itttt	lt
 8006b0e:	9b06      	ldrlt	r3, [sp, #24]
 8006b10:	9606      	strlt	r6, [sp, #24]
 8006b12:	1af2      	sublt	r2, r6, r3
 8006b14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006b16:	bfb6      	itet	lt
 8006b18:	189b      	addlt	r3, r3, r2
 8006b1a:	1b9e      	subge	r6, r3, r6
 8006b1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006b1e:	9b01      	ldr	r3, [sp, #4]
 8006b20:	bfb8      	it	lt
 8006b22:	2600      	movlt	r6, #0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bfb5      	itete	lt
 8006b28:	eba8 0503 	sublt.w	r5, r8, r3
 8006b2c:	9b01      	ldrge	r3, [sp, #4]
 8006b2e:	2300      	movlt	r3, #0
 8006b30:	4645      	movge	r5, r8
 8006b32:	e747      	b.n	80069c4 <_dtoa_r+0x75c>
 8006b34:	9e06      	ldr	r6, [sp, #24]
 8006b36:	9f08      	ldr	r7, [sp, #32]
 8006b38:	4645      	mov	r5, r8
 8006b3a:	e74c      	b.n	80069d6 <_dtoa_r+0x76e>
 8006b3c:	9a06      	ldr	r2, [sp, #24]
 8006b3e:	e775      	b.n	8006a2c <_dtoa_r+0x7c4>
 8006b40:	9b05      	ldr	r3, [sp, #20]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	dc18      	bgt.n	8006b78 <_dtoa_r+0x910>
 8006b46:	9b02      	ldr	r3, [sp, #8]
 8006b48:	b9b3      	cbnz	r3, 8006b78 <_dtoa_r+0x910>
 8006b4a:	9b03      	ldr	r3, [sp, #12]
 8006b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b50:	b9a3      	cbnz	r3, 8006b7c <_dtoa_r+0x914>
 8006b52:	9b03      	ldr	r3, [sp, #12]
 8006b54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b58:	0d1b      	lsrs	r3, r3, #20
 8006b5a:	051b      	lsls	r3, r3, #20
 8006b5c:	b12b      	cbz	r3, 8006b6a <_dtoa_r+0x902>
 8006b5e:	9b04      	ldr	r3, [sp, #16]
 8006b60:	3301      	adds	r3, #1
 8006b62:	9304      	str	r3, [sp, #16]
 8006b64:	f108 0801 	add.w	r8, r8, #1
 8006b68:	2301      	movs	r3, #1
 8006b6a:	9306      	str	r3, [sp, #24]
 8006b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f47f af74 	bne.w	8006a5c <_dtoa_r+0x7f4>
 8006b74:	2001      	movs	r0, #1
 8006b76:	e779      	b.n	8006a6c <_dtoa_r+0x804>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	e7f6      	b.n	8006b6a <_dtoa_r+0x902>
 8006b7c:	9b02      	ldr	r3, [sp, #8]
 8006b7e:	e7f4      	b.n	8006b6a <_dtoa_r+0x902>
 8006b80:	d085      	beq.n	8006a8e <_dtoa_r+0x826>
 8006b82:	4618      	mov	r0, r3
 8006b84:	301c      	adds	r0, #28
 8006b86:	e77d      	b.n	8006a84 <_dtoa_r+0x81c>
 8006b88:	40240000 	.word	0x40240000
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	dc38      	bgt.n	8006c04 <_dtoa_r+0x99c>
 8006b92:	9b05      	ldr	r3, [sp, #20]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	dd35      	ble.n	8006c04 <_dtoa_r+0x99c>
 8006b98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006b9c:	f1b9 0f00 	cmp.w	r9, #0
 8006ba0:	d10d      	bne.n	8006bbe <_dtoa_r+0x956>
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	464b      	mov	r3, r9
 8006ba6:	2205      	movs	r2, #5
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 ff65 	bl	8007a78 <__multadd>
 8006bae:	4601      	mov	r1, r0
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	4658      	mov	r0, fp
 8006bb4:	f001 f9c6 	bl	8007f44 <__mcmp>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	f73f adbd 	bgt.w	8006738 <_dtoa_r+0x4d0>
 8006bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc0:	9d00      	ldr	r5, [sp, #0]
 8006bc2:	ea6f 0a03 	mvn.w	sl, r3
 8006bc6:	f04f 0800 	mov.w	r8, #0
 8006bca:	4631      	mov	r1, r6
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 ff31 	bl	8007a34 <_Bfree>
 8006bd2:	2f00      	cmp	r7, #0
 8006bd4:	f43f aeb4 	beq.w	8006940 <_dtoa_r+0x6d8>
 8006bd8:	f1b8 0f00 	cmp.w	r8, #0
 8006bdc:	d005      	beq.n	8006bea <_dtoa_r+0x982>
 8006bde:	45b8      	cmp	r8, r7
 8006be0:	d003      	beq.n	8006bea <_dtoa_r+0x982>
 8006be2:	4641      	mov	r1, r8
 8006be4:	4620      	mov	r0, r4
 8006be6:	f000 ff25 	bl	8007a34 <_Bfree>
 8006bea:	4639      	mov	r1, r7
 8006bec:	4620      	mov	r0, r4
 8006bee:	f000 ff21 	bl	8007a34 <_Bfree>
 8006bf2:	e6a5      	b.n	8006940 <_dtoa_r+0x6d8>
 8006bf4:	2600      	movs	r6, #0
 8006bf6:	4637      	mov	r7, r6
 8006bf8:	e7e1      	b.n	8006bbe <_dtoa_r+0x956>
 8006bfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006bfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c00:	4637      	mov	r7, r6
 8006c02:	e599      	b.n	8006738 <_dtoa_r+0x4d0>
 8006c04:	9b08      	ldr	r3, [sp, #32]
 8006c06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80fd 	beq.w	8006e0a <_dtoa_r+0xba2>
 8006c10:	2d00      	cmp	r5, #0
 8006c12:	dd05      	ble.n	8006c20 <_dtoa_r+0x9b8>
 8006c14:	4639      	mov	r1, r7
 8006c16:	462a      	mov	r2, r5
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f001 f927 	bl	8007e6c <__lshift>
 8006c1e:	4607      	mov	r7, r0
 8006c20:	9b06      	ldr	r3, [sp, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d05c      	beq.n	8006ce0 <_dtoa_r+0xa78>
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f000 fec3 	bl	80079b4 <_Balloc>
 8006c2e:	4605      	mov	r5, r0
 8006c30:	b928      	cbnz	r0, 8006c3e <_dtoa_r+0x9d6>
 8006c32:	4b80      	ldr	r3, [pc, #512]	; (8006e34 <_dtoa_r+0xbcc>)
 8006c34:	4602      	mov	r2, r0
 8006c36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c3a:	f7ff bb2e 	b.w	800629a <_dtoa_r+0x32>
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	3202      	adds	r2, #2
 8006c42:	0092      	lsls	r2, r2, #2
 8006c44:	f107 010c 	add.w	r1, r7, #12
 8006c48:	300c      	adds	r0, #12
 8006c4a:	f000 fea5 	bl	8007998 <memcpy>
 8006c4e:	2201      	movs	r2, #1
 8006c50:	4629      	mov	r1, r5
 8006c52:	4620      	mov	r0, r4
 8006c54:	f001 f90a 	bl	8007e6c <__lshift>
 8006c58:	9b00      	ldr	r3, [sp, #0]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	9b00      	ldr	r3, [sp, #0]
 8006c60:	444b      	add	r3, r9
 8006c62:	9307      	str	r3, [sp, #28]
 8006c64:	9b02      	ldr	r3, [sp, #8]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	46b8      	mov	r8, r7
 8006c6c:	9306      	str	r3, [sp, #24]
 8006c6e:	4607      	mov	r7, r0
 8006c70:	9b01      	ldr	r3, [sp, #4]
 8006c72:	4631      	mov	r1, r6
 8006c74:	3b01      	subs	r3, #1
 8006c76:	4658      	mov	r0, fp
 8006c78:	9302      	str	r3, [sp, #8]
 8006c7a:	f7ff fa67 	bl	800614c <quorem>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	3330      	adds	r3, #48	; 0x30
 8006c82:	9004      	str	r0, [sp, #16]
 8006c84:	4641      	mov	r1, r8
 8006c86:	4658      	mov	r0, fp
 8006c88:	9308      	str	r3, [sp, #32]
 8006c8a:	f001 f95b 	bl	8007f44 <__mcmp>
 8006c8e:	463a      	mov	r2, r7
 8006c90:	4681      	mov	r9, r0
 8006c92:	4631      	mov	r1, r6
 8006c94:	4620      	mov	r0, r4
 8006c96:	f001 f971 	bl	8007f7c <__mdiff>
 8006c9a:	68c2      	ldr	r2, [r0, #12]
 8006c9c:	9b08      	ldr	r3, [sp, #32]
 8006c9e:	4605      	mov	r5, r0
 8006ca0:	bb02      	cbnz	r2, 8006ce4 <_dtoa_r+0xa7c>
 8006ca2:	4601      	mov	r1, r0
 8006ca4:	4658      	mov	r0, fp
 8006ca6:	f001 f94d 	bl	8007f44 <__mcmp>
 8006caa:	9b08      	ldr	r3, [sp, #32]
 8006cac:	4602      	mov	r2, r0
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006cb6:	f000 febd 	bl	8007a34 <_Bfree>
 8006cba:	9b05      	ldr	r3, [sp, #20]
 8006cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cbe:	9d01      	ldr	r5, [sp, #4]
 8006cc0:	ea43 0102 	orr.w	r1, r3, r2
 8006cc4:	9b06      	ldr	r3, [sp, #24]
 8006cc6:	430b      	orrs	r3, r1
 8006cc8:	9b08      	ldr	r3, [sp, #32]
 8006cca:	d10d      	bne.n	8006ce8 <_dtoa_r+0xa80>
 8006ccc:	2b39      	cmp	r3, #57	; 0x39
 8006cce:	d029      	beq.n	8006d24 <_dtoa_r+0xabc>
 8006cd0:	f1b9 0f00 	cmp.w	r9, #0
 8006cd4:	dd01      	ble.n	8006cda <_dtoa_r+0xa72>
 8006cd6:	9b04      	ldr	r3, [sp, #16]
 8006cd8:	3331      	adds	r3, #49	; 0x31
 8006cda:	9a02      	ldr	r2, [sp, #8]
 8006cdc:	7013      	strb	r3, [r2, #0]
 8006cde:	e774      	b.n	8006bca <_dtoa_r+0x962>
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	e7b9      	b.n	8006c58 <_dtoa_r+0x9f0>
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	e7e2      	b.n	8006cae <_dtoa_r+0xa46>
 8006ce8:	f1b9 0f00 	cmp.w	r9, #0
 8006cec:	db06      	blt.n	8006cfc <_dtoa_r+0xa94>
 8006cee:	9905      	ldr	r1, [sp, #20]
 8006cf0:	ea41 0909 	orr.w	r9, r1, r9
 8006cf4:	9906      	ldr	r1, [sp, #24]
 8006cf6:	ea59 0101 	orrs.w	r1, r9, r1
 8006cfa:	d120      	bne.n	8006d3e <_dtoa_r+0xad6>
 8006cfc:	2a00      	cmp	r2, #0
 8006cfe:	ddec      	ble.n	8006cda <_dtoa_r+0xa72>
 8006d00:	4659      	mov	r1, fp
 8006d02:	2201      	movs	r2, #1
 8006d04:	4620      	mov	r0, r4
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	f001 f8b0 	bl	8007e6c <__lshift>
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4683      	mov	fp, r0
 8006d10:	f001 f918 	bl	8007f44 <__mcmp>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	9b01      	ldr	r3, [sp, #4]
 8006d18:	dc02      	bgt.n	8006d20 <_dtoa_r+0xab8>
 8006d1a:	d1de      	bne.n	8006cda <_dtoa_r+0xa72>
 8006d1c:	07da      	lsls	r2, r3, #31
 8006d1e:	d5dc      	bpl.n	8006cda <_dtoa_r+0xa72>
 8006d20:	2b39      	cmp	r3, #57	; 0x39
 8006d22:	d1d8      	bne.n	8006cd6 <_dtoa_r+0xa6e>
 8006d24:	9a02      	ldr	r2, [sp, #8]
 8006d26:	2339      	movs	r3, #57	; 0x39
 8006d28:	7013      	strb	r3, [r2, #0]
 8006d2a:	462b      	mov	r3, r5
 8006d2c:	461d      	mov	r5, r3
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d34:	2a39      	cmp	r2, #57	; 0x39
 8006d36:	d050      	beq.n	8006dda <_dtoa_r+0xb72>
 8006d38:	3201      	adds	r2, #1
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	e745      	b.n	8006bca <_dtoa_r+0x962>
 8006d3e:	2a00      	cmp	r2, #0
 8006d40:	dd03      	ble.n	8006d4a <_dtoa_r+0xae2>
 8006d42:	2b39      	cmp	r3, #57	; 0x39
 8006d44:	d0ee      	beq.n	8006d24 <_dtoa_r+0xabc>
 8006d46:	3301      	adds	r3, #1
 8006d48:	e7c7      	b.n	8006cda <_dtoa_r+0xa72>
 8006d4a:	9a01      	ldr	r2, [sp, #4]
 8006d4c:	9907      	ldr	r1, [sp, #28]
 8006d4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006d52:	428a      	cmp	r2, r1
 8006d54:	d02a      	beq.n	8006dac <_dtoa_r+0xb44>
 8006d56:	4659      	mov	r1, fp
 8006d58:	2300      	movs	r3, #0
 8006d5a:	220a      	movs	r2, #10
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 fe8b 	bl	8007a78 <__multadd>
 8006d62:	45b8      	cmp	r8, r7
 8006d64:	4683      	mov	fp, r0
 8006d66:	f04f 0300 	mov.w	r3, #0
 8006d6a:	f04f 020a 	mov.w	r2, #10
 8006d6e:	4641      	mov	r1, r8
 8006d70:	4620      	mov	r0, r4
 8006d72:	d107      	bne.n	8006d84 <_dtoa_r+0xb1c>
 8006d74:	f000 fe80 	bl	8007a78 <__multadd>
 8006d78:	4680      	mov	r8, r0
 8006d7a:	4607      	mov	r7, r0
 8006d7c:	9b01      	ldr	r3, [sp, #4]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	e775      	b.n	8006c70 <_dtoa_r+0xa08>
 8006d84:	f000 fe78 	bl	8007a78 <__multadd>
 8006d88:	4639      	mov	r1, r7
 8006d8a:	4680      	mov	r8, r0
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	220a      	movs	r2, #10
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 fe71 	bl	8007a78 <__multadd>
 8006d96:	4607      	mov	r7, r0
 8006d98:	e7f0      	b.n	8006d7c <_dtoa_r+0xb14>
 8006d9a:	f1b9 0f00 	cmp.w	r9, #0
 8006d9e:	9a00      	ldr	r2, [sp, #0]
 8006da0:	bfcc      	ite	gt
 8006da2:	464d      	movgt	r5, r9
 8006da4:	2501      	movle	r5, #1
 8006da6:	4415      	add	r5, r2
 8006da8:	f04f 0800 	mov.w	r8, #0
 8006dac:	4659      	mov	r1, fp
 8006dae:	2201      	movs	r2, #1
 8006db0:	4620      	mov	r0, r4
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	f001 f85a 	bl	8007e6c <__lshift>
 8006db8:	4631      	mov	r1, r6
 8006dba:	4683      	mov	fp, r0
 8006dbc:	f001 f8c2 	bl	8007f44 <__mcmp>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	dcb2      	bgt.n	8006d2a <_dtoa_r+0xac2>
 8006dc4:	d102      	bne.n	8006dcc <_dtoa_r+0xb64>
 8006dc6:	9b01      	ldr	r3, [sp, #4]
 8006dc8:	07db      	lsls	r3, r3, #31
 8006dca:	d4ae      	bmi.n	8006d2a <_dtoa_r+0xac2>
 8006dcc:	462b      	mov	r3, r5
 8006dce:	461d      	mov	r5, r3
 8006dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dd4:	2a30      	cmp	r2, #48	; 0x30
 8006dd6:	d0fa      	beq.n	8006dce <_dtoa_r+0xb66>
 8006dd8:	e6f7      	b.n	8006bca <_dtoa_r+0x962>
 8006dda:	9a00      	ldr	r2, [sp, #0]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d1a5      	bne.n	8006d2c <_dtoa_r+0xac4>
 8006de0:	f10a 0a01 	add.w	sl, sl, #1
 8006de4:	2331      	movs	r3, #49	; 0x31
 8006de6:	e779      	b.n	8006cdc <_dtoa_r+0xa74>
 8006de8:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <_dtoa_r+0xbd0>)
 8006dea:	f7ff baaf 	b.w	800634c <_dtoa_r+0xe4>
 8006dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f47f aa86 	bne.w	8006302 <_dtoa_r+0x9a>
 8006df6:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <_dtoa_r+0xbd4>)
 8006df8:	f7ff baa8 	b.w	800634c <_dtoa_r+0xe4>
 8006dfc:	f1b9 0f00 	cmp.w	r9, #0
 8006e00:	dc03      	bgt.n	8006e0a <_dtoa_r+0xba2>
 8006e02:	9b05      	ldr	r3, [sp, #20]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	f73f aec9 	bgt.w	8006b9c <_dtoa_r+0x934>
 8006e0a:	9d00      	ldr	r5, [sp, #0]
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4658      	mov	r0, fp
 8006e10:	f7ff f99c 	bl	800614c <quorem>
 8006e14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006e18:	f805 3b01 	strb.w	r3, [r5], #1
 8006e1c:	9a00      	ldr	r2, [sp, #0]
 8006e1e:	1aaa      	subs	r2, r5, r2
 8006e20:	4591      	cmp	r9, r2
 8006e22:	ddba      	ble.n	8006d9a <_dtoa_r+0xb32>
 8006e24:	4659      	mov	r1, fp
 8006e26:	2300      	movs	r3, #0
 8006e28:	220a      	movs	r2, #10
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 fe24 	bl	8007a78 <__multadd>
 8006e30:	4683      	mov	fp, r0
 8006e32:	e7eb      	b.n	8006e0c <_dtoa_r+0xba4>
 8006e34:	0800a86c 	.word	0x0800a86c
 8006e38:	0800a668 	.word	0x0800a668
 8006e3c:	0800a7e9 	.word	0x0800a7e9

08006e40 <__sflush_r>:
 8006e40:	898a      	ldrh	r2, [r1, #12]
 8006e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e46:	4605      	mov	r5, r0
 8006e48:	0710      	lsls	r0, r2, #28
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	d458      	bmi.n	8006f00 <__sflush_r+0xc0>
 8006e4e:	684b      	ldr	r3, [r1, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	dc05      	bgt.n	8006e60 <__sflush_r+0x20>
 8006e54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	dc02      	bgt.n	8006e60 <__sflush_r+0x20>
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e62:	2e00      	cmp	r6, #0
 8006e64:	d0f9      	beq.n	8006e5a <__sflush_r+0x1a>
 8006e66:	2300      	movs	r3, #0
 8006e68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e6c:	682f      	ldr	r7, [r5, #0]
 8006e6e:	602b      	str	r3, [r5, #0]
 8006e70:	d032      	beq.n	8006ed8 <__sflush_r+0x98>
 8006e72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	075a      	lsls	r2, r3, #29
 8006e78:	d505      	bpl.n	8006e86 <__sflush_r+0x46>
 8006e7a:	6863      	ldr	r3, [r4, #4]
 8006e7c:	1ac0      	subs	r0, r0, r3
 8006e7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e80:	b10b      	cbz	r3, 8006e86 <__sflush_r+0x46>
 8006e82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e84:	1ac0      	subs	r0, r0, r3
 8006e86:	2300      	movs	r3, #0
 8006e88:	4602      	mov	r2, r0
 8006e8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e8c:	6a21      	ldr	r1, [r4, #32]
 8006e8e:	4628      	mov	r0, r5
 8006e90:	47b0      	blx	r6
 8006e92:	1c43      	adds	r3, r0, #1
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	d106      	bne.n	8006ea6 <__sflush_r+0x66>
 8006e98:	6829      	ldr	r1, [r5, #0]
 8006e9a:	291d      	cmp	r1, #29
 8006e9c:	d82c      	bhi.n	8006ef8 <__sflush_r+0xb8>
 8006e9e:	4a2a      	ldr	r2, [pc, #168]	; (8006f48 <__sflush_r+0x108>)
 8006ea0:	40ca      	lsrs	r2, r1
 8006ea2:	07d6      	lsls	r6, r2, #31
 8006ea4:	d528      	bpl.n	8006ef8 <__sflush_r+0xb8>
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	6062      	str	r2, [r4, #4]
 8006eaa:	04d9      	lsls	r1, r3, #19
 8006eac:	6922      	ldr	r2, [r4, #16]
 8006eae:	6022      	str	r2, [r4, #0]
 8006eb0:	d504      	bpl.n	8006ebc <__sflush_r+0x7c>
 8006eb2:	1c42      	adds	r2, r0, #1
 8006eb4:	d101      	bne.n	8006eba <__sflush_r+0x7a>
 8006eb6:	682b      	ldr	r3, [r5, #0]
 8006eb8:	b903      	cbnz	r3, 8006ebc <__sflush_r+0x7c>
 8006eba:	6560      	str	r0, [r4, #84]	; 0x54
 8006ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ebe:	602f      	str	r7, [r5, #0]
 8006ec0:	2900      	cmp	r1, #0
 8006ec2:	d0ca      	beq.n	8006e5a <__sflush_r+0x1a>
 8006ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ec8:	4299      	cmp	r1, r3
 8006eca:	d002      	beq.n	8006ed2 <__sflush_r+0x92>
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f001 fa3b 	bl	8008348 <_free_r>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	6360      	str	r0, [r4, #52]	; 0x34
 8006ed6:	e7c1      	b.n	8006e5c <__sflush_r+0x1c>
 8006ed8:	6a21      	ldr	r1, [r4, #32]
 8006eda:	2301      	movs	r3, #1
 8006edc:	4628      	mov	r0, r5
 8006ede:	47b0      	blx	r6
 8006ee0:	1c41      	adds	r1, r0, #1
 8006ee2:	d1c7      	bne.n	8006e74 <__sflush_r+0x34>
 8006ee4:	682b      	ldr	r3, [r5, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0c4      	beq.n	8006e74 <__sflush_r+0x34>
 8006eea:	2b1d      	cmp	r3, #29
 8006eec:	d001      	beq.n	8006ef2 <__sflush_r+0xb2>
 8006eee:	2b16      	cmp	r3, #22
 8006ef0:	d101      	bne.n	8006ef6 <__sflush_r+0xb6>
 8006ef2:	602f      	str	r7, [r5, #0]
 8006ef4:	e7b1      	b.n	8006e5a <__sflush_r+0x1a>
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006efc:	81a3      	strh	r3, [r4, #12]
 8006efe:	e7ad      	b.n	8006e5c <__sflush_r+0x1c>
 8006f00:	690f      	ldr	r7, [r1, #16]
 8006f02:	2f00      	cmp	r7, #0
 8006f04:	d0a9      	beq.n	8006e5a <__sflush_r+0x1a>
 8006f06:	0793      	lsls	r3, r2, #30
 8006f08:	680e      	ldr	r6, [r1, #0]
 8006f0a:	bf08      	it	eq
 8006f0c:	694b      	ldreq	r3, [r1, #20]
 8006f0e:	600f      	str	r7, [r1, #0]
 8006f10:	bf18      	it	ne
 8006f12:	2300      	movne	r3, #0
 8006f14:	eba6 0807 	sub.w	r8, r6, r7
 8006f18:	608b      	str	r3, [r1, #8]
 8006f1a:	f1b8 0f00 	cmp.w	r8, #0
 8006f1e:	dd9c      	ble.n	8006e5a <__sflush_r+0x1a>
 8006f20:	6a21      	ldr	r1, [r4, #32]
 8006f22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f24:	4643      	mov	r3, r8
 8006f26:	463a      	mov	r2, r7
 8006f28:	4628      	mov	r0, r5
 8006f2a:	47b0      	blx	r6
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	dc06      	bgt.n	8006f3e <__sflush_r+0xfe>
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f36:	81a3      	strh	r3, [r4, #12]
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3c:	e78e      	b.n	8006e5c <__sflush_r+0x1c>
 8006f3e:	4407      	add	r7, r0
 8006f40:	eba8 0800 	sub.w	r8, r8, r0
 8006f44:	e7e9      	b.n	8006f1a <__sflush_r+0xda>
 8006f46:	bf00      	nop
 8006f48:	20400001 	.word	0x20400001

08006f4c <_fflush_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	690b      	ldr	r3, [r1, #16]
 8006f50:	4605      	mov	r5, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	b913      	cbnz	r3, 8006f5c <_fflush_r+0x10>
 8006f56:	2500      	movs	r5, #0
 8006f58:	4628      	mov	r0, r5
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	b118      	cbz	r0, 8006f66 <_fflush_r+0x1a>
 8006f5e:	6983      	ldr	r3, [r0, #24]
 8006f60:	b90b      	cbnz	r3, 8006f66 <_fflush_r+0x1a>
 8006f62:	f000 f887 	bl	8007074 <__sinit>
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <_fflush_r+0x6c>)
 8006f68:	429c      	cmp	r4, r3
 8006f6a:	d11b      	bne.n	8006fa4 <_fflush_r+0x58>
 8006f6c:	686c      	ldr	r4, [r5, #4]
 8006f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0ef      	beq.n	8006f56 <_fflush_r+0xa>
 8006f76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f78:	07d0      	lsls	r0, r2, #31
 8006f7a:	d404      	bmi.n	8006f86 <_fflush_r+0x3a>
 8006f7c:	0599      	lsls	r1, r3, #22
 8006f7e:	d402      	bmi.n	8006f86 <_fflush_r+0x3a>
 8006f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f82:	f000 fc88 	bl	8007896 <__retarget_lock_acquire_recursive>
 8006f86:	4628      	mov	r0, r5
 8006f88:	4621      	mov	r1, r4
 8006f8a:	f7ff ff59 	bl	8006e40 <__sflush_r>
 8006f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f90:	07da      	lsls	r2, r3, #31
 8006f92:	4605      	mov	r5, r0
 8006f94:	d4e0      	bmi.n	8006f58 <_fflush_r+0xc>
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	059b      	lsls	r3, r3, #22
 8006f9a:	d4dd      	bmi.n	8006f58 <_fflush_r+0xc>
 8006f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f9e:	f000 fc7b 	bl	8007898 <__retarget_lock_release_recursive>
 8006fa2:	e7d9      	b.n	8006f58 <_fflush_r+0xc>
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <_fflush_r+0x70>)
 8006fa6:	429c      	cmp	r4, r3
 8006fa8:	d101      	bne.n	8006fae <_fflush_r+0x62>
 8006faa:	68ac      	ldr	r4, [r5, #8]
 8006fac:	e7df      	b.n	8006f6e <_fflush_r+0x22>
 8006fae:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <_fflush_r+0x74>)
 8006fb0:	429c      	cmp	r4, r3
 8006fb2:	bf08      	it	eq
 8006fb4:	68ec      	ldreq	r4, [r5, #12]
 8006fb6:	e7da      	b.n	8006f6e <_fflush_r+0x22>
 8006fb8:	0800a8a0 	.word	0x0800a8a0
 8006fbc:	0800a8c0 	.word	0x0800a8c0
 8006fc0:	0800a880 	.word	0x0800a880

08006fc4 <std>:
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	b510      	push	{r4, lr}
 8006fc8:	4604      	mov	r4, r0
 8006fca:	e9c0 3300 	strd	r3, r3, [r0]
 8006fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fd2:	6083      	str	r3, [r0, #8]
 8006fd4:	8181      	strh	r1, [r0, #12]
 8006fd6:	6643      	str	r3, [r0, #100]	; 0x64
 8006fd8:	81c2      	strh	r2, [r0, #14]
 8006fda:	6183      	str	r3, [r0, #24]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	2208      	movs	r2, #8
 8006fe0:	305c      	adds	r0, #92	; 0x5c
 8006fe2:	f7fd fa7b 	bl	80044dc <memset>
 8006fe6:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <std+0x38>)
 8006fe8:	6263      	str	r3, [r4, #36]	; 0x24
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <std+0x3c>)
 8006fec:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fee:	4b05      	ldr	r3, [pc, #20]	; (8007004 <std+0x40>)
 8006ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ff2:	4b05      	ldr	r3, [pc, #20]	; (8007008 <std+0x44>)
 8006ff4:	6224      	str	r4, [r4, #32]
 8006ff6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ff8:	bd10      	pop	{r4, pc}
 8006ffa:	bf00      	nop
 8006ffc:	08008a39 	.word	0x08008a39
 8007000:	08008a5b 	.word	0x08008a5b
 8007004:	08008a93 	.word	0x08008a93
 8007008:	08008ab7 	.word	0x08008ab7

0800700c <_cleanup_r>:
 800700c:	4901      	ldr	r1, [pc, #4]	; (8007014 <_cleanup_r+0x8>)
 800700e:	f000 b8af 	b.w	8007170 <_fwalk_reent>
 8007012:	bf00      	nop
 8007014:	08006f4d 	.word	0x08006f4d

08007018 <__sfmoreglue>:
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	1e4a      	subs	r2, r1, #1
 800701c:	2568      	movs	r5, #104	; 0x68
 800701e:	4355      	muls	r5, r2
 8007020:	460e      	mov	r6, r1
 8007022:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007026:	f001 f9df 	bl	80083e8 <_malloc_r>
 800702a:	4604      	mov	r4, r0
 800702c:	b140      	cbz	r0, 8007040 <__sfmoreglue+0x28>
 800702e:	2100      	movs	r1, #0
 8007030:	e9c0 1600 	strd	r1, r6, [r0]
 8007034:	300c      	adds	r0, #12
 8007036:	60a0      	str	r0, [r4, #8]
 8007038:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800703c:	f7fd fa4e 	bl	80044dc <memset>
 8007040:	4620      	mov	r0, r4
 8007042:	bd70      	pop	{r4, r5, r6, pc}

08007044 <__sfp_lock_acquire>:
 8007044:	4801      	ldr	r0, [pc, #4]	; (800704c <__sfp_lock_acquire+0x8>)
 8007046:	f000 bc26 	b.w	8007896 <__retarget_lock_acquire_recursive>
 800704a:	bf00      	nop
 800704c:	20000304 	.word	0x20000304

08007050 <__sfp_lock_release>:
 8007050:	4801      	ldr	r0, [pc, #4]	; (8007058 <__sfp_lock_release+0x8>)
 8007052:	f000 bc21 	b.w	8007898 <__retarget_lock_release_recursive>
 8007056:	bf00      	nop
 8007058:	20000304 	.word	0x20000304

0800705c <__sinit_lock_acquire>:
 800705c:	4801      	ldr	r0, [pc, #4]	; (8007064 <__sinit_lock_acquire+0x8>)
 800705e:	f000 bc1a 	b.w	8007896 <__retarget_lock_acquire_recursive>
 8007062:	bf00      	nop
 8007064:	200002ff 	.word	0x200002ff

08007068 <__sinit_lock_release>:
 8007068:	4801      	ldr	r0, [pc, #4]	; (8007070 <__sinit_lock_release+0x8>)
 800706a:	f000 bc15 	b.w	8007898 <__retarget_lock_release_recursive>
 800706e:	bf00      	nop
 8007070:	200002ff 	.word	0x200002ff

08007074 <__sinit>:
 8007074:	b510      	push	{r4, lr}
 8007076:	4604      	mov	r4, r0
 8007078:	f7ff fff0 	bl	800705c <__sinit_lock_acquire>
 800707c:	69a3      	ldr	r3, [r4, #24]
 800707e:	b11b      	cbz	r3, 8007088 <__sinit+0x14>
 8007080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007084:	f7ff bff0 	b.w	8007068 <__sinit_lock_release>
 8007088:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800708c:	6523      	str	r3, [r4, #80]	; 0x50
 800708e:	4b13      	ldr	r3, [pc, #76]	; (80070dc <__sinit+0x68>)
 8007090:	4a13      	ldr	r2, [pc, #76]	; (80070e0 <__sinit+0x6c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	62a2      	str	r2, [r4, #40]	; 0x28
 8007096:	42a3      	cmp	r3, r4
 8007098:	bf04      	itt	eq
 800709a:	2301      	moveq	r3, #1
 800709c:	61a3      	streq	r3, [r4, #24]
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 f820 	bl	80070e4 <__sfp>
 80070a4:	6060      	str	r0, [r4, #4]
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 f81c 	bl	80070e4 <__sfp>
 80070ac:	60a0      	str	r0, [r4, #8]
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 f818 	bl	80070e4 <__sfp>
 80070b4:	2200      	movs	r2, #0
 80070b6:	60e0      	str	r0, [r4, #12]
 80070b8:	2104      	movs	r1, #4
 80070ba:	6860      	ldr	r0, [r4, #4]
 80070bc:	f7ff ff82 	bl	8006fc4 <std>
 80070c0:	68a0      	ldr	r0, [r4, #8]
 80070c2:	2201      	movs	r2, #1
 80070c4:	2109      	movs	r1, #9
 80070c6:	f7ff ff7d 	bl	8006fc4 <std>
 80070ca:	68e0      	ldr	r0, [r4, #12]
 80070cc:	2202      	movs	r2, #2
 80070ce:	2112      	movs	r1, #18
 80070d0:	f7ff ff78 	bl	8006fc4 <std>
 80070d4:	2301      	movs	r3, #1
 80070d6:	61a3      	str	r3, [r4, #24]
 80070d8:	e7d2      	b.n	8007080 <__sinit+0xc>
 80070da:	bf00      	nop
 80070dc:	0800a654 	.word	0x0800a654
 80070e0:	0800700d 	.word	0x0800700d

080070e4 <__sfp>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	4607      	mov	r7, r0
 80070e8:	f7ff ffac 	bl	8007044 <__sfp_lock_acquire>
 80070ec:	4b1e      	ldr	r3, [pc, #120]	; (8007168 <__sfp+0x84>)
 80070ee:	681e      	ldr	r6, [r3, #0]
 80070f0:	69b3      	ldr	r3, [r6, #24]
 80070f2:	b913      	cbnz	r3, 80070fa <__sfp+0x16>
 80070f4:	4630      	mov	r0, r6
 80070f6:	f7ff ffbd 	bl	8007074 <__sinit>
 80070fa:	3648      	adds	r6, #72	; 0x48
 80070fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007100:	3b01      	subs	r3, #1
 8007102:	d503      	bpl.n	800710c <__sfp+0x28>
 8007104:	6833      	ldr	r3, [r6, #0]
 8007106:	b30b      	cbz	r3, 800714c <__sfp+0x68>
 8007108:	6836      	ldr	r6, [r6, #0]
 800710a:	e7f7      	b.n	80070fc <__sfp+0x18>
 800710c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007110:	b9d5      	cbnz	r5, 8007148 <__sfp+0x64>
 8007112:	4b16      	ldr	r3, [pc, #88]	; (800716c <__sfp+0x88>)
 8007114:	60e3      	str	r3, [r4, #12]
 8007116:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800711a:	6665      	str	r5, [r4, #100]	; 0x64
 800711c:	f000 fbba 	bl	8007894 <__retarget_lock_init_recursive>
 8007120:	f7ff ff96 	bl	8007050 <__sfp_lock_release>
 8007124:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007128:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800712c:	6025      	str	r5, [r4, #0]
 800712e:	61a5      	str	r5, [r4, #24]
 8007130:	2208      	movs	r2, #8
 8007132:	4629      	mov	r1, r5
 8007134:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007138:	f7fd f9d0 	bl	80044dc <memset>
 800713c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007140:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007144:	4620      	mov	r0, r4
 8007146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007148:	3468      	adds	r4, #104	; 0x68
 800714a:	e7d9      	b.n	8007100 <__sfp+0x1c>
 800714c:	2104      	movs	r1, #4
 800714e:	4638      	mov	r0, r7
 8007150:	f7ff ff62 	bl	8007018 <__sfmoreglue>
 8007154:	4604      	mov	r4, r0
 8007156:	6030      	str	r0, [r6, #0]
 8007158:	2800      	cmp	r0, #0
 800715a:	d1d5      	bne.n	8007108 <__sfp+0x24>
 800715c:	f7ff ff78 	bl	8007050 <__sfp_lock_release>
 8007160:	230c      	movs	r3, #12
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	e7ee      	b.n	8007144 <__sfp+0x60>
 8007166:	bf00      	nop
 8007168:	0800a654 	.word	0x0800a654
 800716c:	ffff0001 	.word	0xffff0001

08007170 <_fwalk_reent>:
 8007170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007174:	4606      	mov	r6, r0
 8007176:	4688      	mov	r8, r1
 8007178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800717c:	2700      	movs	r7, #0
 800717e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007182:	f1b9 0901 	subs.w	r9, r9, #1
 8007186:	d505      	bpl.n	8007194 <_fwalk_reent+0x24>
 8007188:	6824      	ldr	r4, [r4, #0]
 800718a:	2c00      	cmp	r4, #0
 800718c:	d1f7      	bne.n	800717e <_fwalk_reent+0xe>
 800718e:	4638      	mov	r0, r7
 8007190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007194:	89ab      	ldrh	r3, [r5, #12]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d907      	bls.n	80071aa <_fwalk_reent+0x3a>
 800719a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800719e:	3301      	adds	r3, #1
 80071a0:	d003      	beq.n	80071aa <_fwalk_reent+0x3a>
 80071a2:	4629      	mov	r1, r5
 80071a4:	4630      	mov	r0, r6
 80071a6:	47c0      	blx	r8
 80071a8:	4307      	orrs	r7, r0
 80071aa:	3568      	adds	r5, #104	; 0x68
 80071ac:	e7e9      	b.n	8007182 <_fwalk_reent+0x12>

080071ae <rshift>:
 80071ae:	6903      	ldr	r3, [r0, #16]
 80071b0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80071b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071b8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80071bc:	f100 0414 	add.w	r4, r0, #20
 80071c0:	dd45      	ble.n	800724e <rshift+0xa0>
 80071c2:	f011 011f 	ands.w	r1, r1, #31
 80071c6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80071ca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80071ce:	d10c      	bne.n	80071ea <rshift+0x3c>
 80071d0:	f100 0710 	add.w	r7, r0, #16
 80071d4:	4629      	mov	r1, r5
 80071d6:	42b1      	cmp	r1, r6
 80071d8:	d334      	bcc.n	8007244 <rshift+0x96>
 80071da:	1a9b      	subs	r3, r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	1eea      	subs	r2, r5, #3
 80071e0:	4296      	cmp	r6, r2
 80071e2:	bf38      	it	cc
 80071e4:	2300      	movcc	r3, #0
 80071e6:	4423      	add	r3, r4
 80071e8:	e015      	b.n	8007216 <rshift+0x68>
 80071ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80071ee:	f1c1 0820 	rsb	r8, r1, #32
 80071f2:	40cf      	lsrs	r7, r1
 80071f4:	f105 0e04 	add.w	lr, r5, #4
 80071f8:	46a1      	mov	r9, r4
 80071fa:	4576      	cmp	r6, lr
 80071fc:	46f4      	mov	ip, lr
 80071fe:	d815      	bhi.n	800722c <rshift+0x7e>
 8007200:	1a9b      	subs	r3, r3, r2
 8007202:	009a      	lsls	r2, r3, #2
 8007204:	3a04      	subs	r2, #4
 8007206:	3501      	adds	r5, #1
 8007208:	42ae      	cmp	r6, r5
 800720a:	bf38      	it	cc
 800720c:	2200      	movcc	r2, #0
 800720e:	18a3      	adds	r3, r4, r2
 8007210:	50a7      	str	r7, [r4, r2]
 8007212:	b107      	cbz	r7, 8007216 <rshift+0x68>
 8007214:	3304      	adds	r3, #4
 8007216:	1b1a      	subs	r2, r3, r4
 8007218:	42a3      	cmp	r3, r4
 800721a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800721e:	bf08      	it	eq
 8007220:	2300      	moveq	r3, #0
 8007222:	6102      	str	r2, [r0, #16]
 8007224:	bf08      	it	eq
 8007226:	6143      	streq	r3, [r0, #20]
 8007228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800722c:	f8dc c000 	ldr.w	ip, [ip]
 8007230:	fa0c fc08 	lsl.w	ip, ip, r8
 8007234:	ea4c 0707 	orr.w	r7, ip, r7
 8007238:	f849 7b04 	str.w	r7, [r9], #4
 800723c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007240:	40cf      	lsrs	r7, r1
 8007242:	e7da      	b.n	80071fa <rshift+0x4c>
 8007244:	f851 cb04 	ldr.w	ip, [r1], #4
 8007248:	f847 cf04 	str.w	ip, [r7, #4]!
 800724c:	e7c3      	b.n	80071d6 <rshift+0x28>
 800724e:	4623      	mov	r3, r4
 8007250:	e7e1      	b.n	8007216 <rshift+0x68>

08007252 <__hexdig_fun>:
 8007252:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007256:	2b09      	cmp	r3, #9
 8007258:	d802      	bhi.n	8007260 <__hexdig_fun+0xe>
 800725a:	3820      	subs	r0, #32
 800725c:	b2c0      	uxtb	r0, r0
 800725e:	4770      	bx	lr
 8007260:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007264:	2b05      	cmp	r3, #5
 8007266:	d801      	bhi.n	800726c <__hexdig_fun+0x1a>
 8007268:	3847      	subs	r0, #71	; 0x47
 800726a:	e7f7      	b.n	800725c <__hexdig_fun+0xa>
 800726c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007270:	2b05      	cmp	r3, #5
 8007272:	d801      	bhi.n	8007278 <__hexdig_fun+0x26>
 8007274:	3827      	subs	r0, #39	; 0x27
 8007276:	e7f1      	b.n	800725c <__hexdig_fun+0xa>
 8007278:	2000      	movs	r0, #0
 800727a:	4770      	bx	lr

0800727c <__gethex>:
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	ed2d 8b02 	vpush	{d8}
 8007284:	b089      	sub	sp, #36	; 0x24
 8007286:	ee08 0a10 	vmov	s16, r0
 800728a:	9304      	str	r3, [sp, #16]
 800728c:	4bbc      	ldr	r3, [pc, #752]	; (8007580 <__gethex+0x304>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	9301      	str	r3, [sp, #4]
 8007292:	4618      	mov	r0, r3
 8007294:	468b      	mov	fp, r1
 8007296:	4690      	mov	r8, r2
 8007298:	f7f8 ffaa 	bl	80001f0 <strlen>
 800729c:	9b01      	ldr	r3, [sp, #4]
 800729e:	f8db 2000 	ldr.w	r2, [fp]
 80072a2:	4403      	add	r3, r0
 80072a4:	4682      	mov	sl, r0
 80072a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80072aa:	9305      	str	r3, [sp, #20]
 80072ac:	1c93      	adds	r3, r2, #2
 80072ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80072b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80072b6:	32fe      	adds	r2, #254	; 0xfe
 80072b8:	18d1      	adds	r1, r2, r3
 80072ba:	461f      	mov	r7, r3
 80072bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80072c0:	9100      	str	r1, [sp, #0]
 80072c2:	2830      	cmp	r0, #48	; 0x30
 80072c4:	d0f8      	beq.n	80072b8 <__gethex+0x3c>
 80072c6:	f7ff ffc4 	bl	8007252 <__hexdig_fun>
 80072ca:	4604      	mov	r4, r0
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d13a      	bne.n	8007346 <__gethex+0xca>
 80072d0:	9901      	ldr	r1, [sp, #4]
 80072d2:	4652      	mov	r2, sl
 80072d4:	4638      	mov	r0, r7
 80072d6:	f001 fbf2 	bl	8008abe <strncmp>
 80072da:	4605      	mov	r5, r0
 80072dc:	2800      	cmp	r0, #0
 80072de:	d168      	bne.n	80073b2 <__gethex+0x136>
 80072e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80072e4:	eb07 060a 	add.w	r6, r7, sl
 80072e8:	f7ff ffb3 	bl	8007252 <__hexdig_fun>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d062      	beq.n	80073b6 <__gethex+0x13a>
 80072f0:	4633      	mov	r3, r6
 80072f2:	7818      	ldrb	r0, [r3, #0]
 80072f4:	2830      	cmp	r0, #48	; 0x30
 80072f6:	461f      	mov	r7, r3
 80072f8:	f103 0301 	add.w	r3, r3, #1
 80072fc:	d0f9      	beq.n	80072f2 <__gethex+0x76>
 80072fe:	f7ff ffa8 	bl	8007252 <__hexdig_fun>
 8007302:	2301      	movs	r3, #1
 8007304:	fab0 f480 	clz	r4, r0
 8007308:	0964      	lsrs	r4, r4, #5
 800730a:	4635      	mov	r5, r6
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	463a      	mov	r2, r7
 8007310:	4616      	mov	r6, r2
 8007312:	3201      	adds	r2, #1
 8007314:	7830      	ldrb	r0, [r6, #0]
 8007316:	f7ff ff9c 	bl	8007252 <__hexdig_fun>
 800731a:	2800      	cmp	r0, #0
 800731c:	d1f8      	bne.n	8007310 <__gethex+0x94>
 800731e:	9901      	ldr	r1, [sp, #4]
 8007320:	4652      	mov	r2, sl
 8007322:	4630      	mov	r0, r6
 8007324:	f001 fbcb 	bl	8008abe <strncmp>
 8007328:	b980      	cbnz	r0, 800734c <__gethex+0xd0>
 800732a:	b94d      	cbnz	r5, 8007340 <__gethex+0xc4>
 800732c:	eb06 050a 	add.w	r5, r6, sl
 8007330:	462a      	mov	r2, r5
 8007332:	4616      	mov	r6, r2
 8007334:	3201      	adds	r2, #1
 8007336:	7830      	ldrb	r0, [r6, #0]
 8007338:	f7ff ff8b 	bl	8007252 <__hexdig_fun>
 800733c:	2800      	cmp	r0, #0
 800733e:	d1f8      	bne.n	8007332 <__gethex+0xb6>
 8007340:	1bad      	subs	r5, r5, r6
 8007342:	00ad      	lsls	r5, r5, #2
 8007344:	e004      	b.n	8007350 <__gethex+0xd4>
 8007346:	2400      	movs	r4, #0
 8007348:	4625      	mov	r5, r4
 800734a:	e7e0      	b.n	800730e <__gethex+0x92>
 800734c:	2d00      	cmp	r5, #0
 800734e:	d1f7      	bne.n	8007340 <__gethex+0xc4>
 8007350:	7833      	ldrb	r3, [r6, #0]
 8007352:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007356:	2b50      	cmp	r3, #80	; 0x50
 8007358:	d13b      	bne.n	80073d2 <__gethex+0x156>
 800735a:	7873      	ldrb	r3, [r6, #1]
 800735c:	2b2b      	cmp	r3, #43	; 0x2b
 800735e:	d02c      	beq.n	80073ba <__gethex+0x13e>
 8007360:	2b2d      	cmp	r3, #45	; 0x2d
 8007362:	d02e      	beq.n	80073c2 <__gethex+0x146>
 8007364:	1c71      	adds	r1, r6, #1
 8007366:	f04f 0900 	mov.w	r9, #0
 800736a:	7808      	ldrb	r0, [r1, #0]
 800736c:	f7ff ff71 	bl	8007252 <__hexdig_fun>
 8007370:	1e43      	subs	r3, r0, #1
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b18      	cmp	r3, #24
 8007376:	d82c      	bhi.n	80073d2 <__gethex+0x156>
 8007378:	f1a0 0210 	sub.w	r2, r0, #16
 800737c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007380:	f7ff ff67 	bl	8007252 <__hexdig_fun>
 8007384:	1e43      	subs	r3, r0, #1
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b18      	cmp	r3, #24
 800738a:	d91d      	bls.n	80073c8 <__gethex+0x14c>
 800738c:	f1b9 0f00 	cmp.w	r9, #0
 8007390:	d000      	beq.n	8007394 <__gethex+0x118>
 8007392:	4252      	negs	r2, r2
 8007394:	4415      	add	r5, r2
 8007396:	f8cb 1000 	str.w	r1, [fp]
 800739a:	b1e4      	cbz	r4, 80073d6 <__gethex+0x15a>
 800739c:	9b00      	ldr	r3, [sp, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bf14      	ite	ne
 80073a2:	2700      	movne	r7, #0
 80073a4:	2706      	moveq	r7, #6
 80073a6:	4638      	mov	r0, r7
 80073a8:	b009      	add	sp, #36	; 0x24
 80073aa:	ecbd 8b02 	vpop	{d8}
 80073ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b2:	463e      	mov	r6, r7
 80073b4:	4625      	mov	r5, r4
 80073b6:	2401      	movs	r4, #1
 80073b8:	e7ca      	b.n	8007350 <__gethex+0xd4>
 80073ba:	f04f 0900 	mov.w	r9, #0
 80073be:	1cb1      	adds	r1, r6, #2
 80073c0:	e7d3      	b.n	800736a <__gethex+0xee>
 80073c2:	f04f 0901 	mov.w	r9, #1
 80073c6:	e7fa      	b.n	80073be <__gethex+0x142>
 80073c8:	230a      	movs	r3, #10
 80073ca:	fb03 0202 	mla	r2, r3, r2, r0
 80073ce:	3a10      	subs	r2, #16
 80073d0:	e7d4      	b.n	800737c <__gethex+0x100>
 80073d2:	4631      	mov	r1, r6
 80073d4:	e7df      	b.n	8007396 <__gethex+0x11a>
 80073d6:	1bf3      	subs	r3, r6, r7
 80073d8:	3b01      	subs	r3, #1
 80073da:	4621      	mov	r1, r4
 80073dc:	2b07      	cmp	r3, #7
 80073de:	dc0b      	bgt.n	80073f8 <__gethex+0x17c>
 80073e0:	ee18 0a10 	vmov	r0, s16
 80073e4:	f000 fae6 	bl	80079b4 <_Balloc>
 80073e8:	4604      	mov	r4, r0
 80073ea:	b940      	cbnz	r0, 80073fe <__gethex+0x182>
 80073ec:	4b65      	ldr	r3, [pc, #404]	; (8007584 <__gethex+0x308>)
 80073ee:	4602      	mov	r2, r0
 80073f0:	21de      	movs	r1, #222	; 0xde
 80073f2:	4865      	ldr	r0, [pc, #404]	; (8007588 <__gethex+0x30c>)
 80073f4:	f001 fc56 	bl	8008ca4 <__assert_func>
 80073f8:	3101      	adds	r1, #1
 80073fa:	105b      	asrs	r3, r3, #1
 80073fc:	e7ee      	b.n	80073dc <__gethex+0x160>
 80073fe:	f100 0914 	add.w	r9, r0, #20
 8007402:	f04f 0b00 	mov.w	fp, #0
 8007406:	f1ca 0301 	rsb	r3, sl, #1
 800740a:	f8cd 9008 	str.w	r9, [sp, #8]
 800740e:	f8cd b000 	str.w	fp, [sp]
 8007412:	9306      	str	r3, [sp, #24]
 8007414:	42b7      	cmp	r7, r6
 8007416:	d340      	bcc.n	800749a <__gethex+0x21e>
 8007418:	9802      	ldr	r0, [sp, #8]
 800741a:	9b00      	ldr	r3, [sp, #0]
 800741c:	f840 3b04 	str.w	r3, [r0], #4
 8007420:	eba0 0009 	sub.w	r0, r0, r9
 8007424:	1080      	asrs	r0, r0, #2
 8007426:	0146      	lsls	r6, r0, #5
 8007428:	6120      	str	r0, [r4, #16]
 800742a:	4618      	mov	r0, r3
 800742c:	f000 fbb8 	bl	8007ba0 <__hi0bits>
 8007430:	1a30      	subs	r0, r6, r0
 8007432:	f8d8 6000 	ldr.w	r6, [r8]
 8007436:	42b0      	cmp	r0, r6
 8007438:	dd63      	ble.n	8007502 <__gethex+0x286>
 800743a:	1b87      	subs	r7, r0, r6
 800743c:	4639      	mov	r1, r7
 800743e:	4620      	mov	r0, r4
 8007440:	f000 ff52 	bl	80082e8 <__any_on>
 8007444:	4682      	mov	sl, r0
 8007446:	b1a8      	cbz	r0, 8007474 <__gethex+0x1f8>
 8007448:	1e7b      	subs	r3, r7, #1
 800744a:	1159      	asrs	r1, r3, #5
 800744c:	f003 021f 	and.w	r2, r3, #31
 8007450:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007454:	f04f 0a01 	mov.w	sl, #1
 8007458:	fa0a f202 	lsl.w	r2, sl, r2
 800745c:	420a      	tst	r2, r1
 800745e:	d009      	beq.n	8007474 <__gethex+0x1f8>
 8007460:	4553      	cmp	r3, sl
 8007462:	dd05      	ble.n	8007470 <__gethex+0x1f4>
 8007464:	1eb9      	subs	r1, r7, #2
 8007466:	4620      	mov	r0, r4
 8007468:	f000 ff3e 	bl	80082e8 <__any_on>
 800746c:	2800      	cmp	r0, #0
 800746e:	d145      	bne.n	80074fc <__gethex+0x280>
 8007470:	f04f 0a02 	mov.w	sl, #2
 8007474:	4639      	mov	r1, r7
 8007476:	4620      	mov	r0, r4
 8007478:	f7ff fe99 	bl	80071ae <rshift>
 800747c:	443d      	add	r5, r7
 800747e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007482:	42ab      	cmp	r3, r5
 8007484:	da4c      	bge.n	8007520 <__gethex+0x2a4>
 8007486:	ee18 0a10 	vmov	r0, s16
 800748a:	4621      	mov	r1, r4
 800748c:	f000 fad2 	bl	8007a34 <_Bfree>
 8007490:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007492:	2300      	movs	r3, #0
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	27a3      	movs	r7, #163	; 0xa3
 8007498:	e785      	b.n	80073a6 <__gethex+0x12a>
 800749a:	1e73      	subs	r3, r6, #1
 800749c:	9a05      	ldr	r2, [sp, #20]
 800749e:	9303      	str	r3, [sp, #12]
 80074a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d019      	beq.n	80074dc <__gethex+0x260>
 80074a8:	f1bb 0f20 	cmp.w	fp, #32
 80074ac:	d107      	bne.n	80074be <__gethex+0x242>
 80074ae:	9b02      	ldr	r3, [sp, #8]
 80074b0:	9a00      	ldr	r2, [sp, #0]
 80074b2:	f843 2b04 	str.w	r2, [r3], #4
 80074b6:	9302      	str	r3, [sp, #8]
 80074b8:	2300      	movs	r3, #0
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	469b      	mov	fp, r3
 80074be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80074c2:	f7ff fec6 	bl	8007252 <__hexdig_fun>
 80074c6:	9b00      	ldr	r3, [sp, #0]
 80074c8:	f000 000f 	and.w	r0, r0, #15
 80074cc:	fa00 f00b 	lsl.w	r0, r0, fp
 80074d0:	4303      	orrs	r3, r0
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	f10b 0b04 	add.w	fp, fp, #4
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	e00d      	b.n	80074f8 <__gethex+0x27c>
 80074dc:	9b03      	ldr	r3, [sp, #12]
 80074de:	9a06      	ldr	r2, [sp, #24]
 80074e0:	4413      	add	r3, r2
 80074e2:	42bb      	cmp	r3, r7
 80074e4:	d3e0      	bcc.n	80074a8 <__gethex+0x22c>
 80074e6:	4618      	mov	r0, r3
 80074e8:	9901      	ldr	r1, [sp, #4]
 80074ea:	9307      	str	r3, [sp, #28]
 80074ec:	4652      	mov	r2, sl
 80074ee:	f001 fae6 	bl	8008abe <strncmp>
 80074f2:	9b07      	ldr	r3, [sp, #28]
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d1d7      	bne.n	80074a8 <__gethex+0x22c>
 80074f8:	461e      	mov	r6, r3
 80074fa:	e78b      	b.n	8007414 <__gethex+0x198>
 80074fc:	f04f 0a03 	mov.w	sl, #3
 8007500:	e7b8      	b.n	8007474 <__gethex+0x1f8>
 8007502:	da0a      	bge.n	800751a <__gethex+0x29e>
 8007504:	1a37      	subs	r7, r6, r0
 8007506:	4621      	mov	r1, r4
 8007508:	ee18 0a10 	vmov	r0, s16
 800750c:	463a      	mov	r2, r7
 800750e:	f000 fcad 	bl	8007e6c <__lshift>
 8007512:	1bed      	subs	r5, r5, r7
 8007514:	4604      	mov	r4, r0
 8007516:	f100 0914 	add.w	r9, r0, #20
 800751a:	f04f 0a00 	mov.w	sl, #0
 800751e:	e7ae      	b.n	800747e <__gethex+0x202>
 8007520:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007524:	42a8      	cmp	r0, r5
 8007526:	dd72      	ble.n	800760e <__gethex+0x392>
 8007528:	1b45      	subs	r5, r0, r5
 800752a:	42ae      	cmp	r6, r5
 800752c:	dc36      	bgt.n	800759c <__gethex+0x320>
 800752e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007532:	2b02      	cmp	r3, #2
 8007534:	d02a      	beq.n	800758c <__gethex+0x310>
 8007536:	2b03      	cmp	r3, #3
 8007538:	d02c      	beq.n	8007594 <__gethex+0x318>
 800753a:	2b01      	cmp	r3, #1
 800753c:	d115      	bne.n	800756a <__gethex+0x2ee>
 800753e:	42ae      	cmp	r6, r5
 8007540:	d113      	bne.n	800756a <__gethex+0x2ee>
 8007542:	2e01      	cmp	r6, #1
 8007544:	d10b      	bne.n	800755e <__gethex+0x2e2>
 8007546:	9a04      	ldr	r2, [sp, #16]
 8007548:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	2301      	movs	r3, #1
 8007550:	6123      	str	r3, [r4, #16]
 8007552:	f8c9 3000 	str.w	r3, [r9]
 8007556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007558:	2762      	movs	r7, #98	; 0x62
 800755a:	601c      	str	r4, [r3, #0]
 800755c:	e723      	b.n	80073a6 <__gethex+0x12a>
 800755e:	1e71      	subs	r1, r6, #1
 8007560:	4620      	mov	r0, r4
 8007562:	f000 fec1 	bl	80082e8 <__any_on>
 8007566:	2800      	cmp	r0, #0
 8007568:	d1ed      	bne.n	8007546 <__gethex+0x2ca>
 800756a:	ee18 0a10 	vmov	r0, s16
 800756e:	4621      	mov	r1, r4
 8007570:	f000 fa60 	bl	8007a34 <_Bfree>
 8007574:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007576:	2300      	movs	r3, #0
 8007578:	6013      	str	r3, [r2, #0]
 800757a:	2750      	movs	r7, #80	; 0x50
 800757c:	e713      	b.n	80073a6 <__gethex+0x12a>
 800757e:	bf00      	nop
 8007580:	0800a94c 	.word	0x0800a94c
 8007584:	0800a86c 	.word	0x0800a86c
 8007588:	0800a8e0 	.word	0x0800a8e0
 800758c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1eb      	bne.n	800756a <__gethex+0x2ee>
 8007592:	e7d8      	b.n	8007546 <__gethex+0x2ca>
 8007594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1d5      	bne.n	8007546 <__gethex+0x2ca>
 800759a:	e7e6      	b.n	800756a <__gethex+0x2ee>
 800759c:	1e6f      	subs	r7, r5, #1
 800759e:	f1ba 0f00 	cmp.w	sl, #0
 80075a2:	d131      	bne.n	8007608 <__gethex+0x38c>
 80075a4:	b127      	cbz	r7, 80075b0 <__gethex+0x334>
 80075a6:	4639      	mov	r1, r7
 80075a8:	4620      	mov	r0, r4
 80075aa:	f000 fe9d 	bl	80082e8 <__any_on>
 80075ae:	4682      	mov	sl, r0
 80075b0:	117b      	asrs	r3, r7, #5
 80075b2:	2101      	movs	r1, #1
 80075b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80075b8:	f007 071f 	and.w	r7, r7, #31
 80075bc:	fa01 f707 	lsl.w	r7, r1, r7
 80075c0:	421f      	tst	r7, r3
 80075c2:	4629      	mov	r1, r5
 80075c4:	4620      	mov	r0, r4
 80075c6:	bf18      	it	ne
 80075c8:	f04a 0a02 	orrne.w	sl, sl, #2
 80075cc:	1b76      	subs	r6, r6, r5
 80075ce:	f7ff fdee 	bl	80071ae <rshift>
 80075d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80075d6:	2702      	movs	r7, #2
 80075d8:	f1ba 0f00 	cmp.w	sl, #0
 80075dc:	d048      	beq.n	8007670 <__gethex+0x3f4>
 80075de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d015      	beq.n	8007612 <__gethex+0x396>
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d017      	beq.n	800761a <__gethex+0x39e>
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d109      	bne.n	8007602 <__gethex+0x386>
 80075ee:	f01a 0f02 	tst.w	sl, #2
 80075f2:	d006      	beq.n	8007602 <__gethex+0x386>
 80075f4:	f8d9 0000 	ldr.w	r0, [r9]
 80075f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80075fc:	f01a 0f01 	tst.w	sl, #1
 8007600:	d10e      	bne.n	8007620 <__gethex+0x3a4>
 8007602:	f047 0710 	orr.w	r7, r7, #16
 8007606:	e033      	b.n	8007670 <__gethex+0x3f4>
 8007608:	f04f 0a01 	mov.w	sl, #1
 800760c:	e7d0      	b.n	80075b0 <__gethex+0x334>
 800760e:	2701      	movs	r7, #1
 8007610:	e7e2      	b.n	80075d8 <__gethex+0x35c>
 8007612:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007614:	f1c3 0301 	rsb	r3, r3, #1
 8007618:	9315      	str	r3, [sp, #84]	; 0x54
 800761a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800761c:	2b00      	cmp	r3, #0
 800761e:	d0f0      	beq.n	8007602 <__gethex+0x386>
 8007620:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007624:	f104 0314 	add.w	r3, r4, #20
 8007628:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800762c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007630:	f04f 0c00 	mov.w	ip, #0
 8007634:	4618      	mov	r0, r3
 8007636:	f853 2b04 	ldr.w	r2, [r3], #4
 800763a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800763e:	d01c      	beq.n	800767a <__gethex+0x3fe>
 8007640:	3201      	adds	r2, #1
 8007642:	6002      	str	r2, [r0, #0]
 8007644:	2f02      	cmp	r7, #2
 8007646:	f104 0314 	add.w	r3, r4, #20
 800764a:	d13f      	bne.n	80076cc <__gethex+0x450>
 800764c:	f8d8 2000 	ldr.w	r2, [r8]
 8007650:	3a01      	subs	r2, #1
 8007652:	42b2      	cmp	r2, r6
 8007654:	d10a      	bne.n	800766c <__gethex+0x3f0>
 8007656:	1171      	asrs	r1, r6, #5
 8007658:	2201      	movs	r2, #1
 800765a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800765e:	f006 061f 	and.w	r6, r6, #31
 8007662:	fa02 f606 	lsl.w	r6, r2, r6
 8007666:	421e      	tst	r6, r3
 8007668:	bf18      	it	ne
 800766a:	4617      	movne	r7, r2
 800766c:	f047 0720 	orr.w	r7, r7, #32
 8007670:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007672:	601c      	str	r4, [r3, #0]
 8007674:	9b04      	ldr	r3, [sp, #16]
 8007676:	601d      	str	r5, [r3, #0]
 8007678:	e695      	b.n	80073a6 <__gethex+0x12a>
 800767a:	4299      	cmp	r1, r3
 800767c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007680:	d8d8      	bhi.n	8007634 <__gethex+0x3b8>
 8007682:	68a3      	ldr	r3, [r4, #8]
 8007684:	459b      	cmp	fp, r3
 8007686:	db19      	blt.n	80076bc <__gethex+0x440>
 8007688:	6861      	ldr	r1, [r4, #4]
 800768a:	ee18 0a10 	vmov	r0, s16
 800768e:	3101      	adds	r1, #1
 8007690:	f000 f990 	bl	80079b4 <_Balloc>
 8007694:	4681      	mov	r9, r0
 8007696:	b918      	cbnz	r0, 80076a0 <__gethex+0x424>
 8007698:	4b1a      	ldr	r3, [pc, #104]	; (8007704 <__gethex+0x488>)
 800769a:	4602      	mov	r2, r0
 800769c:	2184      	movs	r1, #132	; 0x84
 800769e:	e6a8      	b.n	80073f2 <__gethex+0x176>
 80076a0:	6922      	ldr	r2, [r4, #16]
 80076a2:	3202      	adds	r2, #2
 80076a4:	f104 010c 	add.w	r1, r4, #12
 80076a8:	0092      	lsls	r2, r2, #2
 80076aa:	300c      	adds	r0, #12
 80076ac:	f000 f974 	bl	8007998 <memcpy>
 80076b0:	4621      	mov	r1, r4
 80076b2:	ee18 0a10 	vmov	r0, s16
 80076b6:	f000 f9bd 	bl	8007a34 <_Bfree>
 80076ba:	464c      	mov	r4, r9
 80076bc:	6923      	ldr	r3, [r4, #16]
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80076c4:	6122      	str	r2, [r4, #16]
 80076c6:	2201      	movs	r2, #1
 80076c8:	615a      	str	r2, [r3, #20]
 80076ca:	e7bb      	b.n	8007644 <__gethex+0x3c8>
 80076cc:	6922      	ldr	r2, [r4, #16]
 80076ce:	455a      	cmp	r2, fp
 80076d0:	dd0b      	ble.n	80076ea <__gethex+0x46e>
 80076d2:	2101      	movs	r1, #1
 80076d4:	4620      	mov	r0, r4
 80076d6:	f7ff fd6a 	bl	80071ae <rshift>
 80076da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076de:	3501      	adds	r5, #1
 80076e0:	42ab      	cmp	r3, r5
 80076e2:	f6ff aed0 	blt.w	8007486 <__gethex+0x20a>
 80076e6:	2701      	movs	r7, #1
 80076e8:	e7c0      	b.n	800766c <__gethex+0x3f0>
 80076ea:	f016 061f 	ands.w	r6, r6, #31
 80076ee:	d0fa      	beq.n	80076e6 <__gethex+0x46a>
 80076f0:	449a      	add	sl, r3
 80076f2:	f1c6 0620 	rsb	r6, r6, #32
 80076f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80076fa:	f000 fa51 	bl	8007ba0 <__hi0bits>
 80076fe:	42b0      	cmp	r0, r6
 8007700:	dbe7      	blt.n	80076d2 <__gethex+0x456>
 8007702:	e7f0      	b.n	80076e6 <__gethex+0x46a>
 8007704:	0800a86c 	.word	0x0800a86c

08007708 <L_shift>:
 8007708:	f1c2 0208 	rsb	r2, r2, #8
 800770c:	0092      	lsls	r2, r2, #2
 800770e:	b570      	push	{r4, r5, r6, lr}
 8007710:	f1c2 0620 	rsb	r6, r2, #32
 8007714:	6843      	ldr	r3, [r0, #4]
 8007716:	6804      	ldr	r4, [r0, #0]
 8007718:	fa03 f506 	lsl.w	r5, r3, r6
 800771c:	432c      	orrs	r4, r5
 800771e:	40d3      	lsrs	r3, r2
 8007720:	6004      	str	r4, [r0, #0]
 8007722:	f840 3f04 	str.w	r3, [r0, #4]!
 8007726:	4288      	cmp	r0, r1
 8007728:	d3f4      	bcc.n	8007714 <L_shift+0xc>
 800772a:	bd70      	pop	{r4, r5, r6, pc}

0800772c <__match>:
 800772c:	b530      	push	{r4, r5, lr}
 800772e:	6803      	ldr	r3, [r0, #0]
 8007730:	3301      	adds	r3, #1
 8007732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007736:	b914      	cbnz	r4, 800773e <__match+0x12>
 8007738:	6003      	str	r3, [r0, #0]
 800773a:	2001      	movs	r0, #1
 800773c:	bd30      	pop	{r4, r5, pc}
 800773e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007742:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007746:	2d19      	cmp	r5, #25
 8007748:	bf98      	it	ls
 800774a:	3220      	addls	r2, #32
 800774c:	42a2      	cmp	r2, r4
 800774e:	d0f0      	beq.n	8007732 <__match+0x6>
 8007750:	2000      	movs	r0, #0
 8007752:	e7f3      	b.n	800773c <__match+0x10>

08007754 <__hexnan>:
 8007754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007758:	680b      	ldr	r3, [r1, #0]
 800775a:	6801      	ldr	r1, [r0, #0]
 800775c:	115e      	asrs	r6, r3, #5
 800775e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007762:	f013 031f 	ands.w	r3, r3, #31
 8007766:	b087      	sub	sp, #28
 8007768:	bf18      	it	ne
 800776a:	3604      	addne	r6, #4
 800776c:	2500      	movs	r5, #0
 800776e:	1f37      	subs	r7, r6, #4
 8007770:	4682      	mov	sl, r0
 8007772:	4690      	mov	r8, r2
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	f846 5c04 	str.w	r5, [r6, #-4]
 800777a:	46b9      	mov	r9, r7
 800777c:	463c      	mov	r4, r7
 800777e:	9502      	str	r5, [sp, #8]
 8007780:	46ab      	mov	fp, r5
 8007782:	784a      	ldrb	r2, [r1, #1]
 8007784:	1c4b      	adds	r3, r1, #1
 8007786:	9303      	str	r3, [sp, #12]
 8007788:	b342      	cbz	r2, 80077dc <__hexnan+0x88>
 800778a:	4610      	mov	r0, r2
 800778c:	9105      	str	r1, [sp, #20]
 800778e:	9204      	str	r2, [sp, #16]
 8007790:	f7ff fd5f 	bl	8007252 <__hexdig_fun>
 8007794:	2800      	cmp	r0, #0
 8007796:	d14f      	bne.n	8007838 <__hexnan+0xe4>
 8007798:	9a04      	ldr	r2, [sp, #16]
 800779a:	9905      	ldr	r1, [sp, #20]
 800779c:	2a20      	cmp	r2, #32
 800779e:	d818      	bhi.n	80077d2 <__hexnan+0x7e>
 80077a0:	9b02      	ldr	r3, [sp, #8]
 80077a2:	459b      	cmp	fp, r3
 80077a4:	dd13      	ble.n	80077ce <__hexnan+0x7a>
 80077a6:	454c      	cmp	r4, r9
 80077a8:	d206      	bcs.n	80077b8 <__hexnan+0x64>
 80077aa:	2d07      	cmp	r5, #7
 80077ac:	dc04      	bgt.n	80077b8 <__hexnan+0x64>
 80077ae:	462a      	mov	r2, r5
 80077b0:	4649      	mov	r1, r9
 80077b2:	4620      	mov	r0, r4
 80077b4:	f7ff ffa8 	bl	8007708 <L_shift>
 80077b8:	4544      	cmp	r4, r8
 80077ba:	d950      	bls.n	800785e <__hexnan+0x10a>
 80077bc:	2300      	movs	r3, #0
 80077be:	f1a4 0904 	sub.w	r9, r4, #4
 80077c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80077c6:	f8cd b008 	str.w	fp, [sp, #8]
 80077ca:	464c      	mov	r4, r9
 80077cc:	461d      	mov	r5, r3
 80077ce:	9903      	ldr	r1, [sp, #12]
 80077d0:	e7d7      	b.n	8007782 <__hexnan+0x2e>
 80077d2:	2a29      	cmp	r2, #41	; 0x29
 80077d4:	d156      	bne.n	8007884 <__hexnan+0x130>
 80077d6:	3102      	adds	r1, #2
 80077d8:	f8ca 1000 	str.w	r1, [sl]
 80077dc:	f1bb 0f00 	cmp.w	fp, #0
 80077e0:	d050      	beq.n	8007884 <__hexnan+0x130>
 80077e2:	454c      	cmp	r4, r9
 80077e4:	d206      	bcs.n	80077f4 <__hexnan+0xa0>
 80077e6:	2d07      	cmp	r5, #7
 80077e8:	dc04      	bgt.n	80077f4 <__hexnan+0xa0>
 80077ea:	462a      	mov	r2, r5
 80077ec:	4649      	mov	r1, r9
 80077ee:	4620      	mov	r0, r4
 80077f0:	f7ff ff8a 	bl	8007708 <L_shift>
 80077f4:	4544      	cmp	r4, r8
 80077f6:	d934      	bls.n	8007862 <__hexnan+0x10e>
 80077f8:	f1a8 0204 	sub.w	r2, r8, #4
 80077fc:	4623      	mov	r3, r4
 80077fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8007802:	f842 1f04 	str.w	r1, [r2, #4]!
 8007806:	429f      	cmp	r7, r3
 8007808:	d2f9      	bcs.n	80077fe <__hexnan+0xaa>
 800780a:	1b3b      	subs	r3, r7, r4
 800780c:	f023 0303 	bic.w	r3, r3, #3
 8007810:	3304      	adds	r3, #4
 8007812:	3401      	adds	r4, #1
 8007814:	3e03      	subs	r6, #3
 8007816:	42b4      	cmp	r4, r6
 8007818:	bf88      	it	hi
 800781a:	2304      	movhi	r3, #4
 800781c:	4443      	add	r3, r8
 800781e:	2200      	movs	r2, #0
 8007820:	f843 2b04 	str.w	r2, [r3], #4
 8007824:	429f      	cmp	r7, r3
 8007826:	d2fb      	bcs.n	8007820 <__hexnan+0xcc>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	b91b      	cbnz	r3, 8007834 <__hexnan+0xe0>
 800782c:	4547      	cmp	r7, r8
 800782e:	d127      	bne.n	8007880 <__hexnan+0x12c>
 8007830:	2301      	movs	r3, #1
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	2005      	movs	r0, #5
 8007836:	e026      	b.n	8007886 <__hexnan+0x132>
 8007838:	3501      	adds	r5, #1
 800783a:	2d08      	cmp	r5, #8
 800783c:	f10b 0b01 	add.w	fp, fp, #1
 8007840:	dd06      	ble.n	8007850 <__hexnan+0xfc>
 8007842:	4544      	cmp	r4, r8
 8007844:	d9c3      	bls.n	80077ce <__hexnan+0x7a>
 8007846:	2300      	movs	r3, #0
 8007848:	f844 3c04 	str.w	r3, [r4, #-4]
 800784c:	2501      	movs	r5, #1
 800784e:	3c04      	subs	r4, #4
 8007850:	6822      	ldr	r2, [r4, #0]
 8007852:	f000 000f 	and.w	r0, r0, #15
 8007856:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800785a:	6022      	str	r2, [r4, #0]
 800785c:	e7b7      	b.n	80077ce <__hexnan+0x7a>
 800785e:	2508      	movs	r5, #8
 8007860:	e7b5      	b.n	80077ce <__hexnan+0x7a>
 8007862:	9b01      	ldr	r3, [sp, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d0df      	beq.n	8007828 <__hexnan+0xd4>
 8007868:	f04f 32ff 	mov.w	r2, #4294967295
 800786c:	f1c3 0320 	rsb	r3, r3, #32
 8007870:	fa22 f303 	lsr.w	r3, r2, r3
 8007874:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007878:	401a      	ands	r2, r3
 800787a:	f846 2c04 	str.w	r2, [r6, #-4]
 800787e:	e7d3      	b.n	8007828 <__hexnan+0xd4>
 8007880:	3f04      	subs	r7, #4
 8007882:	e7d1      	b.n	8007828 <__hexnan+0xd4>
 8007884:	2004      	movs	r0, #4
 8007886:	b007      	add	sp, #28
 8007888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800788c <_localeconv_r>:
 800788c:	4800      	ldr	r0, [pc, #0]	; (8007890 <_localeconv_r+0x4>)
 800788e:	4770      	bx	lr
 8007890:	2000016c 	.word	0x2000016c

08007894 <__retarget_lock_init_recursive>:
 8007894:	4770      	bx	lr

08007896 <__retarget_lock_acquire_recursive>:
 8007896:	4770      	bx	lr

08007898 <__retarget_lock_release_recursive>:
 8007898:	4770      	bx	lr

0800789a <__swhatbuf_r>:
 800789a:	b570      	push	{r4, r5, r6, lr}
 800789c:	460e      	mov	r6, r1
 800789e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a2:	2900      	cmp	r1, #0
 80078a4:	b096      	sub	sp, #88	; 0x58
 80078a6:	4614      	mov	r4, r2
 80078a8:	461d      	mov	r5, r3
 80078aa:	da07      	bge.n	80078bc <__swhatbuf_r+0x22>
 80078ac:	2300      	movs	r3, #0
 80078ae:	602b      	str	r3, [r5, #0]
 80078b0:	89b3      	ldrh	r3, [r6, #12]
 80078b2:	061a      	lsls	r2, r3, #24
 80078b4:	d410      	bmi.n	80078d8 <__swhatbuf_r+0x3e>
 80078b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078ba:	e00e      	b.n	80078da <__swhatbuf_r+0x40>
 80078bc:	466a      	mov	r2, sp
 80078be:	f001 fa31 	bl	8008d24 <_fstat_r>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	dbf2      	blt.n	80078ac <__swhatbuf_r+0x12>
 80078c6:	9a01      	ldr	r2, [sp, #4]
 80078c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078d0:	425a      	negs	r2, r3
 80078d2:	415a      	adcs	r2, r3
 80078d4:	602a      	str	r2, [r5, #0]
 80078d6:	e7ee      	b.n	80078b6 <__swhatbuf_r+0x1c>
 80078d8:	2340      	movs	r3, #64	; 0x40
 80078da:	2000      	movs	r0, #0
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	b016      	add	sp, #88	; 0x58
 80078e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080078e4 <__smakebuf_r>:
 80078e4:	898b      	ldrh	r3, [r1, #12]
 80078e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078e8:	079d      	lsls	r5, r3, #30
 80078ea:	4606      	mov	r6, r0
 80078ec:	460c      	mov	r4, r1
 80078ee:	d507      	bpl.n	8007900 <__smakebuf_r+0x1c>
 80078f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	6123      	str	r3, [r4, #16]
 80078f8:	2301      	movs	r3, #1
 80078fa:	6163      	str	r3, [r4, #20]
 80078fc:	b002      	add	sp, #8
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	ab01      	add	r3, sp, #4
 8007902:	466a      	mov	r2, sp
 8007904:	f7ff ffc9 	bl	800789a <__swhatbuf_r>
 8007908:	9900      	ldr	r1, [sp, #0]
 800790a:	4605      	mov	r5, r0
 800790c:	4630      	mov	r0, r6
 800790e:	f000 fd6b 	bl	80083e8 <_malloc_r>
 8007912:	b948      	cbnz	r0, 8007928 <__smakebuf_r+0x44>
 8007914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007918:	059a      	lsls	r2, r3, #22
 800791a:	d4ef      	bmi.n	80078fc <__smakebuf_r+0x18>
 800791c:	f023 0303 	bic.w	r3, r3, #3
 8007920:	f043 0302 	orr.w	r3, r3, #2
 8007924:	81a3      	strh	r3, [r4, #12]
 8007926:	e7e3      	b.n	80078f0 <__smakebuf_r+0xc>
 8007928:	4b0d      	ldr	r3, [pc, #52]	; (8007960 <__smakebuf_r+0x7c>)
 800792a:	62b3      	str	r3, [r6, #40]	; 0x28
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	6020      	str	r0, [r4, #0]
 8007930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007934:	81a3      	strh	r3, [r4, #12]
 8007936:	9b00      	ldr	r3, [sp, #0]
 8007938:	6163      	str	r3, [r4, #20]
 800793a:	9b01      	ldr	r3, [sp, #4]
 800793c:	6120      	str	r0, [r4, #16]
 800793e:	b15b      	cbz	r3, 8007958 <__smakebuf_r+0x74>
 8007940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007944:	4630      	mov	r0, r6
 8007946:	f001 f9ff 	bl	8008d48 <_isatty_r>
 800794a:	b128      	cbz	r0, 8007958 <__smakebuf_r+0x74>
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	f023 0303 	bic.w	r3, r3, #3
 8007952:	f043 0301 	orr.w	r3, r3, #1
 8007956:	81a3      	strh	r3, [r4, #12]
 8007958:	89a0      	ldrh	r0, [r4, #12]
 800795a:	4305      	orrs	r5, r0
 800795c:	81a5      	strh	r5, [r4, #12]
 800795e:	e7cd      	b.n	80078fc <__smakebuf_r+0x18>
 8007960:	0800700d 	.word	0x0800700d

08007964 <malloc>:
 8007964:	4b02      	ldr	r3, [pc, #8]	; (8007970 <malloc+0xc>)
 8007966:	4601      	mov	r1, r0
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	f000 bd3d 	b.w	80083e8 <_malloc_r>
 800796e:	bf00      	nop
 8007970:	20000014 	.word	0x20000014

08007974 <__ascii_mbtowc>:
 8007974:	b082      	sub	sp, #8
 8007976:	b901      	cbnz	r1, 800797a <__ascii_mbtowc+0x6>
 8007978:	a901      	add	r1, sp, #4
 800797a:	b142      	cbz	r2, 800798e <__ascii_mbtowc+0x1a>
 800797c:	b14b      	cbz	r3, 8007992 <__ascii_mbtowc+0x1e>
 800797e:	7813      	ldrb	r3, [r2, #0]
 8007980:	600b      	str	r3, [r1, #0]
 8007982:	7812      	ldrb	r2, [r2, #0]
 8007984:	1e10      	subs	r0, r2, #0
 8007986:	bf18      	it	ne
 8007988:	2001      	movne	r0, #1
 800798a:	b002      	add	sp, #8
 800798c:	4770      	bx	lr
 800798e:	4610      	mov	r0, r2
 8007990:	e7fb      	b.n	800798a <__ascii_mbtowc+0x16>
 8007992:	f06f 0001 	mvn.w	r0, #1
 8007996:	e7f8      	b.n	800798a <__ascii_mbtowc+0x16>

08007998 <memcpy>:
 8007998:	440a      	add	r2, r1
 800799a:	4291      	cmp	r1, r2
 800799c:	f100 33ff 	add.w	r3, r0, #4294967295
 80079a0:	d100      	bne.n	80079a4 <memcpy+0xc>
 80079a2:	4770      	bx	lr
 80079a4:	b510      	push	{r4, lr}
 80079a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ae:	4291      	cmp	r1, r2
 80079b0:	d1f9      	bne.n	80079a6 <memcpy+0xe>
 80079b2:	bd10      	pop	{r4, pc}

080079b4 <_Balloc>:
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079b8:	4604      	mov	r4, r0
 80079ba:	460d      	mov	r5, r1
 80079bc:	b976      	cbnz	r6, 80079dc <_Balloc+0x28>
 80079be:	2010      	movs	r0, #16
 80079c0:	f7ff ffd0 	bl	8007964 <malloc>
 80079c4:	4602      	mov	r2, r0
 80079c6:	6260      	str	r0, [r4, #36]	; 0x24
 80079c8:	b920      	cbnz	r0, 80079d4 <_Balloc+0x20>
 80079ca:	4b18      	ldr	r3, [pc, #96]	; (8007a2c <_Balloc+0x78>)
 80079cc:	4818      	ldr	r0, [pc, #96]	; (8007a30 <_Balloc+0x7c>)
 80079ce:	2166      	movs	r1, #102	; 0x66
 80079d0:	f001 f968 	bl	8008ca4 <__assert_func>
 80079d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079d8:	6006      	str	r6, [r0, #0]
 80079da:	60c6      	str	r6, [r0, #12]
 80079dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079de:	68f3      	ldr	r3, [r6, #12]
 80079e0:	b183      	cbz	r3, 8007a04 <_Balloc+0x50>
 80079e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079ea:	b9b8      	cbnz	r0, 8007a1c <_Balloc+0x68>
 80079ec:	2101      	movs	r1, #1
 80079ee:	fa01 f605 	lsl.w	r6, r1, r5
 80079f2:	1d72      	adds	r2, r6, #5
 80079f4:	0092      	lsls	r2, r2, #2
 80079f6:	4620      	mov	r0, r4
 80079f8:	f000 fc97 	bl	800832a <_calloc_r>
 80079fc:	b160      	cbz	r0, 8007a18 <_Balloc+0x64>
 80079fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a02:	e00e      	b.n	8007a22 <_Balloc+0x6e>
 8007a04:	2221      	movs	r2, #33	; 0x21
 8007a06:	2104      	movs	r1, #4
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 fc8e 	bl	800832a <_calloc_r>
 8007a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a10:	60f0      	str	r0, [r6, #12]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e4      	bne.n	80079e2 <_Balloc+0x2e>
 8007a18:	2000      	movs	r0, #0
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	6802      	ldr	r2, [r0, #0]
 8007a1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a22:	2300      	movs	r3, #0
 8007a24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a28:	e7f7      	b.n	8007a1a <_Balloc+0x66>
 8007a2a:	bf00      	nop
 8007a2c:	0800a7f6 	.word	0x0800a7f6
 8007a30:	0800a960 	.word	0x0800a960

08007a34 <_Bfree>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a38:	4605      	mov	r5, r0
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	b976      	cbnz	r6, 8007a5c <_Bfree+0x28>
 8007a3e:	2010      	movs	r0, #16
 8007a40:	f7ff ff90 	bl	8007964 <malloc>
 8007a44:	4602      	mov	r2, r0
 8007a46:	6268      	str	r0, [r5, #36]	; 0x24
 8007a48:	b920      	cbnz	r0, 8007a54 <_Bfree+0x20>
 8007a4a:	4b09      	ldr	r3, [pc, #36]	; (8007a70 <_Bfree+0x3c>)
 8007a4c:	4809      	ldr	r0, [pc, #36]	; (8007a74 <_Bfree+0x40>)
 8007a4e:	218a      	movs	r1, #138	; 0x8a
 8007a50:	f001 f928 	bl	8008ca4 <__assert_func>
 8007a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a58:	6006      	str	r6, [r0, #0]
 8007a5a:	60c6      	str	r6, [r0, #12]
 8007a5c:	b13c      	cbz	r4, 8007a6e <_Bfree+0x3a>
 8007a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a60:	6862      	ldr	r2, [r4, #4]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a68:	6021      	str	r1, [r4, #0]
 8007a6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	0800a7f6 	.word	0x0800a7f6
 8007a74:	0800a960 	.word	0x0800a960

08007a78 <__multadd>:
 8007a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7c:	690e      	ldr	r6, [r1, #16]
 8007a7e:	4607      	mov	r7, r0
 8007a80:	4698      	mov	r8, r3
 8007a82:	460c      	mov	r4, r1
 8007a84:	f101 0014 	add.w	r0, r1, #20
 8007a88:	2300      	movs	r3, #0
 8007a8a:	6805      	ldr	r5, [r0, #0]
 8007a8c:	b2a9      	uxth	r1, r5
 8007a8e:	fb02 8101 	mla	r1, r2, r1, r8
 8007a92:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007a96:	0c2d      	lsrs	r5, r5, #16
 8007a98:	fb02 c505 	mla	r5, r2, r5, ip
 8007a9c:	b289      	uxth	r1, r1
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007aa4:	429e      	cmp	r6, r3
 8007aa6:	f840 1b04 	str.w	r1, [r0], #4
 8007aaa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007aae:	dcec      	bgt.n	8007a8a <__multadd+0x12>
 8007ab0:	f1b8 0f00 	cmp.w	r8, #0
 8007ab4:	d022      	beq.n	8007afc <__multadd+0x84>
 8007ab6:	68a3      	ldr	r3, [r4, #8]
 8007ab8:	42b3      	cmp	r3, r6
 8007aba:	dc19      	bgt.n	8007af0 <__multadd+0x78>
 8007abc:	6861      	ldr	r1, [r4, #4]
 8007abe:	4638      	mov	r0, r7
 8007ac0:	3101      	adds	r1, #1
 8007ac2:	f7ff ff77 	bl	80079b4 <_Balloc>
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	b928      	cbnz	r0, 8007ad6 <__multadd+0x5e>
 8007aca:	4602      	mov	r2, r0
 8007acc:	4b0d      	ldr	r3, [pc, #52]	; (8007b04 <__multadd+0x8c>)
 8007ace:	480e      	ldr	r0, [pc, #56]	; (8007b08 <__multadd+0x90>)
 8007ad0:	21b5      	movs	r1, #181	; 0xb5
 8007ad2:	f001 f8e7 	bl	8008ca4 <__assert_func>
 8007ad6:	6922      	ldr	r2, [r4, #16]
 8007ad8:	3202      	adds	r2, #2
 8007ada:	f104 010c 	add.w	r1, r4, #12
 8007ade:	0092      	lsls	r2, r2, #2
 8007ae0:	300c      	adds	r0, #12
 8007ae2:	f7ff ff59 	bl	8007998 <memcpy>
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f7ff ffa3 	bl	8007a34 <_Bfree>
 8007aee:	462c      	mov	r4, r5
 8007af0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007af4:	3601      	adds	r6, #1
 8007af6:	f8c3 8014 	str.w	r8, [r3, #20]
 8007afa:	6126      	str	r6, [r4, #16]
 8007afc:	4620      	mov	r0, r4
 8007afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b02:	bf00      	nop
 8007b04:	0800a86c 	.word	0x0800a86c
 8007b08:	0800a960 	.word	0x0800a960

08007b0c <__s2b>:
 8007b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b10:	460c      	mov	r4, r1
 8007b12:	4615      	mov	r5, r2
 8007b14:	461f      	mov	r7, r3
 8007b16:	2209      	movs	r2, #9
 8007b18:	3308      	adds	r3, #8
 8007b1a:	4606      	mov	r6, r0
 8007b1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b20:	2100      	movs	r1, #0
 8007b22:	2201      	movs	r2, #1
 8007b24:	429a      	cmp	r2, r3
 8007b26:	db09      	blt.n	8007b3c <__s2b+0x30>
 8007b28:	4630      	mov	r0, r6
 8007b2a:	f7ff ff43 	bl	80079b4 <_Balloc>
 8007b2e:	b940      	cbnz	r0, 8007b42 <__s2b+0x36>
 8007b30:	4602      	mov	r2, r0
 8007b32:	4b19      	ldr	r3, [pc, #100]	; (8007b98 <__s2b+0x8c>)
 8007b34:	4819      	ldr	r0, [pc, #100]	; (8007b9c <__s2b+0x90>)
 8007b36:	21ce      	movs	r1, #206	; 0xce
 8007b38:	f001 f8b4 	bl	8008ca4 <__assert_func>
 8007b3c:	0052      	lsls	r2, r2, #1
 8007b3e:	3101      	adds	r1, #1
 8007b40:	e7f0      	b.n	8007b24 <__s2b+0x18>
 8007b42:	9b08      	ldr	r3, [sp, #32]
 8007b44:	6143      	str	r3, [r0, #20]
 8007b46:	2d09      	cmp	r5, #9
 8007b48:	f04f 0301 	mov.w	r3, #1
 8007b4c:	6103      	str	r3, [r0, #16]
 8007b4e:	dd16      	ble.n	8007b7e <__s2b+0x72>
 8007b50:	f104 0909 	add.w	r9, r4, #9
 8007b54:	46c8      	mov	r8, r9
 8007b56:	442c      	add	r4, r5
 8007b58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007b5c:	4601      	mov	r1, r0
 8007b5e:	3b30      	subs	r3, #48	; 0x30
 8007b60:	220a      	movs	r2, #10
 8007b62:	4630      	mov	r0, r6
 8007b64:	f7ff ff88 	bl	8007a78 <__multadd>
 8007b68:	45a0      	cmp	r8, r4
 8007b6a:	d1f5      	bne.n	8007b58 <__s2b+0x4c>
 8007b6c:	f1a5 0408 	sub.w	r4, r5, #8
 8007b70:	444c      	add	r4, r9
 8007b72:	1b2d      	subs	r5, r5, r4
 8007b74:	1963      	adds	r3, r4, r5
 8007b76:	42bb      	cmp	r3, r7
 8007b78:	db04      	blt.n	8007b84 <__s2b+0x78>
 8007b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b7e:	340a      	adds	r4, #10
 8007b80:	2509      	movs	r5, #9
 8007b82:	e7f6      	b.n	8007b72 <__s2b+0x66>
 8007b84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b88:	4601      	mov	r1, r0
 8007b8a:	3b30      	subs	r3, #48	; 0x30
 8007b8c:	220a      	movs	r2, #10
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f7ff ff72 	bl	8007a78 <__multadd>
 8007b94:	e7ee      	b.n	8007b74 <__s2b+0x68>
 8007b96:	bf00      	nop
 8007b98:	0800a86c 	.word	0x0800a86c
 8007b9c:	0800a960 	.word	0x0800a960

08007ba0 <__hi0bits>:
 8007ba0:	0c03      	lsrs	r3, r0, #16
 8007ba2:	041b      	lsls	r3, r3, #16
 8007ba4:	b9d3      	cbnz	r3, 8007bdc <__hi0bits+0x3c>
 8007ba6:	0400      	lsls	r0, r0, #16
 8007ba8:	2310      	movs	r3, #16
 8007baa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007bae:	bf04      	itt	eq
 8007bb0:	0200      	lsleq	r0, r0, #8
 8007bb2:	3308      	addeq	r3, #8
 8007bb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007bb8:	bf04      	itt	eq
 8007bba:	0100      	lsleq	r0, r0, #4
 8007bbc:	3304      	addeq	r3, #4
 8007bbe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007bc2:	bf04      	itt	eq
 8007bc4:	0080      	lsleq	r0, r0, #2
 8007bc6:	3302      	addeq	r3, #2
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	db05      	blt.n	8007bd8 <__hi0bits+0x38>
 8007bcc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007bd0:	f103 0301 	add.w	r3, r3, #1
 8007bd4:	bf08      	it	eq
 8007bd6:	2320      	moveq	r3, #32
 8007bd8:	4618      	mov	r0, r3
 8007bda:	4770      	bx	lr
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e7e4      	b.n	8007baa <__hi0bits+0xa>

08007be0 <__lo0bits>:
 8007be0:	6803      	ldr	r3, [r0, #0]
 8007be2:	f013 0207 	ands.w	r2, r3, #7
 8007be6:	4601      	mov	r1, r0
 8007be8:	d00b      	beq.n	8007c02 <__lo0bits+0x22>
 8007bea:	07da      	lsls	r2, r3, #31
 8007bec:	d424      	bmi.n	8007c38 <__lo0bits+0x58>
 8007bee:	0798      	lsls	r0, r3, #30
 8007bf0:	bf49      	itett	mi
 8007bf2:	085b      	lsrmi	r3, r3, #1
 8007bf4:	089b      	lsrpl	r3, r3, #2
 8007bf6:	2001      	movmi	r0, #1
 8007bf8:	600b      	strmi	r3, [r1, #0]
 8007bfa:	bf5c      	itt	pl
 8007bfc:	600b      	strpl	r3, [r1, #0]
 8007bfe:	2002      	movpl	r0, #2
 8007c00:	4770      	bx	lr
 8007c02:	b298      	uxth	r0, r3
 8007c04:	b9b0      	cbnz	r0, 8007c34 <__lo0bits+0x54>
 8007c06:	0c1b      	lsrs	r3, r3, #16
 8007c08:	2010      	movs	r0, #16
 8007c0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c0e:	bf04      	itt	eq
 8007c10:	0a1b      	lsreq	r3, r3, #8
 8007c12:	3008      	addeq	r0, #8
 8007c14:	071a      	lsls	r2, r3, #28
 8007c16:	bf04      	itt	eq
 8007c18:	091b      	lsreq	r3, r3, #4
 8007c1a:	3004      	addeq	r0, #4
 8007c1c:	079a      	lsls	r2, r3, #30
 8007c1e:	bf04      	itt	eq
 8007c20:	089b      	lsreq	r3, r3, #2
 8007c22:	3002      	addeq	r0, #2
 8007c24:	07da      	lsls	r2, r3, #31
 8007c26:	d403      	bmi.n	8007c30 <__lo0bits+0x50>
 8007c28:	085b      	lsrs	r3, r3, #1
 8007c2a:	f100 0001 	add.w	r0, r0, #1
 8007c2e:	d005      	beq.n	8007c3c <__lo0bits+0x5c>
 8007c30:	600b      	str	r3, [r1, #0]
 8007c32:	4770      	bx	lr
 8007c34:	4610      	mov	r0, r2
 8007c36:	e7e8      	b.n	8007c0a <__lo0bits+0x2a>
 8007c38:	2000      	movs	r0, #0
 8007c3a:	4770      	bx	lr
 8007c3c:	2020      	movs	r0, #32
 8007c3e:	4770      	bx	lr

08007c40 <__i2b>:
 8007c40:	b510      	push	{r4, lr}
 8007c42:	460c      	mov	r4, r1
 8007c44:	2101      	movs	r1, #1
 8007c46:	f7ff feb5 	bl	80079b4 <_Balloc>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	b928      	cbnz	r0, 8007c5a <__i2b+0x1a>
 8007c4e:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <__i2b+0x24>)
 8007c50:	4805      	ldr	r0, [pc, #20]	; (8007c68 <__i2b+0x28>)
 8007c52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c56:	f001 f825 	bl	8008ca4 <__assert_func>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	6144      	str	r4, [r0, #20]
 8007c5e:	6103      	str	r3, [r0, #16]
 8007c60:	bd10      	pop	{r4, pc}
 8007c62:	bf00      	nop
 8007c64:	0800a86c 	.word	0x0800a86c
 8007c68:	0800a960 	.word	0x0800a960

08007c6c <__multiply>:
 8007c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c70:	4614      	mov	r4, r2
 8007c72:	690a      	ldr	r2, [r1, #16]
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	bfb8      	it	lt
 8007c7a:	460b      	movlt	r3, r1
 8007c7c:	460d      	mov	r5, r1
 8007c7e:	bfbc      	itt	lt
 8007c80:	4625      	movlt	r5, r4
 8007c82:	461c      	movlt	r4, r3
 8007c84:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007c88:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007c8c:	68ab      	ldr	r3, [r5, #8]
 8007c8e:	6869      	ldr	r1, [r5, #4]
 8007c90:	eb0a 0709 	add.w	r7, sl, r9
 8007c94:	42bb      	cmp	r3, r7
 8007c96:	b085      	sub	sp, #20
 8007c98:	bfb8      	it	lt
 8007c9a:	3101      	addlt	r1, #1
 8007c9c:	f7ff fe8a 	bl	80079b4 <_Balloc>
 8007ca0:	b930      	cbnz	r0, 8007cb0 <__multiply+0x44>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	4b42      	ldr	r3, [pc, #264]	; (8007db0 <__multiply+0x144>)
 8007ca6:	4843      	ldr	r0, [pc, #268]	; (8007db4 <__multiply+0x148>)
 8007ca8:	f240 115d 	movw	r1, #349	; 0x15d
 8007cac:	f000 fffa 	bl	8008ca4 <__assert_func>
 8007cb0:	f100 0614 	add.w	r6, r0, #20
 8007cb4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007cb8:	4633      	mov	r3, r6
 8007cba:	2200      	movs	r2, #0
 8007cbc:	4543      	cmp	r3, r8
 8007cbe:	d31e      	bcc.n	8007cfe <__multiply+0x92>
 8007cc0:	f105 0c14 	add.w	ip, r5, #20
 8007cc4:	f104 0314 	add.w	r3, r4, #20
 8007cc8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007ccc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007cd0:	9202      	str	r2, [sp, #8]
 8007cd2:	ebac 0205 	sub.w	r2, ip, r5
 8007cd6:	3a15      	subs	r2, #21
 8007cd8:	f022 0203 	bic.w	r2, r2, #3
 8007cdc:	3204      	adds	r2, #4
 8007cde:	f105 0115 	add.w	r1, r5, #21
 8007ce2:	458c      	cmp	ip, r1
 8007ce4:	bf38      	it	cc
 8007ce6:	2204      	movcc	r2, #4
 8007ce8:	9201      	str	r2, [sp, #4]
 8007cea:	9a02      	ldr	r2, [sp, #8]
 8007cec:	9303      	str	r3, [sp, #12]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d808      	bhi.n	8007d04 <__multiply+0x98>
 8007cf2:	2f00      	cmp	r7, #0
 8007cf4:	dc55      	bgt.n	8007da2 <__multiply+0x136>
 8007cf6:	6107      	str	r7, [r0, #16]
 8007cf8:	b005      	add	sp, #20
 8007cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfe:	f843 2b04 	str.w	r2, [r3], #4
 8007d02:	e7db      	b.n	8007cbc <__multiply+0x50>
 8007d04:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d08:	f1ba 0f00 	cmp.w	sl, #0
 8007d0c:	d020      	beq.n	8007d50 <__multiply+0xe4>
 8007d0e:	f105 0e14 	add.w	lr, r5, #20
 8007d12:	46b1      	mov	r9, r6
 8007d14:	2200      	movs	r2, #0
 8007d16:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007d1a:	f8d9 b000 	ldr.w	fp, [r9]
 8007d1e:	b2a1      	uxth	r1, r4
 8007d20:	fa1f fb8b 	uxth.w	fp, fp
 8007d24:	fb0a b101 	mla	r1, sl, r1, fp
 8007d28:	4411      	add	r1, r2
 8007d2a:	f8d9 2000 	ldr.w	r2, [r9]
 8007d2e:	0c24      	lsrs	r4, r4, #16
 8007d30:	0c12      	lsrs	r2, r2, #16
 8007d32:	fb0a 2404 	mla	r4, sl, r4, r2
 8007d36:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007d3a:	b289      	uxth	r1, r1
 8007d3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007d40:	45f4      	cmp	ip, lr
 8007d42:	f849 1b04 	str.w	r1, [r9], #4
 8007d46:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007d4a:	d8e4      	bhi.n	8007d16 <__multiply+0xaa>
 8007d4c:	9901      	ldr	r1, [sp, #4]
 8007d4e:	5072      	str	r2, [r6, r1]
 8007d50:	9a03      	ldr	r2, [sp, #12]
 8007d52:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d56:	3304      	adds	r3, #4
 8007d58:	f1b9 0f00 	cmp.w	r9, #0
 8007d5c:	d01f      	beq.n	8007d9e <__multiply+0x132>
 8007d5e:	6834      	ldr	r4, [r6, #0]
 8007d60:	f105 0114 	add.w	r1, r5, #20
 8007d64:	46b6      	mov	lr, r6
 8007d66:	f04f 0a00 	mov.w	sl, #0
 8007d6a:	880a      	ldrh	r2, [r1, #0]
 8007d6c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007d70:	fb09 b202 	mla	r2, r9, r2, fp
 8007d74:	4492      	add	sl, r2
 8007d76:	b2a4      	uxth	r4, r4
 8007d78:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007d7c:	f84e 4b04 	str.w	r4, [lr], #4
 8007d80:	f851 4b04 	ldr.w	r4, [r1], #4
 8007d84:	f8be 2000 	ldrh.w	r2, [lr]
 8007d88:	0c24      	lsrs	r4, r4, #16
 8007d8a:	fb09 2404 	mla	r4, r9, r4, r2
 8007d8e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007d92:	458c      	cmp	ip, r1
 8007d94:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d98:	d8e7      	bhi.n	8007d6a <__multiply+0xfe>
 8007d9a:	9a01      	ldr	r2, [sp, #4]
 8007d9c:	50b4      	str	r4, [r6, r2]
 8007d9e:	3604      	adds	r6, #4
 8007da0:	e7a3      	b.n	8007cea <__multiply+0x7e>
 8007da2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1a5      	bne.n	8007cf6 <__multiply+0x8a>
 8007daa:	3f01      	subs	r7, #1
 8007dac:	e7a1      	b.n	8007cf2 <__multiply+0x86>
 8007dae:	bf00      	nop
 8007db0:	0800a86c 	.word	0x0800a86c
 8007db4:	0800a960 	.word	0x0800a960

08007db8 <__pow5mult>:
 8007db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dbc:	4615      	mov	r5, r2
 8007dbe:	f012 0203 	ands.w	r2, r2, #3
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	460f      	mov	r7, r1
 8007dc6:	d007      	beq.n	8007dd8 <__pow5mult+0x20>
 8007dc8:	4c25      	ldr	r4, [pc, #148]	; (8007e60 <__pow5mult+0xa8>)
 8007dca:	3a01      	subs	r2, #1
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dd2:	f7ff fe51 	bl	8007a78 <__multadd>
 8007dd6:	4607      	mov	r7, r0
 8007dd8:	10ad      	asrs	r5, r5, #2
 8007dda:	d03d      	beq.n	8007e58 <__pow5mult+0xa0>
 8007ddc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dde:	b97c      	cbnz	r4, 8007e00 <__pow5mult+0x48>
 8007de0:	2010      	movs	r0, #16
 8007de2:	f7ff fdbf 	bl	8007964 <malloc>
 8007de6:	4602      	mov	r2, r0
 8007de8:	6270      	str	r0, [r6, #36]	; 0x24
 8007dea:	b928      	cbnz	r0, 8007df8 <__pow5mult+0x40>
 8007dec:	4b1d      	ldr	r3, [pc, #116]	; (8007e64 <__pow5mult+0xac>)
 8007dee:	481e      	ldr	r0, [pc, #120]	; (8007e68 <__pow5mult+0xb0>)
 8007df0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007df4:	f000 ff56 	bl	8008ca4 <__assert_func>
 8007df8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dfc:	6004      	str	r4, [r0, #0]
 8007dfe:	60c4      	str	r4, [r0, #12]
 8007e00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e08:	b94c      	cbnz	r4, 8007e1e <__pow5mult+0x66>
 8007e0a:	f240 2171 	movw	r1, #625	; 0x271
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f7ff ff16 	bl	8007c40 <__i2b>
 8007e14:	2300      	movs	r3, #0
 8007e16:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	6003      	str	r3, [r0, #0]
 8007e1e:	f04f 0900 	mov.w	r9, #0
 8007e22:	07eb      	lsls	r3, r5, #31
 8007e24:	d50a      	bpl.n	8007e3c <__pow5mult+0x84>
 8007e26:	4639      	mov	r1, r7
 8007e28:	4622      	mov	r2, r4
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f7ff ff1e 	bl	8007c6c <__multiply>
 8007e30:	4639      	mov	r1, r7
 8007e32:	4680      	mov	r8, r0
 8007e34:	4630      	mov	r0, r6
 8007e36:	f7ff fdfd 	bl	8007a34 <_Bfree>
 8007e3a:	4647      	mov	r7, r8
 8007e3c:	106d      	asrs	r5, r5, #1
 8007e3e:	d00b      	beq.n	8007e58 <__pow5mult+0xa0>
 8007e40:	6820      	ldr	r0, [r4, #0]
 8007e42:	b938      	cbnz	r0, 8007e54 <__pow5mult+0x9c>
 8007e44:	4622      	mov	r2, r4
 8007e46:	4621      	mov	r1, r4
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f7ff ff0f 	bl	8007c6c <__multiply>
 8007e4e:	6020      	str	r0, [r4, #0]
 8007e50:	f8c0 9000 	str.w	r9, [r0]
 8007e54:	4604      	mov	r4, r0
 8007e56:	e7e4      	b.n	8007e22 <__pow5mult+0x6a>
 8007e58:	4638      	mov	r0, r7
 8007e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e5e:	bf00      	nop
 8007e60:	0800aab0 	.word	0x0800aab0
 8007e64:	0800a7f6 	.word	0x0800a7f6
 8007e68:	0800a960 	.word	0x0800a960

08007e6c <__lshift>:
 8007e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e70:	460c      	mov	r4, r1
 8007e72:	6849      	ldr	r1, [r1, #4]
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e7a:	68a3      	ldr	r3, [r4, #8]
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	4691      	mov	r9, r2
 8007e80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e84:	f108 0601 	add.w	r6, r8, #1
 8007e88:	42b3      	cmp	r3, r6
 8007e8a:	db0b      	blt.n	8007ea4 <__lshift+0x38>
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	f7ff fd91 	bl	80079b4 <_Balloc>
 8007e92:	4605      	mov	r5, r0
 8007e94:	b948      	cbnz	r0, 8007eaa <__lshift+0x3e>
 8007e96:	4602      	mov	r2, r0
 8007e98:	4b28      	ldr	r3, [pc, #160]	; (8007f3c <__lshift+0xd0>)
 8007e9a:	4829      	ldr	r0, [pc, #164]	; (8007f40 <__lshift+0xd4>)
 8007e9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ea0:	f000 ff00 	bl	8008ca4 <__assert_func>
 8007ea4:	3101      	adds	r1, #1
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	e7ee      	b.n	8007e88 <__lshift+0x1c>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f100 0114 	add.w	r1, r0, #20
 8007eb0:	f100 0210 	add.w	r2, r0, #16
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	4553      	cmp	r3, sl
 8007eb8:	db33      	blt.n	8007f22 <__lshift+0xb6>
 8007eba:	6920      	ldr	r0, [r4, #16]
 8007ebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ec0:	f104 0314 	add.w	r3, r4, #20
 8007ec4:	f019 091f 	ands.w	r9, r9, #31
 8007ec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ecc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ed0:	d02b      	beq.n	8007f2a <__lshift+0xbe>
 8007ed2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ed6:	468a      	mov	sl, r1
 8007ed8:	2200      	movs	r2, #0
 8007eda:	6818      	ldr	r0, [r3, #0]
 8007edc:	fa00 f009 	lsl.w	r0, r0, r9
 8007ee0:	4302      	orrs	r2, r0
 8007ee2:	f84a 2b04 	str.w	r2, [sl], #4
 8007ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eea:	459c      	cmp	ip, r3
 8007eec:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ef0:	d8f3      	bhi.n	8007eda <__lshift+0x6e>
 8007ef2:	ebac 0304 	sub.w	r3, ip, r4
 8007ef6:	3b15      	subs	r3, #21
 8007ef8:	f023 0303 	bic.w	r3, r3, #3
 8007efc:	3304      	adds	r3, #4
 8007efe:	f104 0015 	add.w	r0, r4, #21
 8007f02:	4584      	cmp	ip, r0
 8007f04:	bf38      	it	cc
 8007f06:	2304      	movcc	r3, #4
 8007f08:	50ca      	str	r2, [r1, r3]
 8007f0a:	b10a      	cbz	r2, 8007f10 <__lshift+0xa4>
 8007f0c:	f108 0602 	add.w	r6, r8, #2
 8007f10:	3e01      	subs	r6, #1
 8007f12:	4638      	mov	r0, r7
 8007f14:	612e      	str	r6, [r5, #16]
 8007f16:	4621      	mov	r1, r4
 8007f18:	f7ff fd8c 	bl	8007a34 <_Bfree>
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f22:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f26:	3301      	adds	r3, #1
 8007f28:	e7c5      	b.n	8007eb6 <__lshift+0x4a>
 8007f2a:	3904      	subs	r1, #4
 8007f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f30:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f34:	459c      	cmp	ip, r3
 8007f36:	d8f9      	bhi.n	8007f2c <__lshift+0xc0>
 8007f38:	e7ea      	b.n	8007f10 <__lshift+0xa4>
 8007f3a:	bf00      	nop
 8007f3c:	0800a86c 	.word	0x0800a86c
 8007f40:	0800a960 	.word	0x0800a960

08007f44 <__mcmp>:
 8007f44:	b530      	push	{r4, r5, lr}
 8007f46:	6902      	ldr	r2, [r0, #16]
 8007f48:	690c      	ldr	r4, [r1, #16]
 8007f4a:	1b12      	subs	r2, r2, r4
 8007f4c:	d10e      	bne.n	8007f6c <__mcmp+0x28>
 8007f4e:	f100 0314 	add.w	r3, r0, #20
 8007f52:	3114      	adds	r1, #20
 8007f54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f64:	42a5      	cmp	r5, r4
 8007f66:	d003      	beq.n	8007f70 <__mcmp+0x2c>
 8007f68:	d305      	bcc.n	8007f76 <__mcmp+0x32>
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	bd30      	pop	{r4, r5, pc}
 8007f70:	4283      	cmp	r3, r0
 8007f72:	d3f3      	bcc.n	8007f5c <__mcmp+0x18>
 8007f74:	e7fa      	b.n	8007f6c <__mcmp+0x28>
 8007f76:	f04f 32ff 	mov.w	r2, #4294967295
 8007f7a:	e7f7      	b.n	8007f6c <__mcmp+0x28>

08007f7c <__mdiff>:
 8007f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f80:	460c      	mov	r4, r1
 8007f82:	4606      	mov	r6, r0
 8007f84:	4611      	mov	r1, r2
 8007f86:	4620      	mov	r0, r4
 8007f88:	4617      	mov	r7, r2
 8007f8a:	f7ff ffdb 	bl	8007f44 <__mcmp>
 8007f8e:	1e05      	subs	r5, r0, #0
 8007f90:	d110      	bne.n	8007fb4 <__mdiff+0x38>
 8007f92:	4629      	mov	r1, r5
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7ff fd0d 	bl	80079b4 <_Balloc>
 8007f9a:	b930      	cbnz	r0, 8007faa <__mdiff+0x2e>
 8007f9c:	4b39      	ldr	r3, [pc, #228]	; (8008084 <__mdiff+0x108>)
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	f240 2132 	movw	r1, #562	; 0x232
 8007fa4:	4838      	ldr	r0, [pc, #224]	; (8008088 <__mdiff+0x10c>)
 8007fa6:	f000 fe7d 	bl	8008ca4 <__assert_func>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb4:	bfa4      	itt	ge
 8007fb6:	463b      	movge	r3, r7
 8007fb8:	4627      	movge	r7, r4
 8007fba:	4630      	mov	r0, r6
 8007fbc:	6879      	ldr	r1, [r7, #4]
 8007fbe:	bfa6      	itte	ge
 8007fc0:	461c      	movge	r4, r3
 8007fc2:	2500      	movge	r5, #0
 8007fc4:	2501      	movlt	r5, #1
 8007fc6:	f7ff fcf5 	bl	80079b4 <_Balloc>
 8007fca:	b920      	cbnz	r0, 8007fd6 <__mdiff+0x5a>
 8007fcc:	4b2d      	ldr	r3, [pc, #180]	; (8008084 <__mdiff+0x108>)
 8007fce:	4602      	mov	r2, r0
 8007fd0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007fd4:	e7e6      	b.n	8007fa4 <__mdiff+0x28>
 8007fd6:	693e      	ldr	r6, [r7, #16]
 8007fd8:	60c5      	str	r5, [r0, #12]
 8007fda:	6925      	ldr	r5, [r4, #16]
 8007fdc:	f107 0114 	add.w	r1, r7, #20
 8007fe0:	f104 0914 	add.w	r9, r4, #20
 8007fe4:	f100 0e14 	add.w	lr, r0, #20
 8007fe8:	f107 0210 	add.w	r2, r7, #16
 8007fec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007ff0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007ff4:	46f2      	mov	sl, lr
 8007ff6:	2700      	movs	r7, #0
 8007ff8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ffc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008000:	fa1f f883 	uxth.w	r8, r3
 8008004:	fa17 f78b 	uxtah	r7, r7, fp
 8008008:	0c1b      	lsrs	r3, r3, #16
 800800a:	eba7 0808 	sub.w	r8, r7, r8
 800800e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008012:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008016:	fa1f f888 	uxth.w	r8, r8
 800801a:	141f      	asrs	r7, r3, #16
 800801c:	454d      	cmp	r5, r9
 800801e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008022:	f84a 3b04 	str.w	r3, [sl], #4
 8008026:	d8e7      	bhi.n	8007ff8 <__mdiff+0x7c>
 8008028:	1b2b      	subs	r3, r5, r4
 800802a:	3b15      	subs	r3, #21
 800802c:	f023 0303 	bic.w	r3, r3, #3
 8008030:	3304      	adds	r3, #4
 8008032:	3415      	adds	r4, #21
 8008034:	42a5      	cmp	r5, r4
 8008036:	bf38      	it	cc
 8008038:	2304      	movcc	r3, #4
 800803a:	4419      	add	r1, r3
 800803c:	4473      	add	r3, lr
 800803e:	469e      	mov	lr, r3
 8008040:	460d      	mov	r5, r1
 8008042:	4565      	cmp	r5, ip
 8008044:	d30e      	bcc.n	8008064 <__mdiff+0xe8>
 8008046:	f10c 0203 	add.w	r2, ip, #3
 800804a:	1a52      	subs	r2, r2, r1
 800804c:	f022 0203 	bic.w	r2, r2, #3
 8008050:	3903      	subs	r1, #3
 8008052:	458c      	cmp	ip, r1
 8008054:	bf38      	it	cc
 8008056:	2200      	movcc	r2, #0
 8008058:	441a      	add	r2, r3
 800805a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800805e:	b17b      	cbz	r3, 8008080 <__mdiff+0x104>
 8008060:	6106      	str	r6, [r0, #16]
 8008062:	e7a5      	b.n	8007fb0 <__mdiff+0x34>
 8008064:	f855 8b04 	ldr.w	r8, [r5], #4
 8008068:	fa17 f488 	uxtah	r4, r7, r8
 800806c:	1422      	asrs	r2, r4, #16
 800806e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008072:	b2a4      	uxth	r4, r4
 8008074:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008078:	f84e 4b04 	str.w	r4, [lr], #4
 800807c:	1417      	asrs	r7, r2, #16
 800807e:	e7e0      	b.n	8008042 <__mdiff+0xc6>
 8008080:	3e01      	subs	r6, #1
 8008082:	e7ea      	b.n	800805a <__mdiff+0xde>
 8008084:	0800a86c 	.word	0x0800a86c
 8008088:	0800a960 	.word	0x0800a960

0800808c <__ulp>:
 800808c:	b082      	sub	sp, #8
 800808e:	ed8d 0b00 	vstr	d0, [sp]
 8008092:	9b01      	ldr	r3, [sp, #4]
 8008094:	4912      	ldr	r1, [pc, #72]	; (80080e0 <__ulp+0x54>)
 8008096:	4019      	ands	r1, r3
 8008098:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800809c:	2900      	cmp	r1, #0
 800809e:	dd05      	ble.n	80080ac <__ulp+0x20>
 80080a0:	2200      	movs	r2, #0
 80080a2:	460b      	mov	r3, r1
 80080a4:	ec43 2b10 	vmov	d0, r2, r3
 80080a8:	b002      	add	sp, #8
 80080aa:	4770      	bx	lr
 80080ac:	4249      	negs	r1, r1
 80080ae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80080b2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80080b6:	f04f 0200 	mov.w	r2, #0
 80080ba:	f04f 0300 	mov.w	r3, #0
 80080be:	da04      	bge.n	80080ca <__ulp+0x3e>
 80080c0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80080c4:	fa41 f300 	asr.w	r3, r1, r0
 80080c8:	e7ec      	b.n	80080a4 <__ulp+0x18>
 80080ca:	f1a0 0114 	sub.w	r1, r0, #20
 80080ce:	291e      	cmp	r1, #30
 80080d0:	bfda      	itte	le
 80080d2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80080d6:	fa20 f101 	lsrle.w	r1, r0, r1
 80080da:	2101      	movgt	r1, #1
 80080dc:	460a      	mov	r2, r1
 80080de:	e7e1      	b.n	80080a4 <__ulp+0x18>
 80080e0:	7ff00000 	.word	0x7ff00000

080080e4 <__b2d>:
 80080e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e6:	6905      	ldr	r5, [r0, #16]
 80080e8:	f100 0714 	add.w	r7, r0, #20
 80080ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80080f0:	1f2e      	subs	r6, r5, #4
 80080f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80080f6:	4620      	mov	r0, r4
 80080f8:	f7ff fd52 	bl	8007ba0 <__hi0bits>
 80080fc:	f1c0 0320 	rsb	r3, r0, #32
 8008100:	280a      	cmp	r0, #10
 8008102:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008180 <__b2d+0x9c>
 8008106:	600b      	str	r3, [r1, #0]
 8008108:	dc14      	bgt.n	8008134 <__b2d+0x50>
 800810a:	f1c0 0e0b 	rsb	lr, r0, #11
 800810e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008112:	42b7      	cmp	r7, r6
 8008114:	ea41 030c 	orr.w	r3, r1, ip
 8008118:	bf34      	ite	cc
 800811a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800811e:	2100      	movcs	r1, #0
 8008120:	3015      	adds	r0, #21
 8008122:	fa04 f000 	lsl.w	r0, r4, r0
 8008126:	fa21 f10e 	lsr.w	r1, r1, lr
 800812a:	ea40 0201 	orr.w	r2, r0, r1
 800812e:	ec43 2b10 	vmov	d0, r2, r3
 8008132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008134:	42b7      	cmp	r7, r6
 8008136:	bf3a      	itte	cc
 8008138:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800813c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008140:	2100      	movcs	r1, #0
 8008142:	380b      	subs	r0, #11
 8008144:	d017      	beq.n	8008176 <__b2d+0x92>
 8008146:	f1c0 0c20 	rsb	ip, r0, #32
 800814a:	fa04 f500 	lsl.w	r5, r4, r0
 800814e:	42be      	cmp	r6, r7
 8008150:	fa21 f40c 	lsr.w	r4, r1, ip
 8008154:	ea45 0504 	orr.w	r5, r5, r4
 8008158:	bf8c      	ite	hi
 800815a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800815e:	2400      	movls	r4, #0
 8008160:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008164:	fa01 f000 	lsl.w	r0, r1, r0
 8008168:	fa24 f40c 	lsr.w	r4, r4, ip
 800816c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008170:	ea40 0204 	orr.w	r2, r0, r4
 8008174:	e7db      	b.n	800812e <__b2d+0x4a>
 8008176:	ea44 030c 	orr.w	r3, r4, ip
 800817a:	460a      	mov	r2, r1
 800817c:	e7d7      	b.n	800812e <__b2d+0x4a>
 800817e:	bf00      	nop
 8008180:	3ff00000 	.word	0x3ff00000

08008184 <__d2b>:
 8008184:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008188:	4689      	mov	r9, r1
 800818a:	2101      	movs	r1, #1
 800818c:	ec57 6b10 	vmov	r6, r7, d0
 8008190:	4690      	mov	r8, r2
 8008192:	f7ff fc0f 	bl	80079b4 <_Balloc>
 8008196:	4604      	mov	r4, r0
 8008198:	b930      	cbnz	r0, 80081a8 <__d2b+0x24>
 800819a:	4602      	mov	r2, r0
 800819c:	4b25      	ldr	r3, [pc, #148]	; (8008234 <__d2b+0xb0>)
 800819e:	4826      	ldr	r0, [pc, #152]	; (8008238 <__d2b+0xb4>)
 80081a0:	f240 310a 	movw	r1, #778	; 0x30a
 80081a4:	f000 fd7e 	bl	8008ca4 <__assert_func>
 80081a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80081ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081b0:	bb35      	cbnz	r5, 8008200 <__d2b+0x7c>
 80081b2:	2e00      	cmp	r6, #0
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	d028      	beq.n	800820a <__d2b+0x86>
 80081b8:	4668      	mov	r0, sp
 80081ba:	9600      	str	r6, [sp, #0]
 80081bc:	f7ff fd10 	bl	8007be0 <__lo0bits>
 80081c0:	9900      	ldr	r1, [sp, #0]
 80081c2:	b300      	cbz	r0, 8008206 <__d2b+0x82>
 80081c4:	9a01      	ldr	r2, [sp, #4]
 80081c6:	f1c0 0320 	rsb	r3, r0, #32
 80081ca:	fa02 f303 	lsl.w	r3, r2, r3
 80081ce:	430b      	orrs	r3, r1
 80081d0:	40c2      	lsrs	r2, r0
 80081d2:	6163      	str	r3, [r4, #20]
 80081d4:	9201      	str	r2, [sp, #4]
 80081d6:	9b01      	ldr	r3, [sp, #4]
 80081d8:	61a3      	str	r3, [r4, #24]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	bf14      	ite	ne
 80081de:	2202      	movne	r2, #2
 80081e0:	2201      	moveq	r2, #1
 80081e2:	6122      	str	r2, [r4, #16]
 80081e4:	b1d5      	cbz	r5, 800821c <__d2b+0x98>
 80081e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80081ea:	4405      	add	r5, r0
 80081ec:	f8c9 5000 	str.w	r5, [r9]
 80081f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081f4:	f8c8 0000 	str.w	r0, [r8]
 80081f8:	4620      	mov	r0, r4
 80081fa:	b003      	add	sp, #12
 80081fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008204:	e7d5      	b.n	80081b2 <__d2b+0x2e>
 8008206:	6161      	str	r1, [r4, #20]
 8008208:	e7e5      	b.n	80081d6 <__d2b+0x52>
 800820a:	a801      	add	r0, sp, #4
 800820c:	f7ff fce8 	bl	8007be0 <__lo0bits>
 8008210:	9b01      	ldr	r3, [sp, #4]
 8008212:	6163      	str	r3, [r4, #20]
 8008214:	2201      	movs	r2, #1
 8008216:	6122      	str	r2, [r4, #16]
 8008218:	3020      	adds	r0, #32
 800821a:	e7e3      	b.n	80081e4 <__d2b+0x60>
 800821c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008220:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008224:	f8c9 0000 	str.w	r0, [r9]
 8008228:	6918      	ldr	r0, [r3, #16]
 800822a:	f7ff fcb9 	bl	8007ba0 <__hi0bits>
 800822e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008232:	e7df      	b.n	80081f4 <__d2b+0x70>
 8008234:	0800a86c 	.word	0x0800a86c
 8008238:	0800a960 	.word	0x0800a960

0800823c <__ratio>:
 800823c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008240:	4688      	mov	r8, r1
 8008242:	4669      	mov	r1, sp
 8008244:	4681      	mov	r9, r0
 8008246:	f7ff ff4d 	bl	80080e4 <__b2d>
 800824a:	a901      	add	r1, sp, #4
 800824c:	4640      	mov	r0, r8
 800824e:	ec55 4b10 	vmov	r4, r5, d0
 8008252:	f7ff ff47 	bl	80080e4 <__b2d>
 8008256:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800825a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800825e:	eba3 0c02 	sub.w	ip, r3, r2
 8008262:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008266:	1a9b      	subs	r3, r3, r2
 8008268:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800826c:	ec51 0b10 	vmov	r0, r1, d0
 8008270:	2b00      	cmp	r3, #0
 8008272:	bfd6      	itet	le
 8008274:	460a      	movle	r2, r1
 8008276:	462a      	movgt	r2, r5
 8008278:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800827c:	468b      	mov	fp, r1
 800827e:	462f      	mov	r7, r5
 8008280:	bfd4      	ite	le
 8008282:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008286:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800828a:	4620      	mov	r0, r4
 800828c:	ee10 2a10 	vmov	r2, s0
 8008290:	465b      	mov	r3, fp
 8008292:	4639      	mov	r1, r7
 8008294:	f7f8 faea 	bl	800086c <__aeabi_ddiv>
 8008298:	ec41 0b10 	vmov	d0, r0, r1
 800829c:	b003      	add	sp, #12
 800829e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080082a2 <__copybits>:
 80082a2:	3901      	subs	r1, #1
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	1149      	asrs	r1, r1, #5
 80082a8:	6914      	ldr	r4, [r2, #16]
 80082aa:	3101      	adds	r1, #1
 80082ac:	f102 0314 	add.w	r3, r2, #20
 80082b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80082b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80082b8:	1f05      	subs	r5, r0, #4
 80082ba:	42a3      	cmp	r3, r4
 80082bc:	d30c      	bcc.n	80082d8 <__copybits+0x36>
 80082be:	1aa3      	subs	r3, r4, r2
 80082c0:	3b11      	subs	r3, #17
 80082c2:	f023 0303 	bic.w	r3, r3, #3
 80082c6:	3211      	adds	r2, #17
 80082c8:	42a2      	cmp	r2, r4
 80082ca:	bf88      	it	hi
 80082cc:	2300      	movhi	r3, #0
 80082ce:	4418      	add	r0, r3
 80082d0:	2300      	movs	r3, #0
 80082d2:	4288      	cmp	r0, r1
 80082d4:	d305      	bcc.n	80082e2 <__copybits+0x40>
 80082d6:	bd70      	pop	{r4, r5, r6, pc}
 80082d8:	f853 6b04 	ldr.w	r6, [r3], #4
 80082dc:	f845 6f04 	str.w	r6, [r5, #4]!
 80082e0:	e7eb      	b.n	80082ba <__copybits+0x18>
 80082e2:	f840 3b04 	str.w	r3, [r0], #4
 80082e6:	e7f4      	b.n	80082d2 <__copybits+0x30>

080082e8 <__any_on>:
 80082e8:	f100 0214 	add.w	r2, r0, #20
 80082ec:	6900      	ldr	r0, [r0, #16]
 80082ee:	114b      	asrs	r3, r1, #5
 80082f0:	4298      	cmp	r0, r3
 80082f2:	b510      	push	{r4, lr}
 80082f4:	db11      	blt.n	800831a <__any_on+0x32>
 80082f6:	dd0a      	ble.n	800830e <__any_on+0x26>
 80082f8:	f011 011f 	ands.w	r1, r1, #31
 80082fc:	d007      	beq.n	800830e <__any_on+0x26>
 80082fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008302:	fa24 f001 	lsr.w	r0, r4, r1
 8008306:	fa00 f101 	lsl.w	r1, r0, r1
 800830a:	428c      	cmp	r4, r1
 800830c:	d10b      	bne.n	8008326 <__any_on+0x3e>
 800830e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008312:	4293      	cmp	r3, r2
 8008314:	d803      	bhi.n	800831e <__any_on+0x36>
 8008316:	2000      	movs	r0, #0
 8008318:	bd10      	pop	{r4, pc}
 800831a:	4603      	mov	r3, r0
 800831c:	e7f7      	b.n	800830e <__any_on+0x26>
 800831e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008322:	2900      	cmp	r1, #0
 8008324:	d0f5      	beq.n	8008312 <__any_on+0x2a>
 8008326:	2001      	movs	r0, #1
 8008328:	e7f6      	b.n	8008318 <__any_on+0x30>

0800832a <_calloc_r>:
 800832a:	b513      	push	{r0, r1, r4, lr}
 800832c:	434a      	muls	r2, r1
 800832e:	4611      	mov	r1, r2
 8008330:	9201      	str	r2, [sp, #4]
 8008332:	f000 f859 	bl	80083e8 <_malloc_r>
 8008336:	4604      	mov	r4, r0
 8008338:	b118      	cbz	r0, 8008342 <_calloc_r+0x18>
 800833a:	9a01      	ldr	r2, [sp, #4]
 800833c:	2100      	movs	r1, #0
 800833e:	f7fc f8cd 	bl	80044dc <memset>
 8008342:	4620      	mov	r0, r4
 8008344:	b002      	add	sp, #8
 8008346:	bd10      	pop	{r4, pc}

08008348 <_free_r>:
 8008348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800834a:	2900      	cmp	r1, #0
 800834c:	d048      	beq.n	80083e0 <_free_r+0x98>
 800834e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008352:	9001      	str	r0, [sp, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	f1a1 0404 	sub.w	r4, r1, #4
 800835a:	bfb8      	it	lt
 800835c:	18e4      	addlt	r4, r4, r3
 800835e:	f000 fd2f 	bl	8008dc0 <__malloc_lock>
 8008362:	4a20      	ldr	r2, [pc, #128]	; (80083e4 <_free_r+0x9c>)
 8008364:	9801      	ldr	r0, [sp, #4]
 8008366:	6813      	ldr	r3, [r2, #0]
 8008368:	4615      	mov	r5, r2
 800836a:	b933      	cbnz	r3, 800837a <_free_r+0x32>
 800836c:	6063      	str	r3, [r4, #4]
 800836e:	6014      	str	r4, [r2, #0]
 8008370:	b003      	add	sp, #12
 8008372:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008376:	f000 bd29 	b.w	8008dcc <__malloc_unlock>
 800837a:	42a3      	cmp	r3, r4
 800837c:	d90b      	bls.n	8008396 <_free_r+0x4e>
 800837e:	6821      	ldr	r1, [r4, #0]
 8008380:	1862      	adds	r2, r4, r1
 8008382:	4293      	cmp	r3, r2
 8008384:	bf04      	itt	eq
 8008386:	681a      	ldreq	r2, [r3, #0]
 8008388:	685b      	ldreq	r3, [r3, #4]
 800838a:	6063      	str	r3, [r4, #4]
 800838c:	bf04      	itt	eq
 800838e:	1852      	addeq	r2, r2, r1
 8008390:	6022      	streq	r2, [r4, #0]
 8008392:	602c      	str	r4, [r5, #0]
 8008394:	e7ec      	b.n	8008370 <_free_r+0x28>
 8008396:	461a      	mov	r2, r3
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	b10b      	cbz	r3, 80083a0 <_free_r+0x58>
 800839c:	42a3      	cmp	r3, r4
 800839e:	d9fa      	bls.n	8008396 <_free_r+0x4e>
 80083a0:	6811      	ldr	r1, [r2, #0]
 80083a2:	1855      	adds	r5, r2, r1
 80083a4:	42a5      	cmp	r5, r4
 80083a6:	d10b      	bne.n	80083c0 <_free_r+0x78>
 80083a8:	6824      	ldr	r4, [r4, #0]
 80083aa:	4421      	add	r1, r4
 80083ac:	1854      	adds	r4, r2, r1
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	6011      	str	r1, [r2, #0]
 80083b2:	d1dd      	bne.n	8008370 <_free_r+0x28>
 80083b4:	681c      	ldr	r4, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	6053      	str	r3, [r2, #4]
 80083ba:	4421      	add	r1, r4
 80083bc:	6011      	str	r1, [r2, #0]
 80083be:	e7d7      	b.n	8008370 <_free_r+0x28>
 80083c0:	d902      	bls.n	80083c8 <_free_r+0x80>
 80083c2:	230c      	movs	r3, #12
 80083c4:	6003      	str	r3, [r0, #0]
 80083c6:	e7d3      	b.n	8008370 <_free_r+0x28>
 80083c8:	6825      	ldr	r5, [r4, #0]
 80083ca:	1961      	adds	r1, r4, r5
 80083cc:	428b      	cmp	r3, r1
 80083ce:	bf04      	itt	eq
 80083d0:	6819      	ldreq	r1, [r3, #0]
 80083d2:	685b      	ldreq	r3, [r3, #4]
 80083d4:	6063      	str	r3, [r4, #4]
 80083d6:	bf04      	itt	eq
 80083d8:	1949      	addeq	r1, r1, r5
 80083da:	6021      	streq	r1, [r4, #0]
 80083dc:	6054      	str	r4, [r2, #4]
 80083de:	e7c7      	b.n	8008370 <_free_r+0x28>
 80083e0:	b003      	add	sp, #12
 80083e2:	bd30      	pop	{r4, r5, pc}
 80083e4:	20000238 	.word	0x20000238

080083e8 <_malloc_r>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	1ccd      	adds	r5, r1, #3
 80083ec:	f025 0503 	bic.w	r5, r5, #3
 80083f0:	3508      	adds	r5, #8
 80083f2:	2d0c      	cmp	r5, #12
 80083f4:	bf38      	it	cc
 80083f6:	250c      	movcc	r5, #12
 80083f8:	2d00      	cmp	r5, #0
 80083fa:	4606      	mov	r6, r0
 80083fc:	db01      	blt.n	8008402 <_malloc_r+0x1a>
 80083fe:	42a9      	cmp	r1, r5
 8008400:	d903      	bls.n	800840a <_malloc_r+0x22>
 8008402:	230c      	movs	r3, #12
 8008404:	6033      	str	r3, [r6, #0]
 8008406:	2000      	movs	r0, #0
 8008408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800840a:	f000 fcd9 	bl	8008dc0 <__malloc_lock>
 800840e:	4921      	ldr	r1, [pc, #132]	; (8008494 <_malloc_r+0xac>)
 8008410:	680a      	ldr	r2, [r1, #0]
 8008412:	4614      	mov	r4, r2
 8008414:	b99c      	cbnz	r4, 800843e <_malloc_r+0x56>
 8008416:	4f20      	ldr	r7, [pc, #128]	; (8008498 <_malloc_r+0xb0>)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	b923      	cbnz	r3, 8008426 <_malloc_r+0x3e>
 800841c:	4621      	mov	r1, r4
 800841e:	4630      	mov	r0, r6
 8008420:	f000 fafa 	bl	8008a18 <_sbrk_r>
 8008424:	6038      	str	r0, [r7, #0]
 8008426:	4629      	mov	r1, r5
 8008428:	4630      	mov	r0, r6
 800842a:	f000 faf5 	bl	8008a18 <_sbrk_r>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	d123      	bne.n	800847a <_malloc_r+0x92>
 8008432:	230c      	movs	r3, #12
 8008434:	6033      	str	r3, [r6, #0]
 8008436:	4630      	mov	r0, r6
 8008438:	f000 fcc8 	bl	8008dcc <__malloc_unlock>
 800843c:	e7e3      	b.n	8008406 <_malloc_r+0x1e>
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	1b5b      	subs	r3, r3, r5
 8008442:	d417      	bmi.n	8008474 <_malloc_r+0x8c>
 8008444:	2b0b      	cmp	r3, #11
 8008446:	d903      	bls.n	8008450 <_malloc_r+0x68>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	441c      	add	r4, r3
 800844c:	6025      	str	r5, [r4, #0]
 800844e:	e004      	b.n	800845a <_malloc_r+0x72>
 8008450:	6863      	ldr	r3, [r4, #4]
 8008452:	42a2      	cmp	r2, r4
 8008454:	bf0c      	ite	eq
 8008456:	600b      	streq	r3, [r1, #0]
 8008458:	6053      	strne	r3, [r2, #4]
 800845a:	4630      	mov	r0, r6
 800845c:	f000 fcb6 	bl	8008dcc <__malloc_unlock>
 8008460:	f104 000b 	add.w	r0, r4, #11
 8008464:	1d23      	adds	r3, r4, #4
 8008466:	f020 0007 	bic.w	r0, r0, #7
 800846a:	1ac2      	subs	r2, r0, r3
 800846c:	d0cc      	beq.n	8008408 <_malloc_r+0x20>
 800846e:	1a1b      	subs	r3, r3, r0
 8008470:	50a3      	str	r3, [r4, r2]
 8008472:	e7c9      	b.n	8008408 <_malloc_r+0x20>
 8008474:	4622      	mov	r2, r4
 8008476:	6864      	ldr	r4, [r4, #4]
 8008478:	e7cc      	b.n	8008414 <_malloc_r+0x2c>
 800847a:	1cc4      	adds	r4, r0, #3
 800847c:	f024 0403 	bic.w	r4, r4, #3
 8008480:	42a0      	cmp	r0, r4
 8008482:	d0e3      	beq.n	800844c <_malloc_r+0x64>
 8008484:	1a21      	subs	r1, r4, r0
 8008486:	4630      	mov	r0, r6
 8008488:	f000 fac6 	bl	8008a18 <_sbrk_r>
 800848c:	3001      	adds	r0, #1
 800848e:	d1dd      	bne.n	800844c <_malloc_r+0x64>
 8008490:	e7cf      	b.n	8008432 <_malloc_r+0x4a>
 8008492:	bf00      	nop
 8008494:	20000238 	.word	0x20000238
 8008498:	2000023c 	.word	0x2000023c

0800849c <__ssputs_r>:
 800849c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a0:	688e      	ldr	r6, [r1, #8]
 80084a2:	429e      	cmp	r6, r3
 80084a4:	4682      	mov	sl, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	4690      	mov	r8, r2
 80084aa:	461f      	mov	r7, r3
 80084ac:	d838      	bhi.n	8008520 <__ssputs_r+0x84>
 80084ae:	898a      	ldrh	r2, [r1, #12]
 80084b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084b4:	d032      	beq.n	800851c <__ssputs_r+0x80>
 80084b6:	6825      	ldr	r5, [r4, #0]
 80084b8:	6909      	ldr	r1, [r1, #16]
 80084ba:	eba5 0901 	sub.w	r9, r5, r1
 80084be:	6965      	ldr	r5, [r4, #20]
 80084c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084c8:	3301      	adds	r3, #1
 80084ca:	444b      	add	r3, r9
 80084cc:	106d      	asrs	r5, r5, #1
 80084ce:	429d      	cmp	r5, r3
 80084d0:	bf38      	it	cc
 80084d2:	461d      	movcc	r5, r3
 80084d4:	0553      	lsls	r3, r2, #21
 80084d6:	d531      	bpl.n	800853c <__ssputs_r+0xa0>
 80084d8:	4629      	mov	r1, r5
 80084da:	f7ff ff85 	bl	80083e8 <_malloc_r>
 80084de:	4606      	mov	r6, r0
 80084e0:	b950      	cbnz	r0, 80084f8 <__ssputs_r+0x5c>
 80084e2:	230c      	movs	r3, #12
 80084e4:	f8ca 3000 	str.w	r3, [sl]
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ee:	81a3      	strh	r3, [r4, #12]
 80084f0:	f04f 30ff 	mov.w	r0, #4294967295
 80084f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f8:	6921      	ldr	r1, [r4, #16]
 80084fa:	464a      	mov	r2, r9
 80084fc:	f7ff fa4c 	bl	8007998 <memcpy>
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800850a:	81a3      	strh	r3, [r4, #12]
 800850c:	6126      	str	r6, [r4, #16]
 800850e:	6165      	str	r5, [r4, #20]
 8008510:	444e      	add	r6, r9
 8008512:	eba5 0509 	sub.w	r5, r5, r9
 8008516:	6026      	str	r6, [r4, #0]
 8008518:	60a5      	str	r5, [r4, #8]
 800851a:	463e      	mov	r6, r7
 800851c:	42be      	cmp	r6, r7
 800851e:	d900      	bls.n	8008522 <__ssputs_r+0x86>
 8008520:	463e      	mov	r6, r7
 8008522:	4632      	mov	r2, r6
 8008524:	6820      	ldr	r0, [r4, #0]
 8008526:	4641      	mov	r1, r8
 8008528:	f000 fc30 	bl	8008d8c <memmove>
 800852c:	68a3      	ldr	r3, [r4, #8]
 800852e:	6822      	ldr	r2, [r4, #0]
 8008530:	1b9b      	subs	r3, r3, r6
 8008532:	4432      	add	r2, r6
 8008534:	60a3      	str	r3, [r4, #8]
 8008536:	6022      	str	r2, [r4, #0]
 8008538:	2000      	movs	r0, #0
 800853a:	e7db      	b.n	80084f4 <__ssputs_r+0x58>
 800853c:	462a      	mov	r2, r5
 800853e:	f000 fc4b 	bl	8008dd8 <_realloc_r>
 8008542:	4606      	mov	r6, r0
 8008544:	2800      	cmp	r0, #0
 8008546:	d1e1      	bne.n	800850c <__ssputs_r+0x70>
 8008548:	6921      	ldr	r1, [r4, #16]
 800854a:	4650      	mov	r0, sl
 800854c:	f7ff fefc 	bl	8008348 <_free_r>
 8008550:	e7c7      	b.n	80084e2 <__ssputs_r+0x46>
	...

08008554 <_svfiprintf_r>:
 8008554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008558:	4698      	mov	r8, r3
 800855a:	898b      	ldrh	r3, [r1, #12]
 800855c:	061b      	lsls	r3, r3, #24
 800855e:	b09d      	sub	sp, #116	; 0x74
 8008560:	4607      	mov	r7, r0
 8008562:	460d      	mov	r5, r1
 8008564:	4614      	mov	r4, r2
 8008566:	d50e      	bpl.n	8008586 <_svfiprintf_r+0x32>
 8008568:	690b      	ldr	r3, [r1, #16]
 800856a:	b963      	cbnz	r3, 8008586 <_svfiprintf_r+0x32>
 800856c:	2140      	movs	r1, #64	; 0x40
 800856e:	f7ff ff3b 	bl	80083e8 <_malloc_r>
 8008572:	6028      	str	r0, [r5, #0]
 8008574:	6128      	str	r0, [r5, #16]
 8008576:	b920      	cbnz	r0, 8008582 <_svfiprintf_r+0x2e>
 8008578:	230c      	movs	r3, #12
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	f04f 30ff 	mov.w	r0, #4294967295
 8008580:	e0d1      	b.n	8008726 <_svfiprintf_r+0x1d2>
 8008582:	2340      	movs	r3, #64	; 0x40
 8008584:	616b      	str	r3, [r5, #20]
 8008586:	2300      	movs	r3, #0
 8008588:	9309      	str	r3, [sp, #36]	; 0x24
 800858a:	2320      	movs	r3, #32
 800858c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008590:	f8cd 800c 	str.w	r8, [sp, #12]
 8008594:	2330      	movs	r3, #48	; 0x30
 8008596:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008740 <_svfiprintf_r+0x1ec>
 800859a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800859e:	f04f 0901 	mov.w	r9, #1
 80085a2:	4623      	mov	r3, r4
 80085a4:	469a      	mov	sl, r3
 80085a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085aa:	b10a      	cbz	r2, 80085b0 <_svfiprintf_r+0x5c>
 80085ac:	2a25      	cmp	r2, #37	; 0x25
 80085ae:	d1f9      	bne.n	80085a4 <_svfiprintf_r+0x50>
 80085b0:	ebba 0b04 	subs.w	fp, sl, r4
 80085b4:	d00b      	beq.n	80085ce <_svfiprintf_r+0x7a>
 80085b6:	465b      	mov	r3, fp
 80085b8:	4622      	mov	r2, r4
 80085ba:	4629      	mov	r1, r5
 80085bc:	4638      	mov	r0, r7
 80085be:	f7ff ff6d 	bl	800849c <__ssputs_r>
 80085c2:	3001      	adds	r0, #1
 80085c4:	f000 80aa 	beq.w	800871c <_svfiprintf_r+0x1c8>
 80085c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085ca:	445a      	add	r2, fp
 80085cc:	9209      	str	r2, [sp, #36]	; 0x24
 80085ce:	f89a 3000 	ldrb.w	r3, [sl]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 80a2 	beq.w	800871c <_svfiprintf_r+0x1c8>
 80085d8:	2300      	movs	r3, #0
 80085da:	f04f 32ff 	mov.w	r2, #4294967295
 80085de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085e2:	f10a 0a01 	add.w	sl, sl, #1
 80085e6:	9304      	str	r3, [sp, #16]
 80085e8:	9307      	str	r3, [sp, #28]
 80085ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085ee:	931a      	str	r3, [sp, #104]	; 0x68
 80085f0:	4654      	mov	r4, sl
 80085f2:	2205      	movs	r2, #5
 80085f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f8:	4851      	ldr	r0, [pc, #324]	; (8008740 <_svfiprintf_r+0x1ec>)
 80085fa:	f7f7 fe01 	bl	8000200 <memchr>
 80085fe:	9a04      	ldr	r2, [sp, #16]
 8008600:	b9d8      	cbnz	r0, 800863a <_svfiprintf_r+0xe6>
 8008602:	06d0      	lsls	r0, r2, #27
 8008604:	bf44      	itt	mi
 8008606:	2320      	movmi	r3, #32
 8008608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800860c:	0711      	lsls	r1, r2, #28
 800860e:	bf44      	itt	mi
 8008610:	232b      	movmi	r3, #43	; 0x2b
 8008612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008616:	f89a 3000 	ldrb.w	r3, [sl]
 800861a:	2b2a      	cmp	r3, #42	; 0x2a
 800861c:	d015      	beq.n	800864a <_svfiprintf_r+0xf6>
 800861e:	9a07      	ldr	r2, [sp, #28]
 8008620:	4654      	mov	r4, sl
 8008622:	2000      	movs	r0, #0
 8008624:	f04f 0c0a 	mov.w	ip, #10
 8008628:	4621      	mov	r1, r4
 800862a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800862e:	3b30      	subs	r3, #48	; 0x30
 8008630:	2b09      	cmp	r3, #9
 8008632:	d94e      	bls.n	80086d2 <_svfiprintf_r+0x17e>
 8008634:	b1b0      	cbz	r0, 8008664 <_svfiprintf_r+0x110>
 8008636:	9207      	str	r2, [sp, #28]
 8008638:	e014      	b.n	8008664 <_svfiprintf_r+0x110>
 800863a:	eba0 0308 	sub.w	r3, r0, r8
 800863e:	fa09 f303 	lsl.w	r3, r9, r3
 8008642:	4313      	orrs	r3, r2
 8008644:	9304      	str	r3, [sp, #16]
 8008646:	46a2      	mov	sl, r4
 8008648:	e7d2      	b.n	80085f0 <_svfiprintf_r+0x9c>
 800864a:	9b03      	ldr	r3, [sp, #12]
 800864c:	1d19      	adds	r1, r3, #4
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	9103      	str	r1, [sp, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	bfbb      	ittet	lt
 8008656:	425b      	neglt	r3, r3
 8008658:	f042 0202 	orrlt.w	r2, r2, #2
 800865c:	9307      	strge	r3, [sp, #28]
 800865e:	9307      	strlt	r3, [sp, #28]
 8008660:	bfb8      	it	lt
 8008662:	9204      	strlt	r2, [sp, #16]
 8008664:	7823      	ldrb	r3, [r4, #0]
 8008666:	2b2e      	cmp	r3, #46	; 0x2e
 8008668:	d10c      	bne.n	8008684 <_svfiprintf_r+0x130>
 800866a:	7863      	ldrb	r3, [r4, #1]
 800866c:	2b2a      	cmp	r3, #42	; 0x2a
 800866e:	d135      	bne.n	80086dc <_svfiprintf_r+0x188>
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	1d1a      	adds	r2, r3, #4
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	9203      	str	r2, [sp, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	bfb8      	it	lt
 800867c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008680:	3402      	adds	r4, #2
 8008682:	9305      	str	r3, [sp, #20]
 8008684:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008750 <_svfiprintf_r+0x1fc>
 8008688:	7821      	ldrb	r1, [r4, #0]
 800868a:	2203      	movs	r2, #3
 800868c:	4650      	mov	r0, sl
 800868e:	f7f7 fdb7 	bl	8000200 <memchr>
 8008692:	b140      	cbz	r0, 80086a6 <_svfiprintf_r+0x152>
 8008694:	2340      	movs	r3, #64	; 0x40
 8008696:	eba0 000a 	sub.w	r0, r0, sl
 800869a:	fa03 f000 	lsl.w	r0, r3, r0
 800869e:	9b04      	ldr	r3, [sp, #16]
 80086a0:	4303      	orrs	r3, r0
 80086a2:	3401      	adds	r4, #1
 80086a4:	9304      	str	r3, [sp, #16]
 80086a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086aa:	4826      	ldr	r0, [pc, #152]	; (8008744 <_svfiprintf_r+0x1f0>)
 80086ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086b0:	2206      	movs	r2, #6
 80086b2:	f7f7 fda5 	bl	8000200 <memchr>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d038      	beq.n	800872c <_svfiprintf_r+0x1d8>
 80086ba:	4b23      	ldr	r3, [pc, #140]	; (8008748 <_svfiprintf_r+0x1f4>)
 80086bc:	bb1b      	cbnz	r3, 8008706 <_svfiprintf_r+0x1b2>
 80086be:	9b03      	ldr	r3, [sp, #12]
 80086c0:	3307      	adds	r3, #7
 80086c2:	f023 0307 	bic.w	r3, r3, #7
 80086c6:	3308      	adds	r3, #8
 80086c8:	9303      	str	r3, [sp, #12]
 80086ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086cc:	4433      	add	r3, r6
 80086ce:	9309      	str	r3, [sp, #36]	; 0x24
 80086d0:	e767      	b.n	80085a2 <_svfiprintf_r+0x4e>
 80086d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80086d6:	460c      	mov	r4, r1
 80086d8:	2001      	movs	r0, #1
 80086da:	e7a5      	b.n	8008628 <_svfiprintf_r+0xd4>
 80086dc:	2300      	movs	r3, #0
 80086de:	3401      	adds	r4, #1
 80086e0:	9305      	str	r3, [sp, #20]
 80086e2:	4619      	mov	r1, r3
 80086e4:	f04f 0c0a 	mov.w	ip, #10
 80086e8:	4620      	mov	r0, r4
 80086ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086ee:	3a30      	subs	r2, #48	; 0x30
 80086f0:	2a09      	cmp	r2, #9
 80086f2:	d903      	bls.n	80086fc <_svfiprintf_r+0x1a8>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0c5      	beq.n	8008684 <_svfiprintf_r+0x130>
 80086f8:	9105      	str	r1, [sp, #20]
 80086fa:	e7c3      	b.n	8008684 <_svfiprintf_r+0x130>
 80086fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008700:	4604      	mov	r4, r0
 8008702:	2301      	movs	r3, #1
 8008704:	e7f0      	b.n	80086e8 <_svfiprintf_r+0x194>
 8008706:	ab03      	add	r3, sp, #12
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	462a      	mov	r2, r5
 800870c:	4b0f      	ldr	r3, [pc, #60]	; (800874c <_svfiprintf_r+0x1f8>)
 800870e:	a904      	add	r1, sp, #16
 8008710:	4638      	mov	r0, r7
 8008712:	f7fb ff8b 	bl	800462c <_printf_float>
 8008716:	1c42      	adds	r2, r0, #1
 8008718:	4606      	mov	r6, r0
 800871a:	d1d6      	bne.n	80086ca <_svfiprintf_r+0x176>
 800871c:	89ab      	ldrh	r3, [r5, #12]
 800871e:	065b      	lsls	r3, r3, #25
 8008720:	f53f af2c 	bmi.w	800857c <_svfiprintf_r+0x28>
 8008724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008726:	b01d      	add	sp, #116	; 0x74
 8008728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872c:	ab03      	add	r3, sp, #12
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	462a      	mov	r2, r5
 8008732:	4b06      	ldr	r3, [pc, #24]	; (800874c <_svfiprintf_r+0x1f8>)
 8008734:	a904      	add	r1, sp, #16
 8008736:	4638      	mov	r0, r7
 8008738:	f7fc fa1c 	bl	8004b74 <_printf_i>
 800873c:	e7eb      	b.n	8008716 <_svfiprintf_r+0x1c2>
 800873e:	bf00      	nop
 8008740:	0800aabc 	.word	0x0800aabc
 8008744:	0800aac6 	.word	0x0800aac6
 8008748:	0800462d 	.word	0x0800462d
 800874c:	0800849d 	.word	0x0800849d
 8008750:	0800aac2 	.word	0x0800aac2

08008754 <__sfputc_r>:
 8008754:	6893      	ldr	r3, [r2, #8]
 8008756:	3b01      	subs	r3, #1
 8008758:	2b00      	cmp	r3, #0
 800875a:	b410      	push	{r4}
 800875c:	6093      	str	r3, [r2, #8]
 800875e:	da08      	bge.n	8008772 <__sfputc_r+0x1e>
 8008760:	6994      	ldr	r4, [r2, #24]
 8008762:	42a3      	cmp	r3, r4
 8008764:	db01      	blt.n	800876a <__sfputc_r+0x16>
 8008766:	290a      	cmp	r1, #10
 8008768:	d103      	bne.n	8008772 <__sfputc_r+0x1e>
 800876a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800876e:	f000 b9b9 	b.w	8008ae4 <__swbuf_r>
 8008772:	6813      	ldr	r3, [r2, #0]
 8008774:	1c58      	adds	r0, r3, #1
 8008776:	6010      	str	r0, [r2, #0]
 8008778:	7019      	strb	r1, [r3, #0]
 800877a:	4608      	mov	r0, r1
 800877c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008780:	4770      	bx	lr

08008782 <__sfputs_r>:
 8008782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008784:	4606      	mov	r6, r0
 8008786:	460f      	mov	r7, r1
 8008788:	4614      	mov	r4, r2
 800878a:	18d5      	adds	r5, r2, r3
 800878c:	42ac      	cmp	r4, r5
 800878e:	d101      	bne.n	8008794 <__sfputs_r+0x12>
 8008790:	2000      	movs	r0, #0
 8008792:	e007      	b.n	80087a4 <__sfputs_r+0x22>
 8008794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008798:	463a      	mov	r2, r7
 800879a:	4630      	mov	r0, r6
 800879c:	f7ff ffda 	bl	8008754 <__sfputc_r>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d1f3      	bne.n	800878c <__sfputs_r+0xa>
 80087a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087a8 <_vfiprintf_r>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	460d      	mov	r5, r1
 80087ae:	b09d      	sub	sp, #116	; 0x74
 80087b0:	4614      	mov	r4, r2
 80087b2:	4698      	mov	r8, r3
 80087b4:	4606      	mov	r6, r0
 80087b6:	b118      	cbz	r0, 80087c0 <_vfiprintf_r+0x18>
 80087b8:	6983      	ldr	r3, [r0, #24]
 80087ba:	b90b      	cbnz	r3, 80087c0 <_vfiprintf_r+0x18>
 80087bc:	f7fe fc5a 	bl	8007074 <__sinit>
 80087c0:	4b89      	ldr	r3, [pc, #548]	; (80089e8 <_vfiprintf_r+0x240>)
 80087c2:	429d      	cmp	r5, r3
 80087c4:	d11b      	bne.n	80087fe <_vfiprintf_r+0x56>
 80087c6:	6875      	ldr	r5, [r6, #4]
 80087c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ca:	07d9      	lsls	r1, r3, #31
 80087cc:	d405      	bmi.n	80087da <_vfiprintf_r+0x32>
 80087ce:	89ab      	ldrh	r3, [r5, #12]
 80087d0:	059a      	lsls	r2, r3, #22
 80087d2:	d402      	bmi.n	80087da <_vfiprintf_r+0x32>
 80087d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087d6:	f7ff f85e 	bl	8007896 <__retarget_lock_acquire_recursive>
 80087da:	89ab      	ldrh	r3, [r5, #12]
 80087dc:	071b      	lsls	r3, r3, #28
 80087de:	d501      	bpl.n	80087e4 <_vfiprintf_r+0x3c>
 80087e0:	692b      	ldr	r3, [r5, #16]
 80087e2:	b9eb      	cbnz	r3, 8008820 <_vfiprintf_r+0x78>
 80087e4:	4629      	mov	r1, r5
 80087e6:	4630      	mov	r0, r6
 80087e8:	f000 f9ee 	bl	8008bc8 <__swsetup_r>
 80087ec:	b1c0      	cbz	r0, 8008820 <_vfiprintf_r+0x78>
 80087ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087f0:	07dc      	lsls	r4, r3, #31
 80087f2:	d50e      	bpl.n	8008812 <_vfiprintf_r+0x6a>
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295
 80087f8:	b01d      	add	sp, #116	; 0x74
 80087fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fe:	4b7b      	ldr	r3, [pc, #492]	; (80089ec <_vfiprintf_r+0x244>)
 8008800:	429d      	cmp	r5, r3
 8008802:	d101      	bne.n	8008808 <_vfiprintf_r+0x60>
 8008804:	68b5      	ldr	r5, [r6, #8]
 8008806:	e7df      	b.n	80087c8 <_vfiprintf_r+0x20>
 8008808:	4b79      	ldr	r3, [pc, #484]	; (80089f0 <_vfiprintf_r+0x248>)
 800880a:	429d      	cmp	r5, r3
 800880c:	bf08      	it	eq
 800880e:	68f5      	ldreq	r5, [r6, #12]
 8008810:	e7da      	b.n	80087c8 <_vfiprintf_r+0x20>
 8008812:	89ab      	ldrh	r3, [r5, #12]
 8008814:	0598      	lsls	r0, r3, #22
 8008816:	d4ed      	bmi.n	80087f4 <_vfiprintf_r+0x4c>
 8008818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800881a:	f7ff f83d 	bl	8007898 <__retarget_lock_release_recursive>
 800881e:	e7e9      	b.n	80087f4 <_vfiprintf_r+0x4c>
 8008820:	2300      	movs	r3, #0
 8008822:	9309      	str	r3, [sp, #36]	; 0x24
 8008824:	2320      	movs	r3, #32
 8008826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800882a:	f8cd 800c 	str.w	r8, [sp, #12]
 800882e:	2330      	movs	r3, #48	; 0x30
 8008830:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089f4 <_vfiprintf_r+0x24c>
 8008834:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008838:	f04f 0901 	mov.w	r9, #1
 800883c:	4623      	mov	r3, r4
 800883e:	469a      	mov	sl, r3
 8008840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008844:	b10a      	cbz	r2, 800884a <_vfiprintf_r+0xa2>
 8008846:	2a25      	cmp	r2, #37	; 0x25
 8008848:	d1f9      	bne.n	800883e <_vfiprintf_r+0x96>
 800884a:	ebba 0b04 	subs.w	fp, sl, r4
 800884e:	d00b      	beq.n	8008868 <_vfiprintf_r+0xc0>
 8008850:	465b      	mov	r3, fp
 8008852:	4622      	mov	r2, r4
 8008854:	4629      	mov	r1, r5
 8008856:	4630      	mov	r0, r6
 8008858:	f7ff ff93 	bl	8008782 <__sfputs_r>
 800885c:	3001      	adds	r0, #1
 800885e:	f000 80aa 	beq.w	80089b6 <_vfiprintf_r+0x20e>
 8008862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008864:	445a      	add	r2, fp
 8008866:	9209      	str	r2, [sp, #36]	; 0x24
 8008868:	f89a 3000 	ldrb.w	r3, [sl]
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 80a2 	beq.w	80089b6 <_vfiprintf_r+0x20e>
 8008872:	2300      	movs	r3, #0
 8008874:	f04f 32ff 	mov.w	r2, #4294967295
 8008878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800887c:	f10a 0a01 	add.w	sl, sl, #1
 8008880:	9304      	str	r3, [sp, #16]
 8008882:	9307      	str	r3, [sp, #28]
 8008884:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008888:	931a      	str	r3, [sp, #104]	; 0x68
 800888a:	4654      	mov	r4, sl
 800888c:	2205      	movs	r2, #5
 800888e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008892:	4858      	ldr	r0, [pc, #352]	; (80089f4 <_vfiprintf_r+0x24c>)
 8008894:	f7f7 fcb4 	bl	8000200 <memchr>
 8008898:	9a04      	ldr	r2, [sp, #16]
 800889a:	b9d8      	cbnz	r0, 80088d4 <_vfiprintf_r+0x12c>
 800889c:	06d1      	lsls	r1, r2, #27
 800889e:	bf44      	itt	mi
 80088a0:	2320      	movmi	r3, #32
 80088a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088a6:	0713      	lsls	r3, r2, #28
 80088a8:	bf44      	itt	mi
 80088aa:	232b      	movmi	r3, #43	; 0x2b
 80088ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b0:	f89a 3000 	ldrb.w	r3, [sl]
 80088b4:	2b2a      	cmp	r3, #42	; 0x2a
 80088b6:	d015      	beq.n	80088e4 <_vfiprintf_r+0x13c>
 80088b8:	9a07      	ldr	r2, [sp, #28]
 80088ba:	4654      	mov	r4, sl
 80088bc:	2000      	movs	r0, #0
 80088be:	f04f 0c0a 	mov.w	ip, #10
 80088c2:	4621      	mov	r1, r4
 80088c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088c8:	3b30      	subs	r3, #48	; 0x30
 80088ca:	2b09      	cmp	r3, #9
 80088cc:	d94e      	bls.n	800896c <_vfiprintf_r+0x1c4>
 80088ce:	b1b0      	cbz	r0, 80088fe <_vfiprintf_r+0x156>
 80088d0:	9207      	str	r2, [sp, #28]
 80088d2:	e014      	b.n	80088fe <_vfiprintf_r+0x156>
 80088d4:	eba0 0308 	sub.w	r3, r0, r8
 80088d8:	fa09 f303 	lsl.w	r3, r9, r3
 80088dc:	4313      	orrs	r3, r2
 80088de:	9304      	str	r3, [sp, #16]
 80088e0:	46a2      	mov	sl, r4
 80088e2:	e7d2      	b.n	800888a <_vfiprintf_r+0xe2>
 80088e4:	9b03      	ldr	r3, [sp, #12]
 80088e6:	1d19      	adds	r1, r3, #4
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	9103      	str	r1, [sp, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	bfbb      	ittet	lt
 80088f0:	425b      	neglt	r3, r3
 80088f2:	f042 0202 	orrlt.w	r2, r2, #2
 80088f6:	9307      	strge	r3, [sp, #28]
 80088f8:	9307      	strlt	r3, [sp, #28]
 80088fa:	bfb8      	it	lt
 80088fc:	9204      	strlt	r2, [sp, #16]
 80088fe:	7823      	ldrb	r3, [r4, #0]
 8008900:	2b2e      	cmp	r3, #46	; 0x2e
 8008902:	d10c      	bne.n	800891e <_vfiprintf_r+0x176>
 8008904:	7863      	ldrb	r3, [r4, #1]
 8008906:	2b2a      	cmp	r3, #42	; 0x2a
 8008908:	d135      	bne.n	8008976 <_vfiprintf_r+0x1ce>
 800890a:	9b03      	ldr	r3, [sp, #12]
 800890c:	1d1a      	adds	r2, r3, #4
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	9203      	str	r2, [sp, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	bfb8      	it	lt
 8008916:	f04f 33ff 	movlt.w	r3, #4294967295
 800891a:	3402      	adds	r4, #2
 800891c:	9305      	str	r3, [sp, #20]
 800891e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a04 <_vfiprintf_r+0x25c>
 8008922:	7821      	ldrb	r1, [r4, #0]
 8008924:	2203      	movs	r2, #3
 8008926:	4650      	mov	r0, sl
 8008928:	f7f7 fc6a 	bl	8000200 <memchr>
 800892c:	b140      	cbz	r0, 8008940 <_vfiprintf_r+0x198>
 800892e:	2340      	movs	r3, #64	; 0x40
 8008930:	eba0 000a 	sub.w	r0, r0, sl
 8008934:	fa03 f000 	lsl.w	r0, r3, r0
 8008938:	9b04      	ldr	r3, [sp, #16]
 800893a:	4303      	orrs	r3, r0
 800893c:	3401      	adds	r4, #1
 800893e:	9304      	str	r3, [sp, #16]
 8008940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008944:	482c      	ldr	r0, [pc, #176]	; (80089f8 <_vfiprintf_r+0x250>)
 8008946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800894a:	2206      	movs	r2, #6
 800894c:	f7f7 fc58 	bl	8000200 <memchr>
 8008950:	2800      	cmp	r0, #0
 8008952:	d03f      	beq.n	80089d4 <_vfiprintf_r+0x22c>
 8008954:	4b29      	ldr	r3, [pc, #164]	; (80089fc <_vfiprintf_r+0x254>)
 8008956:	bb1b      	cbnz	r3, 80089a0 <_vfiprintf_r+0x1f8>
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	3307      	adds	r3, #7
 800895c:	f023 0307 	bic.w	r3, r3, #7
 8008960:	3308      	adds	r3, #8
 8008962:	9303      	str	r3, [sp, #12]
 8008964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008966:	443b      	add	r3, r7
 8008968:	9309      	str	r3, [sp, #36]	; 0x24
 800896a:	e767      	b.n	800883c <_vfiprintf_r+0x94>
 800896c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008970:	460c      	mov	r4, r1
 8008972:	2001      	movs	r0, #1
 8008974:	e7a5      	b.n	80088c2 <_vfiprintf_r+0x11a>
 8008976:	2300      	movs	r3, #0
 8008978:	3401      	adds	r4, #1
 800897a:	9305      	str	r3, [sp, #20]
 800897c:	4619      	mov	r1, r3
 800897e:	f04f 0c0a 	mov.w	ip, #10
 8008982:	4620      	mov	r0, r4
 8008984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008988:	3a30      	subs	r2, #48	; 0x30
 800898a:	2a09      	cmp	r2, #9
 800898c:	d903      	bls.n	8008996 <_vfiprintf_r+0x1ee>
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0c5      	beq.n	800891e <_vfiprintf_r+0x176>
 8008992:	9105      	str	r1, [sp, #20]
 8008994:	e7c3      	b.n	800891e <_vfiprintf_r+0x176>
 8008996:	fb0c 2101 	mla	r1, ip, r1, r2
 800899a:	4604      	mov	r4, r0
 800899c:	2301      	movs	r3, #1
 800899e:	e7f0      	b.n	8008982 <_vfiprintf_r+0x1da>
 80089a0:	ab03      	add	r3, sp, #12
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	462a      	mov	r2, r5
 80089a6:	4b16      	ldr	r3, [pc, #88]	; (8008a00 <_vfiprintf_r+0x258>)
 80089a8:	a904      	add	r1, sp, #16
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7fb fe3e 	bl	800462c <_printf_float>
 80089b0:	4607      	mov	r7, r0
 80089b2:	1c78      	adds	r0, r7, #1
 80089b4:	d1d6      	bne.n	8008964 <_vfiprintf_r+0x1bc>
 80089b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089b8:	07d9      	lsls	r1, r3, #31
 80089ba:	d405      	bmi.n	80089c8 <_vfiprintf_r+0x220>
 80089bc:	89ab      	ldrh	r3, [r5, #12]
 80089be:	059a      	lsls	r2, r3, #22
 80089c0:	d402      	bmi.n	80089c8 <_vfiprintf_r+0x220>
 80089c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089c4:	f7fe ff68 	bl	8007898 <__retarget_lock_release_recursive>
 80089c8:	89ab      	ldrh	r3, [r5, #12]
 80089ca:	065b      	lsls	r3, r3, #25
 80089cc:	f53f af12 	bmi.w	80087f4 <_vfiprintf_r+0x4c>
 80089d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089d2:	e711      	b.n	80087f8 <_vfiprintf_r+0x50>
 80089d4:	ab03      	add	r3, sp, #12
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	462a      	mov	r2, r5
 80089da:	4b09      	ldr	r3, [pc, #36]	; (8008a00 <_vfiprintf_r+0x258>)
 80089dc:	a904      	add	r1, sp, #16
 80089de:	4630      	mov	r0, r6
 80089e0:	f7fc f8c8 	bl	8004b74 <_printf_i>
 80089e4:	e7e4      	b.n	80089b0 <_vfiprintf_r+0x208>
 80089e6:	bf00      	nop
 80089e8:	0800a8a0 	.word	0x0800a8a0
 80089ec:	0800a8c0 	.word	0x0800a8c0
 80089f0:	0800a880 	.word	0x0800a880
 80089f4:	0800aabc 	.word	0x0800aabc
 80089f8:	0800aac6 	.word	0x0800aac6
 80089fc:	0800462d 	.word	0x0800462d
 8008a00:	08008783 	.word	0x08008783
 8008a04:	0800aac2 	.word	0x0800aac2

08008a08 <nan>:
 8008a08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a10 <nan+0x8>
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	00000000 	.word	0x00000000
 8008a14:	7ff80000 	.word	0x7ff80000

08008a18 <_sbrk_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4d06      	ldr	r5, [pc, #24]	; (8008a34 <_sbrk_r+0x1c>)
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	602b      	str	r3, [r5, #0]
 8008a24:	f7f9 f954 	bl	8001cd0 <_sbrk>
 8008a28:	1c43      	adds	r3, r0, #1
 8008a2a:	d102      	bne.n	8008a32 <_sbrk_r+0x1a>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	b103      	cbz	r3, 8008a32 <_sbrk_r+0x1a>
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	20000308 	.word	0x20000308

08008a38 <__sread>:
 8008a38:	b510      	push	{r4, lr}
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a40:	f000 f9f0 	bl	8008e24 <_read_r>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	bfab      	itete	ge
 8008a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a4c:	181b      	addge	r3, r3, r0
 8008a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a52:	bfac      	ite	ge
 8008a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a56:	81a3      	strhlt	r3, [r4, #12]
 8008a58:	bd10      	pop	{r4, pc}

08008a5a <__swrite>:
 8008a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5e:	461f      	mov	r7, r3
 8008a60:	898b      	ldrh	r3, [r1, #12]
 8008a62:	05db      	lsls	r3, r3, #23
 8008a64:	4605      	mov	r5, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	4616      	mov	r6, r2
 8008a6a:	d505      	bpl.n	8008a78 <__swrite+0x1e>
 8008a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a70:	2302      	movs	r3, #2
 8008a72:	2200      	movs	r2, #0
 8008a74:	f000 f978 	bl	8008d68 <_lseek_r>
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a82:	81a3      	strh	r3, [r4, #12]
 8008a84:	4632      	mov	r2, r6
 8008a86:	463b      	mov	r3, r7
 8008a88:	4628      	mov	r0, r5
 8008a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8e:	f000 b889 	b.w	8008ba4 <_write_r>

08008a92 <__sseek>:
 8008a92:	b510      	push	{r4, lr}
 8008a94:	460c      	mov	r4, r1
 8008a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9a:	f000 f965 	bl	8008d68 <_lseek_r>
 8008a9e:	1c43      	adds	r3, r0, #1
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	bf15      	itete	ne
 8008aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008aae:	81a3      	strheq	r3, [r4, #12]
 8008ab0:	bf18      	it	ne
 8008ab2:	81a3      	strhne	r3, [r4, #12]
 8008ab4:	bd10      	pop	{r4, pc}

08008ab6 <__sclose>:
 8008ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aba:	f000 b911 	b.w	8008ce0 <_close_r>

08008abe <strncmp>:
 8008abe:	b510      	push	{r4, lr}
 8008ac0:	b16a      	cbz	r2, 8008ade <strncmp+0x20>
 8008ac2:	3901      	subs	r1, #1
 8008ac4:	1884      	adds	r4, r0, r2
 8008ac6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008aca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d103      	bne.n	8008ada <strncmp+0x1c>
 8008ad2:	42a0      	cmp	r0, r4
 8008ad4:	d001      	beq.n	8008ada <strncmp+0x1c>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1f5      	bne.n	8008ac6 <strncmp+0x8>
 8008ada:	1a98      	subs	r0, r3, r2
 8008adc:	bd10      	pop	{r4, pc}
 8008ade:	4610      	mov	r0, r2
 8008ae0:	e7fc      	b.n	8008adc <strncmp+0x1e>
	...

08008ae4 <__swbuf_r>:
 8008ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae6:	460e      	mov	r6, r1
 8008ae8:	4614      	mov	r4, r2
 8008aea:	4605      	mov	r5, r0
 8008aec:	b118      	cbz	r0, 8008af6 <__swbuf_r+0x12>
 8008aee:	6983      	ldr	r3, [r0, #24]
 8008af0:	b90b      	cbnz	r3, 8008af6 <__swbuf_r+0x12>
 8008af2:	f7fe fabf 	bl	8007074 <__sinit>
 8008af6:	4b21      	ldr	r3, [pc, #132]	; (8008b7c <__swbuf_r+0x98>)
 8008af8:	429c      	cmp	r4, r3
 8008afa:	d12b      	bne.n	8008b54 <__swbuf_r+0x70>
 8008afc:	686c      	ldr	r4, [r5, #4]
 8008afe:	69a3      	ldr	r3, [r4, #24]
 8008b00:	60a3      	str	r3, [r4, #8]
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	071a      	lsls	r2, r3, #28
 8008b06:	d52f      	bpl.n	8008b68 <__swbuf_r+0x84>
 8008b08:	6923      	ldr	r3, [r4, #16]
 8008b0a:	b36b      	cbz	r3, 8008b68 <__swbuf_r+0x84>
 8008b0c:	6923      	ldr	r3, [r4, #16]
 8008b0e:	6820      	ldr	r0, [r4, #0]
 8008b10:	1ac0      	subs	r0, r0, r3
 8008b12:	6963      	ldr	r3, [r4, #20]
 8008b14:	b2f6      	uxtb	r6, r6
 8008b16:	4283      	cmp	r3, r0
 8008b18:	4637      	mov	r7, r6
 8008b1a:	dc04      	bgt.n	8008b26 <__swbuf_r+0x42>
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f7fe fa14 	bl	8006f4c <_fflush_r>
 8008b24:	bb30      	cbnz	r0, 8008b74 <__swbuf_r+0x90>
 8008b26:	68a3      	ldr	r3, [r4, #8]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	60a3      	str	r3, [r4, #8]
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	6022      	str	r2, [r4, #0]
 8008b32:	701e      	strb	r6, [r3, #0]
 8008b34:	6963      	ldr	r3, [r4, #20]
 8008b36:	3001      	adds	r0, #1
 8008b38:	4283      	cmp	r3, r0
 8008b3a:	d004      	beq.n	8008b46 <__swbuf_r+0x62>
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	07db      	lsls	r3, r3, #31
 8008b40:	d506      	bpl.n	8008b50 <__swbuf_r+0x6c>
 8008b42:	2e0a      	cmp	r6, #10
 8008b44:	d104      	bne.n	8008b50 <__swbuf_r+0x6c>
 8008b46:	4621      	mov	r1, r4
 8008b48:	4628      	mov	r0, r5
 8008b4a:	f7fe f9ff 	bl	8006f4c <_fflush_r>
 8008b4e:	b988      	cbnz	r0, 8008b74 <__swbuf_r+0x90>
 8008b50:	4638      	mov	r0, r7
 8008b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b54:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <__swbuf_r+0x9c>)
 8008b56:	429c      	cmp	r4, r3
 8008b58:	d101      	bne.n	8008b5e <__swbuf_r+0x7a>
 8008b5a:	68ac      	ldr	r4, [r5, #8]
 8008b5c:	e7cf      	b.n	8008afe <__swbuf_r+0x1a>
 8008b5e:	4b09      	ldr	r3, [pc, #36]	; (8008b84 <__swbuf_r+0xa0>)
 8008b60:	429c      	cmp	r4, r3
 8008b62:	bf08      	it	eq
 8008b64:	68ec      	ldreq	r4, [r5, #12]
 8008b66:	e7ca      	b.n	8008afe <__swbuf_r+0x1a>
 8008b68:	4621      	mov	r1, r4
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f000 f82c 	bl	8008bc8 <__swsetup_r>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d0cb      	beq.n	8008b0c <__swbuf_r+0x28>
 8008b74:	f04f 37ff 	mov.w	r7, #4294967295
 8008b78:	e7ea      	b.n	8008b50 <__swbuf_r+0x6c>
 8008b7a:	bf00      	nop
 8008b7c:	0800a8a0 	.word	0x0800a8a0
 8008b80:	0800a8c0 	.word	0x0800a8c0
 8008b84:	0800a880 	.word	0x0800a880

08008b88 <__ascii_wctomb>:
 8008b88:	b149      	cbz	r1, 8008b9e <__ascii_wctomb+0x16>
 8008b8a:	2aff      	cmp	r2, #255	; 0xff
 8008b8c:	bf85      	ittet	hi
 8008b8e:	238a      	movhi	r3, #138	; 0x8a
 8008b90:	6003      	strhi	r3, [r0, #0]
 8008b92:	700a      	strbls	r2, [r1, #0]
 8008b94:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b98:	bf98      	it	ls
 8008b9a:	2001      	movls	r0, #1
 8008b9c:	4770      	bx	lr
 8008b9e:	4608      	mov	r0, r1
 8008ba0:	4770      	bx	lr
	...

08008ba4 <_write_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d07      	ldr	r5, [pc, #28]	; (8008bc4 <_write_r+0x20>)
 8008ba8:	4604      	mov	r4, r0
 8008baa:	4608      	mov	r0, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	602a      	str	r2, [r5, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f7f8 ff12 	bl	80019dc <_write>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_write_r+0x1e>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_write_r+0x1e>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	20000308 	.word	0x20000308

08008bc8 <__swsetup_r>:
 8008bc8:	4b32      	ldr	r3, [pc, #200]	; (8008c94 <__swsetup_r+0xcc>)
 8008bca:	b570      	push	{r4, r5, r6, lr}
 8008bcc:	681d      	ldr	r5, [r3, #0]
 8008bce:	4606      	mov	r6, r0
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	b125      	cbz	r5, 8008bde <__swsetup_r+0x16>
 8008bd4:	69ab      	ldr	r3, [r5, #24]
 8008bd6:	b913      	cbnz	r3, 8008bde <__swsetup_r+0x16>
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f7fe fa4b 	bl	8007074 <__sinit>
 8008bde:	4b2e      	ldr	r3, [pc, #184]	; (8008c98 <__swsetup_r+0xd0>)
 8008be0:	429c      	cmp	r4, r3
 8008be2:	d10f      	bne.n	8008c04 <__swsetup_r+0x3c>
 8008be4:	686c      	ldr	r4, [r5, #4]
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bec:	0719      	lsls	r1, r3, #28
 8008bee:	d42c      	bmi.n	8008c4a <__swsetup_r+0x82>
 8008bf0:	06dd      	lsls	r5, r3, #27
 8008bf2:	d411      	bmi.n	8008c18 <__swsetup_r+0x50>
 8008bf4:	2309      	movs	r3, #9
 8008bf6:	6033      	str	r3, [r6, #0]
 8008bf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bfc:	81a3      	strh	r3, [r4, #12]
 8008bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008c02:	e03e      	b.n	8008c82 <__swsetup_r+0xba>
 8008c04:	4b25      	ldr	r3, [pc, #148]	; (8008c9c <__swsetup_r+0xd4>)
 8008c06:	429c      	cmp	r4, r3
 8008c08:	d101      	bne.n	8008c0e <__swsetup_r+0x46>
 8008c0a:	68ac      	ldr	r4, [r5, #8]
 8008c0c:	e7eb      	b.n	8008be6 <__swsetup_r+0x1e>
 8008c0e:	4b24      	ldr	r3, [pc, #144]	; (8008ca0 <__swsetup_r+0xd8>)
 8008c10:	429c      	cmp	r4, r3
 8008c12:	bf08      	it	eq
 8008c14:	68ec      	ldreq	r4, [r5, #12]
 8008c16:	e7e6      	b.n	8008be6 <__swsetup_r+0x1e>
 8008c18:	0758      	lsls	r0, r3, #29
 8008c1a:	d512      	bpl.n	8008c42 <__swsetup_r+0x7a>
 8008c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c1e:	b141      	cbz	r1, 8008c32 <__swsetup_r+0x6a>
 8008c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c24:	4299      	cmp	r1, r3
 8008c26:	d002      	beq.n	8008c2e <__swsetup_r+0x66>
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f7ff fb8d 	bl	8008348 <_free_r>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	6363      	str	r3, [r4, #52]	; 0x34
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c38:	81a3      	strh	r3, [r4, #12]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	6063      	str	r3, [r4, #4]
 8008c3e:	6923      	ldr	r3, [r4, #16]
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	f043 0308 	orr.w	r3, r3, #8
 8008c48:	81a3      	strh	r3, [r4, #12]
 8008c4a:	6923      	ldr	r3, [r4, #16]
 8008c4c:	b94b      	cbnz	r3, 8008c62 <__swsetup_r+0x9a>
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c58:	d003      	beq.n	8008c62 <__swsetup_r+0x9a>
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f7fe fe41 	bl	80078e4 <__smakebuf_r>
 8008c62:	89a0      	ldrh	r0, [r4, #12]
 8008c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c68:	f010 0301 	ands.w	r3, r0, #1
 8008c6c:	d00a      	beq.n	8008c84 <__swsetup_r+0xbc>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60a3      	str	r3, [r4, #8]
 8008c72:	6963      	ldr	r3, [r4, #20]
 8008c74:	425b      	negs	r3, r3
 8008c76:	61a3      	str	r3, [r4, #24]
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	b943      	cbnz	r3, 8008c8e <__swsetup_r+0xc6>
 8008c7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c80:	d1ba      	bne.n	8008bf8 <__swsetup_r+0x30>
 8008c82:	bd70      	pop	{r4, r5, r6, pc}
 8008c84:	0781      	lsls	r1, r0, #30
 8008c86:	bf58      	it	pl
 8008c88:	6963      	ldrpl	r3, [r4, #20]
 8008c8a:	60a3      	str	r3, [r4, #8]
 8008c8c:	e7f4      	b.n	8008c78 <__swsetup_r+0xb0>
 8008c8e:	2000      	movs	r0, #0
 8008c90:	e7f7      	b.n	8008c82 <__swsetup_r+0xba>
 8008c92:	bf00      	nop
 8008c94:	20000014 	.word	0x20000014
 8008c98:	0800a8a0 	.word	0x0800a8a0
 8008c9c:	0800a8c0 	.word	0x0800a8c0
 8008ca0:	0800a880 	.word	0x0800a880

08008ca4 <__assert_func>:
 8008ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ca6:	4614      	mov	r4, r2
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4b09      	ldr	r3, [pc, #36]	; (8008cd0 <__assert_func+0x2c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4605      	mov	r5, r0
 8008cb0:	68d8      	ldr	r0, [r3, #12]
 8008cb2:	b14c      	cbz	r4, 8008cc8 <__assert_func+0x24>
 8008cb4:	4b07      	ldr	r3, [pc, #28]	; (8008cd4 <__assert_func+0x30>)
 8008cb6:	9100      	str	r1, [sp, #0]
 8008cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cbc:	4906      	ldr	r1, [pc, #24]	; (8008cd8 <__assert_func+0x34>)
 8008cbe:	462b      	mov	r3, r5
 8008cc0:	f000 f81e 	bl	8008d00 <fiprintf>
 8008cc4:	f000 f8c0 	bl	8008e48 <abort>
 8008cc8:	4b04      	ldr	r3, [pc, #16]	; (8008cdc <__assert_func+0x38>)
 8008cca:	461c      	mov	r4, r3
 8008ccc:	e7f3      	b.n	8008cb6 <__assert_func+0x12>
 8008cce:	bf00      	nop
 8008cd0:	20000014 	.word	0x20000014
 8008cd4:	0800aacd 	.word	0x0800aacd
 8008cd8:	0800aada 	.word	0x0800aada
 8008cdc:	0800ab08 	.word	0x0800ab08

08008ce0 <_close_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4d06      	ldr	r5, [pc, #24]	; (8008cfc <_close_r+0x1c>)
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	4608      	mov	r0, r1
 8008cea:	602b      	str	r3, [r5, #0]
 8008cec:	f7f8 fea2 	bl	8001a34 <_close>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	d102      	bne.n	8008cfa <_close_r+0x1a>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	b103      	cbz	r3, 8008cfa <_close_r+0x1a>
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
 8008cfc:	20000308 	.word	0x20000308

08008d00 <fiprintf>:
 8008d00:	b40e      	push	{r1, r2, r3}
 8008d02:	b503      	push	{r0, r1, lr}
 8008d04:	4601      	mov	r1, r0
 8008d06:	ab03      	add	r3, sp, #12
 8008d08:	4805      	ldr	r0, [pc, #20]	; (8008d20 <fiprintf+0x20>)
 8008d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d0e:	6800      	ldr	r0, [r0, #0]
 8008d10:	9301      	str	r3, [sp, #4]
 8008d12:	f7ff fd49 	bl	80087a8 <_vfiprintf_r>
 8008d16:	b002      	add	sp, #8
 8008d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d1c:	b003      	add	sp, #12
 8008d1e:	4770      	bx	lr
 8008d20:	20000014 	.word	0x20000014

08008d24 <_fstat_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d07      	ldr	r5, [pc, #28]	; (8008d44 <_fstat_r+0x20>)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	4611      	mov	r1, r2
 8008d30:	602b      	str	r3, [r5, #0]
 8008d32:	f7f8 fecf 	bl	8001ad4 <_fstat>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	d102      	bne.n	8008d40 <_fstat_r+0x1c>
 8008d3a:	682b      	ldr	r3, [r5, #0]
 8008d3c:	b103      	cbz	r3, 8008d40 <_fstat_r+0x1c>
 8008d3e:	6023      	str	r3, [r4, #0]
 8008d40:	bd38      	pop	{r3, r4, r5, pc}
 8008d42:	bf00      	nop
 8008d44:	20000308 	.word	0x20000308

08008d48 <_isatty_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4d06      	ldr	r5, [pc, #24]	; (8008d64 <_isatty_r+0x1c>)
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	602b      	str	r3, [r5, #0]
 8008d54:	f7f8 fe2c 	bl	80019b0 <_isatty>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_isatty_r+0x1a>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_isatty_r+0x1a>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	20000308 	.word	0x20000308

08008d68 <_lseek_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d07      	ldr	r5, [pc, #28]	; (8008d88 <_lseek_r+0x20>)
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	4608      	mov	r0, r1
 8008d70:	4611      	mov	r1, r2
 8008d72:	2200      	movs	r2, #0
 8008d74:	602a      	str	r2, [r5, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	f7f8 fe73 	bl	8001a62 <_lseek>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d102      	bne.n	8008d86 <_lseek_r+0x1e>
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	b103      	cbz	r3, 8008d86 <_lseek_r+0x1e>
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	20000308 	.word	0x20000308

08008d8c <memmove>:
 8008d8c:	4288      	cmp	r0, r1
 8008d8e:	b510      	push	{r4, lr}
 8008d90:	eb01 0402 	add.w	r4, r1, r2
 8008d94:	d902      	bls.n	8008d9c <memmove+0x10>
 8008d96:	4284      	cmp	r4, r0
 8008d98:	4623      	mov	r3, r4
 8008d9a:	d807      	bhi.n	8008dac <memmove+0x20>
 8008d9c:	1e43      	subs	r3, r0, #1
 8008d9e:	42a1      	cmp	r1, r4
 8008da0:	d008      	beq.n	8008db4 <memmove+0x28>
 8008da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008daa:	e7f8      	b.n	8008d9e <memmove+0x12>
 8008dac:	4402      	add	r2, r0
 8008dae:	4601      	mov	r1, r0
 8008db0:	428a      	cmp	r2, r1
 8008db2:	d100      	bne.n	8008db6 <memmove+0x2a>
 8008db4:	bd10      	pop	{r4, pc}
 8008db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dbe:	e7f7      	b.n	8008db0 <memmove+0x24>

08008dc0 <__malloc_lock>:
 8008dc0:	4801      	ldr	r0, [pc, #4]	; (8008dc8 <__malloc_lock+0x8>)
 8008dc2:	f7fe bd68 	b.w	8007896 <__retarget_lock_acquire_recursive>
 8008dc6:	bf00      	nop
 8008dc8:	20000300 	.word	0x20000300

08008dcc <__malloc_unlock>:
 8008dcc:	4801      	ldr	r0, [pc, #4]	; (8008dd4 <__malloc_unlock+0x8>)
 8008dce:	f7fe bd63 	b.w	8007898 <__retarget_lock_release_recursive>
 8008dd2:	bf00      	nop
 8008dd4:	20000300 	.word	0x20000300

08008dd8 <_realloc_r>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	4607      	mov	r7, r0
 8008ddc:	4614      	mov	r4, r2
 8008dde:	460e      	mov	r6, r1
 8008de0:	b921      	cbnz	r1, 8008dec <_realloc_r+0x14>
 8008de2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008de6:	4611      	mov	r1, r2
 8008de8:	f7ff bafe 	b.w	80083e8 <_malloc_r>
 8008dec:	b922      	cbnz	r2, 8008df8 <_realloc_r+0x20>
 8008dee:	f7ff faab 	bl	8008348 <_free_r>
 8008df2:	4625      	mov	r5, r4
 8008df4:	4628      	mov	r0, r5
 8008df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008df8:	f000 f82d 	bl	8008e56 <_malloc_usable_size_r>
 8008dfc:	42a0      	cmp	r0, r4
 8008dfe:	d20f      	bcs.n	8008e20 <_realloc_r+0x48>
 8008e00:	4621      	mov	r1, r4
 8008e02:	4638      	mov	r0, r7
 8008e04:	f7ff faf0 	bl	80083e8 <_malloc_r>
 8008e08:	4605      	mov	r5, r0
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d0f2      	beq.n	8008df4 <_realloc_r+0x1c>
 8008e0e:	4631      	mov	r1, r6
 8008e10:	4622      	mov	r2, r4
 8008e12:	f7fe fdc1 	bl	8007998 <memcpy>
 8008e16:	4631      	mov	r1, r6
 8008e18:	4638      	mov	r0, r7
 8008e1a:	f7ff fa95 	bl	8008348 <_free_r>
 8008e1e:	e7e9      	b.n	8008df4 <_realloc_r+0x1c>
 8008e20:	4635      	mov	r5, r6
 8008e22:	e7e7      	b.n	8008df4 <_realloc_r+0x1c>

08008e24 <_read_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4d07      	ldr	r5, [pc, #28]	; (8008e44 <_read_r+0x20>)
 8008e28:	4604      	mov	r4, r0
 8008e2a:	4608      	mov	r0, r1
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	2200      	movs	r2, #0
 8008e30:	602a      	str	r2, [r5, #0]
 8008e32:	461a      	mov	r2, r3
 8008e34:	f7f8 fe26 	bl	8001a84 <_read>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d102      	bne.n	8008e42 <_read_r+0x1e>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	b103      	cbz	r3, 8008e42 <_read_r+0x1e>
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	bd38      	pop	{r3, r4, r5, pc}
 8008e44:	20000308 	.word	0x20000308

08008e48 <abort>:
 8008e48:	b508      	push	{r3, lr}
 8008e4a:	2006      	movs	r0, #6
 8008e4c:	f000 f834 	bl	8008eb8 <raise>
 8008e50:	2001      	movs	r0, #1
 8008e52:	f001 fbcb 	bl	800a5ec <_exit>

08008e56 <_malloc_usable_size_r>:
 8008e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e5a:	1f18      	subs	r0, r3, #4
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	bfbc      	itt	lt
 8008e60:	580b      	ldrlt	r3, [r1, r0]
 8008e62:	18c0      	addlt	r0, r0, r3
 8008e64:	4770      	bx	lr

08008e66 <_raise_r>:
 8008e66:	291f      	cmp	r1, #31
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	460d      	mov	r5, r1
 8008e6e:	d904      	bls.n	8008e7a <_raise_r+0x14>
 8008e70:	2316      	movs	r3, #22
 8008e72:	6003      	str	r3, [r0, #0]
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295
 8008e78:	bd38      	pop	{r3, r4, r5, pc}
 8008e7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e7c:	b112      	cbz	r2, 8008e84 <_raise_r+0x1e>
 8008e7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e82:	b94b      	cbnz	r3, 8008e98 <_raise_r+0x32>
 8008e84:	4620      	mov	r0, r4
 8008e86:	f000 f831 	bl	8008eec <_getpid_r>
 8008e8a:	462a      	mov	r2, r5
 8008e8c:	4601      	mov	r1, r0
 8008e8e:	4620      	mov	r0, r4
 8008e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e94:	f000 b818 	b.w	8008ec8 <_kill_r>
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d00a      	beq.n	8008eb2 <_raise_r+0x4c>
 8008e9c:	1c59      	adds	r1, r3, #1
 8008e9e:	d103      	bne.n	8008ea8 <_raise_r+0x42>
 8008ea0:	2316      	movs	r3, #22
 8008ea2:	6003      	str	r3, [r0, #0]
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	e7e7      	b.n	8008e78 <_raise_r+0x12>
 8008ea8:	2400      	movs	r4, #0
 8008eaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008eae:	4628      	mov	r0, r5
 8008eb0:	4798      	blx	r3
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	e7e0      	b.n	8008e78 <_raise_r+0x12>
	...

08008eb8 <raise>:
 8008eb8:	4b02      	ldr	r3, [pc, #8]	; (8008ec4 <raise+0xc>)
 8008eba:	4601      	mov	r1, r0
 8008ebc:	6818      	ldr	r0, [r3, #0]
 8008ebe:	f7ff bfd2 	b.w	8008e66 <_raise_r>
 8008ec2:	bf00      	nop
 8008ec4:	20000014 	.word	0x20000014

08008ec8 <_kill_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d07      	ldr	r5, [pc, #28]	; (8008ee8 <_kill_r+0x20>)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	602b      	str	r3, [r5, #0]
 8008ed6:	f001 fb81 	bl	800a5dc <_kill>
 8008eda:	1c43      	adds	r3, r0, #1
 8008edc:	d102      	bne.n	8008ee4 <_kill_r+0x1c>
 8008ede:	682b      	ldr	r3, [r5, #0]
 8008ee0:	b103      	cbz	r3, 8008ee4 <_kill_r+0x1c>
 8008ee2:	6023      	str	r3, [r4, #0]
 8008ee4:	bd38      	pop	{r3, r4, r5, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20000308 	.word	0x20000308

08008eec <_getpid_r>:
 8008eec:	f001 bb6e 	b.w	800a5cc <_getpid>

08008ef0 <sin>:
 8008ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ef2:	ec53 2b10 	vmov	r2, r3, d0
 8008ef6:	4826      	ldr	r0, [pc, #152]	; (8008f90 <sin+0xa0>)
 8008ef8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008efc:	4281      	cmp	r1, r0
 8008efe:	dc07      	bgt.n	8008f10 <sin+0x20>
 8008f00:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008f88 <sin+0x98>
 8008f04:	2000      	movs	r0, #0
 8008f06:	f001 f993 	bl	800a230 <__kernel_sin>
 8008f0a:	ec51 0b10 	vmov	r0, r1, d0
 8008f0e:	e007      	b.n	8008f20 <sin+0x30>
 8008f10:	4820      	ldr	r0, [pc, #128]	; (8008f94 <sin+0xa4>)
 8008f12:	4281      	cmp	r1, r0
 8008f14:	dd09      	ble.n	8008f2a <sin+0x3a>
 8008f16:	ee10 0a10 	vmov	r0, s0
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	f7f7 f9c4 	bl	80002a8 <__aeabi_dsub>
 8008f20:	ec41 0b10 	vmov	d0, r0, r1
 8008f24:	b005      	add	sp, #20
 8008f26:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f2a:	4668      	mov	r0, sp
 8008f2c:	f000 fab8 	bl	80094a0 <__ieee754_rem_pio2>
 8008f30:	f000 0003 	and.w	r0, r0, #3
 8008f34:	2801      	cmp	r0, #1
 8008f36:	d008      	beq.n	8008f4a <sin+0x5a>
 8008f38:	2802      	cmp	r0, #2
 8008f3a:	d00d      	beq.n	8008f58 <sin+0x68>
 8008f3c:	b9d0      	cbnz	r0, 8008f74 <sin+0x84>
 8008f3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008f42:	ed9d 0b00 	vldr	d0, [sp]
 8008f46:	2001      	movs	r0, #1
 8008f48:	e7dd      	b.n	8008f06 <sin+0x16>
 8008f4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008f4e:	ed9d 0b00 	vldr	d0, [sp]
 8008f52:	f000 fd65 	bl	8009a20 <__kernel_cos>
 8008f56:	e7d8      	b.n	8008f0a <sin+0x1a>
 8008f58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008f5c:	ed9d 0b00 	vldr	d0, [sp]
 8008f60:	2001      	movs	r0, #1
 8008f62:	f001 f965 	bl	800a230 <__kernel_sin>
 8008f66:	ec53 2b10 	vmov	r2, r3, d0
 8008f6a:	ee10 0a10 	vmov	r0, s0
 8008f6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008f72:	e7d5      	b.n	8008f20 <sin+0x30>
 8008f74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008f78:	ed9d 0b00 	vldr	d0, [sp]
 8008f7c:	f000 fd50 	bl	8009a20 <__kernel_cos>
 8008f80:	e7f1      	b.n	8008f66 <sin+0x76>
 8008f82:	bf00      	nop
 8008f84:	f3af 8000 	nop.w
	...
 8008f90:	3fe921fb 	.word	0x3fe921fb
 8008f94:	7fefffff 	.word	0x7fefffff

08008f98 <asin>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	ed2d 8b02 	vpush	{d8}
 8008f9e:	ec55 4b10 	vmov	r4, r5, d0
 8008fa2:	f000 f869 	bl	8009078 <__ieee754_asin>
 8008fa6:	4b16      	ldr	r3, [pc, #88]	; (8009000 <asin+0x68>)
 8008fa8:	eeb0 8a40 	vmov.f32	s16, s0
 8008fac:	eef0 8a60 	vmov.f32	s17, s1
 8008fb0:	f993 3000 	ldrsb.w	r3, [r3]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	d01c      	beq.n	8008ff2 <asin+0x5a>
 8008fb8:	4622      	mov	r2, r4
 8008fba:	462b      	mov	r3, r5
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f7f7 fdc4 	bl	8000b4c <__aeabi_dcmpun>
 8008fc4:	b9a8      	cbnz	r0, 8008ff2 <asin+0x5a>
 8008fc6:	ec45 4b10 	vmov	d0, r4, r5
 8008fca:	f001 f9ef 	bl	800a3ac <fabs>
 8008fce:	4b0d      	ldr	r3, [pc, #52]	; (8009004 <asin+0x6c>)
 8008fd0:	ec51 0b10 	vmov	r0, r1, d0
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f7f7 fdaf 	bl	8000b38 <__aeabi_dcmpgt>
 8008fda:	b150      	cbz	r0, 8008ff2 <asin+0x5a>
 8008fdc:	f7fb fa54 	bl	8004488 <__errno>
 8008fe0:	ecbd 8b02 	vpop	{d8}
 8008fe4:	2321      	movs	r3, #33	; 0x21
 8008fe6:	6003      	str	r3, [r0, #0]
 8008fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fec:	4806      	ldr	r0, [pc, #24]	; (8009008 <asin+0x70>)
 8008fee:	f7ff bd0b 	b.w	8008a08 <nan>
 8008ff2:	eeb0 0a48 	vmov.f32	s0, s16
 8008ff6:	eef0 0a68 	vmov.f32	s1, s17
 8008ffa:	ecbd 8b02 	vpop	{d8}
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	200001e8 	.word	0x200001e8
 8009004:	3ff00000 	.word	0x3ff00000
 8009008:	0800ab08 	.word	0x0800ab08

0800900c <sqrt>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	ed2d 8b02 	vpush	{d8}
 8009012:	ec55 4b10 	vmov	r4, r5, d0
 8009016:	f000 fc4d 	bl	80098b4 <__ieee754_sqrt>
 800901a:	4b15      	ldr	r3, [pc, #84]	; (8009070 <sqrt+0x64>)
 800901c:	eeb0 8a40 	vmov.f32	s16, s0
 8009020:	eef0 8a60 	vmov.f32	s17, s1
 8009024:	f993 3000 	ldrsb.w	r3, [r3]
 8009028:	3301      	adds	r3, #1
 800902a:	d019      	beq.n	8009060 <sqrt+0x54>
 800902c:	4622      	mov	r2, r4
 800902e:	462b      	mov	r3, r5
 8009030:	4620      	mov	r0, r4
 8009032:	4629      	mov	r1, r5
 8009034:	f7f7 fd8a 	bl	8000b4c <__aeabi_dcmpun>
 8009038:	b990      	cbnz	r0, 8009060 <sqrt+0x54>
 800903a:	2200      	movs	r2, #0
 800903c:	2300      	movs	r3, #0
 800903e:	4620      	mov	r0, r4
 8009040:	4629      	mov	r1, r5
 8009042:	f7f7 fd5b 	bl	8000afc <__aeabi_dcmplt>
 8009046:	b158      	cbz	r0, 8009060 <sqrt+0x54>
 8009048:	f7fb fa1e 	bl	8004488 <__errno>
 800904c:	2321      	movs	r3, #33	; 0x21
 800904e:	6003      	str	r3, [r0, #0]
 8009050:	2200      	movs	r2, #0
 8009052:	2300      	movs	r3, #0
 8009054:	4610      	mov	r0, r2
 8009056:	4619      	mov	r1, r3
 8009058:	f7f7 fc08 	bl	800086c <__aeabi_ddiv>
 800905c:	ec41 0b18 	vmov	d8, r0, r1
 8009060:	eeb0 0a48 	vmov.f32	s0, s16
 8009064:	eef0 0a68 	vmov.f32	s1, s17
 8009068:	ecbd 8b02 	vpop	{d8}
 800906c:	bd38      	pop	{r3, r4, r5, pc}
 800906e:	bf00      	nop
 8009070:	200001e8 	.word	0x200001e8
 8009074:	00000000 	.word	0x00000000

08009078 <__ieee754_asin>:
 8009078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907c:	ed2d 8b04 	vpush	{d8-d9}
 8009080:	ec55 4b10 	vmov	r4, r5, d0
 8009084:	4bcc      	ldr	r3, [pc, #816]	; (80093b8 <__ieee754_asin+0x340>)
 8009086:	b083      	sub	sp, #12
 8009088:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800908c:	4598      	cmp	r8, r3
 800908e:	9501      	str	r5, [sp, #4]
 8009090:	dd35      	ble.n	80090fe <__ieee754_asin+0x86>
 8009092:	ee10 3a10 	vmov	r3, s0
 8009096:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800909a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800909e:	ea58 0303 	orrs.w	r3, r8, r3
 80090a2:	d117      	bne.n	80090d4 <__ieee754_asin+0x5c>
 80090a4:	a3aa      	add	r3, pc, #680	; (adr r3, 8009350 <__ieee754_asin+0x2d8>)
 80090a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090aa:	ee10 0a10 	vmov	r0, s0
 80090ae:	4629      	mov	r1, r5
 80090b0:	f7f7 fab2 	bl	8000618 <__aeabi_dmul>
 80090b4:	a3a8      	add	r3, pc, #672	; (adr r3, 8009358 <__ieee754_asin+0x2e0>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	4606      	mov	r6, r0
 80090bc:	460f      	mov	r7, r1
 80090be:	4620      	mov	r0, r4
 80090c0:	4629      	mov	r1, r5
 80090c2:	f7f7 faa9 	bl	8000618 <__aeabi_dmul>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4630      	mov	r0, r6
 80090cc:	4639      	mov	r1, r7
 80090ce:	f7f7 f8ed 	bl	80002ac <__adddf3>
 80090d2:	e00b      	b.n	80090ec <__ieee754_asin+0x74>
 80090d4:	ee10 2a10 	vmov	r2, s0
 80090d8:	462b      	mov	r3, r5
 80090da:	ee10 0a10 	vmov	r0, s0
 80090de:	4629      	mov	r1, r5
 80090e0:	f7f7 f8e2 	bl	80002a8 <__aeabi_dsub>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	f7f7 fbc0 	bl	800086c <__aeabi_ddiv>
 80090ec:	4604      	mov	r4, r0
 80090ee:	460d      	mov	r5, r1
 80090f0:	ec45 4b10 	vmov	d0, r4, r5
 80090f4:	b003      	add	sp, #12
 80090f6:	ecbd 8b04 	vpop	{d8-d9}
 80090fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fe:	4baf      	ldr	r3, [pc, #700]	; (80093bc <__ieee754_asin+0x344>)
 8009100:	4598      	cmp	r8, r3
 8009102:	dc11      	bgt.n	8009128 <__ieee754_asin+0xb0>
 8009104:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009108:	f280 80ae 	bge.w	8009268 <__ieee754_asin+0x1f0>
 800910c:	a394      	add	r3, pc, #592	; (adr r3, 8009360 <__ieee754_asin+0x2e8>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	ee10 0a10 	vmov	r0, s0
 8009116:	4629      	mov	r1, r5
 8009118:	f7f7 f8c8 	bl	80002ac <__adddf3>
 800911c:	4ba8      	ldr	r3, [pc, #672]	; (80093c0 <__ieee754_asin+0x348>)
 800911e:	2200      	movs	r2, #0
 8009120:	f7f7 fd0a 	bl	8000b38 <__aeabi_dcmpgt>
 8009124:	2800      	cmp	r0, #0
 8009126:	d1e3      	bne.n	80090f0 <__ieee754_asin+0x78>
 8009128:	ec45 4b10 	vmov	d0, r4, r5
 800912c:	f001 f93e 	bl	800a3ac <fabs>
 8009130:	49a3      	ldr	r1, [pc, #652]	; (80093c0 <__ieee754_asin+0x348>)
 8009132:	ec53 2b10 	vmov	r2, r3, d0
 8009136:	2000      	movs	r0, #0
 8009138:	f7f7 f8b6 	bl	80002a8 <__aeabi_dsub>
 800913c:	4ba1      	ldr	r3, [pc, #644]	; (80093c4 <__ieee754_asin+0x34c>)
 800913e:	2200      	movs	r2, #0
 8009140:	f7f7 fa6a 	bl	8000618 <__aeabi_dmul>
 8009144:	a388      	add	r3, pc, #544	; (adr r3, 8009368 <__ieee754_asin+0x2f0>)
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	4604      	mov	r4, r0
 800914c:	460d      	mov	r5, r1
 800914e:	f7f7 fa63 	bl	8000618 <__aeabi_dmul>
 8009152:	a387      	add	r3, pc, #540	; (adr r3, 8009370 <__ieee754_asin+0x2f8>)
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	f7f7 f8a8 	bl	80002ac <__adddf3>
 800915c:	4622      	mov	r2, r4
 800915e:	462b      	mov	r3, r5
 8009160:	f7f7 fa5a 	bl	8000618 <__aeabi_dmul>
 8009164:	a384      	add	r3, pc, #528	; (adr r3, 8009378 <__ieee754_asin+0x300>)
 8009166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916a:	f7f7 f89d 	bl	80002a8 <__aeabi_dsub>
 800916e:	4622      	mov	r2, r4
 8009170:	462b      	mov	r3, r5
 8009172:	f7f7 fa51 	bl	8000618 <__aeabi_dmul>
 8009176:	a382      	add	r3, pc, #520	; (adr r3, 8009380 <__ieee754_asin+0x308>)
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	f7f7 f896 	bl	80002ac <__adddf3>
 8009180:	4622      	mov	r2, r4
 8009182:	462b      	mov	r3, r5
 8009184:	f7f7 fa48 	bl	8000618 <__aeabi_dmul>
 8009188:	a37f      	add	r3, pc, #508	; (adr r3, 8009388 <__ieee754_asin+0x310>)
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	f7f7 f88b 	bl	80002a8 <__aeabi_dsub>
 8009192:	4622      	mov	r2, r4
 8009194:	462b      	mov	r3, r5
 8009196:	f7f7 fa3f 	bl	8000618 <__aeabi_dmul>
 800919a:	a37d      	add	r3, pc, #500	; (adr r3, 8009390 <__ieee754_asin+0x318>)
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	f7f7 f884 	bl	80002ac <__adddf3>
 80091a4:	4622      	mov	r2, r4
 80091a6:	462b      	mov	r3, r5
 80091a8:	f7f7 fa36 	bl	8000618 <__aeabi_dmul>
 80091ac:	a37a      	add	r3, pc, #488	; (adr r3, 8009398 <__ieee754_asin+0x320>)
 80091ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b2:	ec41 0b18 	vmov	d8, r0, r1
 80091b6:	4620      	mov	r0, r4
 80091b8:	4629      	mov	r1, r5
 80091ba:	f7f7 fa2d 	bl	8000618 <__aeabi_dmul>
 80091be:	a378      	add	r3, pc, #480	; (adr r3, 80093a0 <__ieee754_asin+0x328>)
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	f7f7 f870 	bl	80002a8 <__aeabi_dsub>
 80091c8:	4622      	mov	r2, r4
 80091ca:	462b      	mov	r3, r5
 80091cc:	f7f7 fa24 	bl	8000618 <__aeabi_dmul>
 80091d0:	a375      	add	r3, pc, #468	; (adr r3, 80093a8 <__ieee754_asin+0x330>)
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	f7f7 f869 	bl	80002ac <__adddf3>
 80091da:	4622      	mov	r2, r4
 80091dc:	462b      	mov	r3, r5
 80091de:	f7f7 fa1b 	bl	8000618 <__aeabi_dmul>
 80091e2:	a373      	add	r3, pc, #460	; (adr r3, 80093b0 <__ieee754_asin+0x338>)
 80091e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e8:	f7f7 f85e 	bl	80002a8 <__aeabi_dsub>
 80091ec:	4622      	mov	r2, r4
 80091ee:	462b      	mov	r3, r5
 80091f0:	f7f7 fa12 	bl	8000618 <__aeabi_dmul>
 80091f4:	4b72      	ldr	r3, [pc, #456]	; (80093c0 <__ieee754_asin+0x348>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	f7f7 f858 	bl	80002ac <__adddf3>
 80091fc:	ec45 4b10 	vmov	d0, r4, r5
 8009200:	4606      	mov	r6, r0
 8009202:	460f      	mov	r7, r1
 8009204:	f000 fb56 	bl	80098b4 <__ieee754_sqrt>
 8009208:	4b6f      	ldr	r3, [pc, #444]	; (80093c8 <__ieee754_asin+0x350>)
 800920a:	4598      	cmp	r8, r3
 800920c:	ec5b ab10 	vmov	sl, fp, d0
 8009210:	f340 80dc 	ble.w	80093cc <__ieee754_asin+0x354>
 8009214:	4632      	mov	r2, r6
 8009216:	463b      	mov	r3, r7
 8009218:	ec51 0b18 	vmov	r0, r1, d8
 800921c:	f7f7 fb26 	bl	800086c <__aeabi_ddiv>
 8009220:	4652      	mov	r2, sl
 8009222:	465b      	mov	r3, fp
 8009224:	f7f7 f9f8 	bl	8000618 <__aeabi_dmul>
 8009228:	4652      	mov	r2, sl
 800922a:	465b      	mov	r3, fp
 800922c:	f7f7 f83e 	bl	80002ac <__adddf3>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	f7f7 f83a 	bl	80002ac <__adddf3>
 8009238:	a347      	add	r3, pc, #284	; (adr r3, 8009358 <__ieee754_asin+0x2e0>)
 800923a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923e:	f7f7 f833 	bl	80002a8 <__aeabi_dsub>
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	a142      	add	r1, pc, #264	; (adr r1, 8009350 <__ieee754_asin+0x2d8>)
 8009248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800924c:	f7f7 f82c 	bl	80002a8 <__aeabi_dsub>
 8009250:	9b01      	ldr	r3, [sp, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	bfdc      	itt	le
 8009256:	4602      	movle	r2, r0
 8009258:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800925c:	4604      	mov	r4, r0
 800925e:	460d      	mov	r5, r1
 8009260:	bfdc      	itt	le
 8009262:	4614      	movle	r4, r2
 8009264:	461d      	movle	r5, r3
 8009266:	e743      	b.n	80090f0 <__ieee754_asin+0x78>
 8009268:	ee10 2a10 	vmov	r2, s0
 800926c:	ee10 0a10 	vmov	r0, s0
 8009270:	462b      	mov	r3, r5
 8009272:	4629      	mov	r1, r5
 8009274:	f7f7 f9d0 	bl	8000618 <__aeabi_dmul>
 8009278:	a33b      	add	r3, pc, #236	; (adr r3, 8009368 <__ieee754_asin+0x2f0>)
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	4606      	mov	r6, r0
 8009280:	460f      	mov	r7, r1
 8009282:	f7f7 f9c9 	bl	8000618 <__aeabi_dmul>
 8009286:	a33a      	add	r3, pc, #232	; (adr r3, 8009370 <__ieee754_asin+0x2f8>)
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	f7f7 f80e 	bl	80002ac <__adddf3>
 8009290:	4632      	mov	r2, r6
 8009292:	463b      	mov	r3, r7
 8009294:	f7f7 f9c0 	bl	8000618 <__aeabi_dmul>
 8009298:	a337      	add	r3, pc, #220	; (adr r3, 8009378 <__ieee754_asin+0x300>)
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	f7f7 f803 	bl	80002a8 <__aeabi_dsub>
 80092a2:	4632      	mov	r2, r6
 80092a4:	463b      	mov	r3, r7
 80092a6:	f7f7 f9b7 	bl	8000618 <__aeabi_dmul>
 80092aa:	a335      	add	r3, pc, #212	; (adr r3, 8009380 <__ieee754_asin+0x308>)
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f7f6 fffc 	bl	80002ac <__adddf3>
 80092b4:	4632      	mov	r2, r6
 80092b6:	463b      	mov	r3, r7
 80092b8:	f7f7 f9ae 	bl	8000618 <__aeabi_dmul>
 80092bc:	a332      	add	r3, pc, #200	; (adr r3, 8009388 <__ieee754_asin+0x310>)
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	f7f6 fff1 	bl	80002a8 <__aeabi_dsub>
 80092c6:	4632      	mov	r2, r6
 80092c8:	463b      	mov	r3, r7
 80092ca:	f7f7 f9a5 	bl	8000618 <__aeabi_dmul>
 80092ce:	a330      	add	r3, pc, #192	; (adr r3, 8009390 <__ieee754_asin+0x318>)
 80092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d4:	f7f6 ffea 	bl	80002ac <__adddf3>
 80092d8:	4632      	mov	r2, r6
 80092da:	463b      	mov	r3, r7
 80092dc:	f7f7 f99c 	bl	8000618 <__aeabi_dmul>
 80092e0:	a32d      	add	r3, pc, #180	; (adr r3, 8009398 <__ieee754_asin+0x320>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	4680      	mov	r8, r0
 80092e8:	4689      	mov	r9, r1
 80092ea:	4630      	mov	r0, r6
 80092ec:	4639      	mov	r1, r7
 80092ee:	f7f7 f993 	bl	8000618 <__aeabi_dmul>
 80092f2:	a32b      	add	r3, pc, #172	; (adr r3, 80093a0 <__ieee754_asin+0x328>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	f7f6 ffd6 	bl	80002a8 <__aeabi_dsub>
 80092fc:	4632      	mov	r2, r6
 80092fe:	463b      	mov	r3, r7
 8009300:	f7f7 f98a 	bl	8000618 <__aeabi_dmul>
 8009304:	a328      	add	r3, pc, #160	; (adr r3, 80093a8 <__ieee754_asin+0x330>)
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	f7f6 ffcf 	bl	80002ac <__adddf3>
 800930e:	4632      	mov	r2, r6
 8009310:	463b      	mov	r3, r7
 8009312:	f7f7 f981 	bl	8000618 <__aeabi_dmul>
 8009316:	a326      	add	r3, pc, #152	; (adr r3, 80093b0 <__ieee754_asin+0x338>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	f7f6 ffc4 	bl	80002a8 <__aeabi_dsub>
 8009320:	4632      	mov	r2, r6
 8009322:	463b      	mov	r3, r7
 8009324:	f7f7 f978 	bl	8000618 <__aeabi_dmul>
 8009328:	4b25      	ldr	r3, [pc, #148]	; (80093c0 <__ieee754_asin+0x348>)
 800932a:	2200      	movs	r2, #0
 800932c:	f7f6 ffbe 	bl	80002ac <__adddf3>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	4640      	mov	r0, r8
 8009336:	4649      	mov	r1, r9
 8009338:	f7f7 fa98 	bl	800086c <__aeabi_ddiv>
 800933c:	4622      	mov	r2, r4
 800933e:	462b      	mov	r3, r5
 8009340:	f7f7 f96a 	bl	8000618 <__aeabi_dmul>
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	4620      	mov	r0, r4
 800934a:	4629      	mov	r1, r5
 800934c:	e6bf      	b.n	80090ce <__ieee754_asin+0x56>
 800934e:	bf00      	nop
 8009350:	54442d18 	.word	0x54442d18
 8009354:	3ff921fb 	.word	0x3ff921fb
 8009358:	33145c07 	.word	0x33145c07
 800935c:	3c91a626 	.word	0x3c91a626
 8009360:	8800759c 	.word	0x8800759c
 8009364:	7e37e43c 	.word	0x7e37e43c
 8009368:	0dfdf709 	.word	0x0dfdf709
 800936c:	3f023de1 	.word	0x3f023de1
 8009370:	7501b288 	.word	0x7501b288
 8009374:	3f49efe0 	.word	0x3f49efe0
 8009378:	b5688f3b 	.word	0xb5688f3b
 800937c:	3fa48228 	.word	0x3fa48228
 8009380:	0e884455 	.word	0x0e884455
 8009384:	3fc9c155 	.word	0x3fc9c155
 8009388:	03eb6f7d 	.word	0x03eb6f7d
 800938c:	3fd4d612 	.word	0x3fd4d612
 8009390:	55555555 	.word	0x55555555
 8009394:	3fc55555 	.word	0x3fc55555
 8009398:	b12e9282 	.word	0xb12e9282
 800939c:	3fb3b8c5 	.word	0x3fb3b8c5
 80093a0:	1b8d0159 	.word	0x1b8d0159
 80093a4:	3fe6066c 	.word	0x3fe6066c
 80093a8:	9c598ac8 	.word	0x9c598ac8
 80093ac:	40002ae5 	.word	0x40002ae5
 80093b0:	1c8a2d4b 	.word	0x1c8a2d4b
 80093b4:	40033a27 	.word	0x40033a27
 80093b8:	3fefffff 	.word	0x3fefffff
 80093bc:	3fdfffff 	.word	0x3fdfffff
 80093c0:	3ff00000 	.word	0x3ff00000
 80093c4:	3fe00000 	.word	0x3fe00000
 80093c8:	3fef3332 	.word	0x3fef3332
 80093cc:	ee10 2a10 	vmov	r2, s0
 80093d0:	ee10 0a10 	vmov	r0, s0
 80093d4:	465b      	mov	r3, fp
 80093d6:	4659      	mov	r1, fp
 80093d8:	f7f6 ff68 	bl	80002ac <__adddf3>
 80093dc:	4632      	mov	r2, r6
 80093de:	463b      	mov	r3, r7
 80093e0:	ec41 0b19 	vmov	d9, r0, r1
 80093e4:	ec51 0b18 	vmov	r0, r1, d8
 80093e8:	f7f7 fa40 	bl	800086c <__aeabi_ddiv>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	ec51 0b19 	vmov	r0, r1, d9
 80093f4:	f7f7 f910 	bl	8000618 <__aeabi_dmul>
 80093f8:	f04f 0800 	mov.w	r8, #0
 80093fc:	4606      	mov	r6, r0
 80093fe:	460f      	mov	r7, r1
 8009400:	4642      	mov	r2, r8
 8009402:	465b      	mov	r3, fp
 8009404:	4640      	mov	r0, r8
 8009406:	4659      	mov	r1, fp
 8009408:	f7f7 f906 	bl	8000618 <__aeabi_dmul>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4620      	mov	r0, r4
 8009412:	4629      	mov	r1, r5
 8009414:	f7f6 ff48 	bl	80002a8 <__aeabi_dsub>
 8009418:	4642      	mov	r2, r8
 800941a:	4604      	mov	r4, r0
 800941c:	460d      	mov	r5, r1
 800941e:	465b      	mov	r3, fp
 8009420:	4650      	mov	r0, sl
 8009422:	4659      	mov	r1, fp
 8009424:	f7f6 ff42 	bl	80002ac <__adddf3>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	4620      	mov	r0, r4
 800942e:	4629      	mov	r1, r5
 8009430:	f7f7 fa1c 	bl	800086c <__aeabi_ddiv>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	f7f6 ff38 	bl	80002ac <__adddf3>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	a113      	add	r1, pc, #76	; (adr r1, 8009490 <__ieee754_asin+0x418>)
 8009442:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009446:	f7f6 ff2f 	bl	80002a8 <__aeabi_dsub>
 800944a:	4602      	mov	r2, r0
 800944c:	460b      	mov	r3, r1
 800944e:	4630      	mov	r0, r6
 8009450:	4639      	mov	r1, r7
 8009452:	f7f6 ff29 	bl	80002a8 <__aeabi_dsub>
 8009456:	4642      	mov	r2, r8
 8009458:	4604      	mov	r4, r0
 800945a:	460d      	mov	r5, r1
 800945c:	465b      	mov	r3, fp
 800945e:	4640      	mov	r0, r8
 8009460:	4659      	mov	r1, fp
 8009462:	f7f6 ff23 	bl	80002ac <__adddf3>
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	a10b      	add	r1, pc, #44	; (adr r1, 8009498 <__ieee754_asin+0x420>)
 800946c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009470:	f7f6 ff1a 	bl	80002a8 <__aeabi_dsub>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	4620      	mov	r0, r4
 800947a:	4629      	mov	r1, r5
 800947c:	f7f6 ff14 	bl	80002a8 <__aeabi_dsub>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	a104      	add	r1, pc, #16	; (adr r1, 8009498 <__ieee754_asin+0x420>)
 8009486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800948a:	e6df      	b.n	800924c <__ieee754_asin+0x1d4>
 800948c:	f3af 8000 	nop.w
 8009490:	33145c07 	.word	0x33145c07
 8009494:	3c91a626 	.word	0x3c91a626
 8009498:	54442d18 	.word	0x54442d18
 800949c:	3fe921fb 	.word	0x3fe921fb

080094a0 <__ieee754_rem_pio2>:
 80094a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	ed2d 8b02 	vpush	{d8}
 80094a8:	ec55 4b10 	vmov	r4, r5, d0
 80094ac:	4bca      	ldr	r3, [pc, #808]	; (80097d8 <__ieee754_rem_pio2+0x338>)
 80094ae:	b08b      	sub	sp, #44	; 0x2c
 80094b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80094b4:	4598      	cmp	r8, r3
 80094b6:	4682      	mov	sl, r0
 80094b8:	9502      	str	r5, [sp, #8]
 80094ba:	dc08      	bgt.n	80094ce <__ieee754_rem_pio2+0x2e>
 80094bc:	2200      	movs	r2, #0
 80094be:	2300      	movs	r3, #0
 80094c0:	ed80 0b00 	vstr	d0, [r0]
 80094c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80094c8:	f04f 0b00 	mov.w	fp, #0
 80094cc:	e028      	b.n	8009520 <__ieee754_rem_pio2+0x80>
 80094ce:	4bc3      	ldr	r3, [pc, #780]	; (80097dc <__ieee754_rem_pio2+0x33c>)
 80094d0:	4598      	cmp	r8, r3
 80094d2:	dc78      	bgt.n	80095c6 <__ieee754_rem_pio2+0x126>
 80094d4:	9b02      	ldr	r3, [sp, #8]
 80094d6:	4ec2      	ldr	r6, [pc, #776]	; (80097e0 <__ieee754_rem_pio2+0x340>)
 80094d8:	2b00      	cmp	r3, #0
 80094da:	ee10 0a10 	vmov	r0, s0
 80094de:	a3b0      	add	r3, pc, #704	; (adr r3, 80097a0 <__ieee754_rem_pio2+0x300>)
 80094e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e4:	4629      	mov	r1, r5
 80094e6:	dd39      	ble.n	800955c <__ieee754_rem_pio2+0xbc>
 80094e8:	f7f6 fede 	bl	80002a8 <__aeabi_dsub>
 80094ec:	45b0      	cmp	r8, r6
 80094ee:	4604      	mov	r4, r0
 80094f0:	460d      	mov	r5, r1
 80094f2:	d01b      	beq.n	800952c <__ieee754_rem_pio2+0x8c>
 80094f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80097a8 <__ieee754_rem_pio2+0x308>)
 80094f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fa:	f7f6 fed5 	bl	80002a8 <__aeabi_dsub>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	e9ca 2300 	strd	r2, r3, [sl]
 8009506:	4620      	mov	r0, r4
 8009508:	4629      	mov	r1, r5
 800950a:	f7f6 fecd 	bl	80002a8 <__aeabi_dsub>
 800950e:	a3a6      	add	r3, pc, #664	; (adr r3, 80097a8 <__ieee754_rem_pio2+0x308>)
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	f7f6 fec8 	bl	80002a8 <__aeabi_dsub>
 8009518:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800951c:	f04f 0b01 	mov.w	fp, #1
 8009520:	4658      	mov	r0, fp
 8009522:	b00b      	add	sp, #44	; 0x2c
 8009524:	ecbd 8b02 	vpop	{d8}
 8009528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952c:	a3a0      	add	r3, pc, #640	; (adr r3, 80097b0 <__ieee754_rem_pio2+0x310>)
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	f7f6 feb9 	bl	80002a8 <__aeabi_dsub>
 8009536:	a3a0      	add	r3, pc, #640	; (adr r3, 80097b8 <__ieee754_rem_pio2+0x318>)
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	4604      	mov	r4, r0
 800953e:	460d      	mov	r5, r1
 8009540:	f7f6 feb2 	bl	80002a8 <__aeabi_dsub>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	e9ca 2300 	strd	r2, r3, [sl]
 800954c:	4620      	mov	r0, r4
 800954e:	4629      	mov	r1, r5
 8009550:	f7f6 feaa 	bl	80002a8 <__aeabi_dsub>
 8009554:	a398      	add	r3, pc, #608	; (adr r3, 80097b8 <__ieee754_rem_pio2+0x318>)
 8009556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955a:	e7db      	b.n	8009514 <__ieee754_rem_pio2+0x74>
 800955c:	f7f6 fea6 	bl	80002ac <__adddf3>
 8009560:	45b0      	cmp	r8, r6
 8009562:	4604      	mov	r4, r0
 8009564:	460d      	mov	r5, r1
 8009566:	d016      	beq.n	8009596 <__ieee754_rem_pio2+0xf6>
 8009568:	a38f      	add	r3, pc, #572	; (adr r3, 80097a8 <__ieee754_rem_pio2+0x308>)
 800956a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956e:	f7f6 fe9d 	bl	80002ac <__adddf3>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	e9ca 2300 	strd	r2, r3, [sl]
 800957a:	4620      	mov	r0, r4
 800957c:	4629      	mov	r1, r5
 800957e:	f7f6 fe93 	bl	80002a8 <__aeabi_dsub>
 8009582:	a389      	add	r3, pc, #548	; (adr r3, 80097a8 <__ieee754_rem_pio2+0x308>)
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	f7f6 fe90 	bl	80002ac <__adddf3>
 800958c:	f04f 3bff 	mov.w	fp, #4294967295
 8009590:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009594:	e7c4      	b.n	8009520 <__ieee754_rem_pio2+0x80>
 8009596:	a386      	add	r3, pc, #536	; (adr r3, 80097b0 <__ieee754_rem_pio2+0x310>)
 8009598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959c:	f7f6 fe86 	bl	80002ac <__adddf3>
 80095a0:	a385      	add	r3, pc, #532	; (adr r3, 80097b8 <__ieee754_rem_pio2+0x318>)
 80095a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a6:	4604      	mov	r4, r0
 80095a8:	460d      	mov	r5, r1
 80095aa:	f7f6 fe7f 	bl	80002ac <__adddf3>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	e9ca 2300 	strd	r2, r3, [sl]
 80095b6:	4620      	mov	r0, r4
 80095b8:	4629      	mov	r1, r5
 80095ba:	f7f6 fe75 	bl	80002a8 <__aeabi_dsub>
 80095be:	a37e      	add	r3, pc, #504	; (adr r3, 80097b8 <__ieee754_rem_pio2+0x318>)
 80095c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c4:	e7e0      	b.n	8009588 <__ieee754_rem_pio2+0xe8>
 80095c6:	4b87      	ldr	r3, [pc, #540]	; (80097e4 <__ieee754_rem_pio2+0x344>)
 80095c8:	4598      	cmp	r8, r3
 80095ca:	f300 80d9 	bgt.w	8009780 <__ieee754_rem_pio2+0x2e0>
 80095ce:	f000 feed 	bl	800a3ac <fabs>
 80095d2:	ec55 4b10 	vmov	r4, r5, d0
 80095d6:	ee10 0a10 	vmov	r0, s0
 80095da:	a379      	add	r3, pc, #484	; (adr r3, 80097c0 <__ieee754_rem_pio2+0x320>)
 80095dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e0:	4629      	mov	r1, r5
 80095e2:	f7f7 f819 	bl	8000618 <__aeabi_dmul>
 80095e6:	4b80      	ldr	r3, [pc, #512]	; (80097e8 <__ieee754_rem_pio2+0x348>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	f7f6 fe5f 	bl	80002ac <__adddf3>
 80095ee:	f7f7 fac3 	bl	8000b78 <__aeabi_d2iz>
 80095f2:	4683      	mov	fp, r0
 80095f4:	f7f6 ffa6 	bl	8000544 <__aeabi_i2d>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	ec43 2b18 	vmov	d8, r2, r3
 8009600:	a367      	add	r3, pc, #412	; (adr r3, 80097a0 <__ieee754_rem_pio2+0x300>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f7 f807 	bl	8000618 <__aeabi_dmul>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4620      	mov	r0, r4
 8009610:	4629      	mov	r1, r5
 8009612:	f7f6 fe49 	bl	80002a8 <__aeabi_dsub>
 8009616:	a364      	add	r3, pc, #400	; (adr r3, 80097a8 <__ieee754_rem_pio2+0x308>)
 8009618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961c:	4606      	mov	r6, r0
 800961e:	460f      	mov	r7, r1
 8009620:	ec51 0b18 	vmov	r0, r1, d8
 8009624:	f7f6 fff8 	bl	8000618 <__aeabi_dmul>
 8009628:	f1bb 0f1f 	cmp.w	fp, #31
 800962c:	4604      	mov	r4, r0
 800962e:	460d      	mov	r5, r1
 8009630:	dc0d      	bgt.n	800964e <__ieee754_rem_pio2+0x1ae>
 8009632:	4b6e      	ldr	r3, [pc, #440]	; (80097ec <__ieee754_rem_pio2+0x34c>)
 8009634:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800963c:	4543      	cmp	r3, r8
 800963e:	d006      	beq.n	800964e <__ieee754_rem_pio2+0x1ae>
 8009640:	4622      	mov	r2, r4
 8009642:	462b      	mov	r3, r5
 8009644:	4630      	mov	r0, r6
 8009646:	4639      	mov	r1, r7
 8009648:	f7f6 fe2e 	bl	80002a8 <__aeabi_dsub>
 800964c:	e00f      	b.n	800966e <__ieee754_rem_pio2+0x1ce>
 800964e:	462b      	mov	r3, r5
 8009650:	4622      	mov	r2, r4
 8009652:	4630      	mov	r0, r6
 8009654:	4639      	mov	r1, r7
 8009656:	f7f6 fe27 	bl	80002a8 <__aeabi_dsub>
 800965a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800965e:	9303      	str	r3, [sp, #12]
 8009660:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009664:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009668:	f1b8 0f10 	cmp.w	r8, #16
 800966c:	dc02      	bgt.n	8009674 <__ieee754_rem_pio2+0x1d4>
 800966e:	e9ca 0100 	strd	r0, r1, [sl]
 8009672:	e039      	b.n	80096e8 <__ieee754_rem_pio2+0x248>
 8009674:	a34e      	add	r3, pc, #312	; (adr r3, 80097b0 <__ieee754_rem_pio2+0x310>)
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	ec51 0b18 	vmov	r0, r1, d8
 800967e:	f7f6 ffcb 	bl	8000618 <__aeabi_dmul>
 8009682:	4604      	mov	r4, r0
 8009684:	460d      	mov	r5, r1
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4630      	mov	r0, r6
 800968c:	4639      	mov	r1, r7
 800968e:	f7f6 fe0b 	bl	80002a8 <__aeabi_dsub>
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	4680      	mov	r8, r0
 8009698:	4689      	mov	r9, r1
 800969a:	4630      	mov	r0, r6
 800969c:	4639      	mov	r1, r7
 800969e:	f7f6 fe03 	bl	80002a8 <__aeabi_dsub>
 80096a2:	4622      	mov	r2, r4
 80096a4:	462b      	mov	r3, r5
 80096a6:	f7f6 fdff 	bl	80002a8 <__aeabi_dsub>
 80096aa:	a343      	add	r3, pc, #268	; (adr r3, 80097b8 <__ieee754_rem_pio2+0x318>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	4604      	mov	r4, r0
 80096b2:	460d      	mov	r5, r1
 80096b4:	ec51 0b18 	vmov	r0, r1, d8
 80096b8:	f7f6 ffae 	bl	8000618 <__aeabi_dmul>
 80096bc:	4622      	mov	r2, r4
 80096be:	462b      	mov	r3, r5
 80096c0:	f7f6 fdf2 	bl	80002a8 <__aeabi_dsub>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	4604      	mov	r4, r0
 80096ca:	460d      	mov	r5, r1
 80096cc:	4640      	mov	r0, r8
 80096ce:	4649      	mov	r1, r9
 80096d0:	f7f6 fdea 	bl	80002a8 <__aeabi_dsub>
 80096d4:	9a03      	ldr	r2, [sp, #12]
 80096d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	2b31      	cmp	r3, #49	; 0x31
 80096de:	dc24      	bgt.n	800972a <__ieee754_rem_pio2+0x28a>
 80096e0:	e9ca 0100 	strd	r0, r1, [sl]
 80096e4:	4646      	mov	r6, r8
 80096e6:	464f      	mov	r7, r9
 80096e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80096ec:	4630      	mov	r0, r6
 80096ee:	4642      	mov	r2, r8
 80096f0:	464b      	mov	r3, r9
 80096f2:	4639      	mov	r1, r7
 80096f4:	f7f6 fdd8 	bl	80002a8 <__aeabi_dsub>
 80096f8:	462b      	mov	r3, r5
 80096fa:	4622      	mov	r2, r4
 80096fc:	f7f6 fdd4 	bl	80002a8 <__aeabi_dsub>
 8009700:	9b02      	ldr	r3, [sp, #8]
 8009702:	2b00      	cmp	r3, #0
 8009704:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009708:	f6bf af0a 	bge.w	8009520 <__ieee754_rem_pio2+0x80>
 800970c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009710:	f8ca 3004 	str.w	r3, [sl, #4]
 8009714:	f8ca 8000 	str.w	r8, [sl]
 8009718:	f8ca 0008 	str.w	r0, [sl, #8]
 800971c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009720:	f8ca 300c 	str.w	r3, [sl, #12]
 8009724:	f1cb 0b00 	rsb	fp, fp, #0
 8009728:	e6fa      	b.n	8009520 <__ieee754_rem_pio2+0x80>
 800972a:	a327      	add	r3, pc, #156	; (adr r3, 80097c8 <__ieee754_rem_pio2+0x328>)
 800972c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009730:	ec51 0b18 	vmov	r0, r1, d8
 8009734:	f7f6 ff70 	bl	8000618 <__aeabi_dmul>
 8009738:	4604      	mov	r4, r0
 800973a:	460d      	mov	r5, r1
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	4640      	mov	r0, r8
 8009742:	4649      	mov	r1, r9
 8009744:	f7f6 fdb0 	bl	80002a8 <__aeabi_dsub>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4606      	mov	r6, r0
 800974e:	460f      	mov	r7, r1
 8009750:	4640      	mov	r0, r8
 8009752:	4649      	mov	r1, r9
 8009754:	f7f6 fda8 	bl	80002a8 <__aeabi_dsub>
 8009758:	4622      	mov	r2, r4
 800975a:	462b      	mov	r3, r5
 800975c:	f7f6 fda4 	bl	80002a8 <__aeabi_dsub>
 8009760:	a31b      	add	r3, pc, #108	; (adr r3, 80097d0 <__ieee754_rem_pio2+0x330>)
 8009762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009766:	4604      	mov	r4, r0
 8009768:	460d      	mov	r5, r1
 800976a:	ec51 0b18 	vmov	r0, r1, d8
 800976e:	f7f6 ff53 	bl	8000618 <__aeabi_dmul>
 8009772:	4622      	mov	r2, r4
 8009774:	462b      	mov	r3, r5
 8009776:	f7f6 fd97 	bl	80002a8 <__aeabi_dsub>
 800977a:	4604      	mov	r4, r0
 800977c:	460d      	mov	r5, r1
 800977e:	e75f      	b.n	8009640 <__ieee754_rem_pio2+0x1a0>
 8009780:	4b1b      	ldr	r3, [pc, #108]	; (80097f0 <__ieee754_rem_pio2+0x350>)
 8009782:	4598      	cmp	r8, r3
 8009784:	dd36      	ble.n	80097f4 <__ieee754_rem_pio2+0x354>
 8009786:	ee10 2a10 	vmov	r2, s0
 800978a:	462b      	mov	r3, r5
 800978c:	4620      	mov	r0, r4
 800978e:	4629      	mov	r1, r5
 8009790:	f7f6 fd8a 	bl	80002a8 <__aeabi_dsub>
 8009794:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009798:	e9ca 0100 	strd	r0, r1, [sl]
 800979c:	e694      	b.n	80094c8 <__ieee754_rem_pio2+0x28>
 800979e:	bf00      	nop
 80097a0:	54400000 	.word	0x54400000
 80097a4:	3ff921fb 	.word	0x3ff921fb
 80097a8:	1a626331 	.word	0x1a626331
 80097ac:	3dd0b461 	.word	0x3dd0b461
 80097b0:	1a600000 	.word	0x1a600000
 80097b4:	3dd0b461 	.word	0x3dd0b461
 80097b8:	2e037073 	.word	0x2e037073
 80097bc:	3ba3198a 	.word	0x3ba3198a
 80097c0:	6dc9c883 	.word	0x6dc9c883
 80097c4:	3fe45f30 	.word	0x3fe45f30
 80097c8:	2e000000 	.word	0x2e000000
 80097cc:	3ba3198a 	.word	0x3ba3198a
 80097d0:	252049c1 	.word	0x252049c1
 80097d4:	397b839a 	.word	0x397b839a
 80097d8:	3fe921fb 	.word	0x3fe921fb
 80097dc:	4002d97b 	.word	0x4002d97b
 80097e0:	3ff921fb 	.word	0x3ff921fb
 80097e4:	413921fb 	.word	0x413921fb
 80097e8:	3fe00000 	.word	0x3fe00000
 80097ec:	0800ab0c 	.word	0x0800ab0c
 80097f0:	7fefffff 	.word	0x7fefffff
 80097f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80097f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80097fc:	ee10 0a10 	vmov	r0, s0
 8009800:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009804:	ee10 6a10 	vmov	r6, s0
 8009808:	460f      	mov	r7, r1
 800980a:	f7f7 f9b5 	bl	8000b78 <__aeabi_d2iz>
 800980e:	f7f6 fe99 	bl	8000544 <__aeabi_i2d>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4630      	mov	r0, r6
 8009818:	4639      	mov	r1, r7
 800981a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800981e:	f7f6 fd43 	bl	80002a8 <__aeabi_dsub>
 8009822:	4b22      	ldr	r3, [pc, #136]	; (80098ac <__ieee754_rem_pio2+0x40c>)
 8009824:	2200      	movs	r2, #0
 8009826:	f7f6 fef7 	bl	8000618 <__aeabi_dmul>
 800982a:	460f      	mov	r7, r1
 800982c:	4606      	mov	r6, r0
 800982e:	f7f7 f9a3 	bl	8000b78 <__aeabi_d2iz>
 8009832:	f7f6 fe87 	bl	8000544 <__aeabi_i2d>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4630      	mov	r0, r6
 800983c:	4639      	mov	r1, r7
 800983e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009842:	f7f6 fd31 	bl	80002a8 <__aeabi_dsub>
 8009846:	4b19      	ldr	r3, [pc, #100]	; (80098ac <__ieee754_rem_pio2+0x40c>)
 8009848:	2200      	movs	r2, #0
 800984a:	f7f6 fee5 	bl	8000618 <__aeabi_dmul>
 800984e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009852:	ad04      	add	r5, sp, #16
 8009854:	f04f 0803 	mov.w	r8, #3
 8009858:	46a9      	mov	r9, r5
 800985a:	2600      	movs	r6, #0
 800985c:	2700      	movs	r7, #0
 800985e:	4632      	mov	r2, r6
 8009860:	463b      	mov	r3, r7
 8009862:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009866:	46c3      	mov	fp, r8
 8009868:	3d08      	subs	r5, #8
 800986a:	f108 38ff 	add.w	r8, r8, #4294967295
 800986e:	f7f7 f93b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009872:	2800      	cmp	r0, #0
 8009874:	d1f3      	bne.n	800985e <__ieee754_rem_pio2+0x3be>
 8009876:	4b0e      	ldr	r3, [pc, #56]	; (80098b0 <__ieee754_rem_pio2+0x410>)
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	2302      	movs	r3, #2
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	4622      	mov	r2, r4
 8009880:	465b      	mov	r3, fp
 8009882:	4651      	mov	r1, sl
 8009884:	4648      	mov	r0, r9
 8009886:	f000 f993 	bl	8009bb0 <__kernel_rem_pio2>
 800988a:	9b02      	ldr	r3, [sp, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	4683      	mov	fp, r0
 8009890:	f6bf ae46 	bge.w	8009520 <__ieee754_rem_pio2+0x80>
 8009894:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009898:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800989c:	f8ca 3004 	str.w	r3, [sl, #4]
 80098a0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80098a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80098a8:	e73a      	b.n	8009720 <__ieee754_rem_pio2+0x280>
 80098aa:	bf00      	nop
 80098ac:	41700000 	.word	0x41700000
 80098b0:	0800ab8c 	.word	0x0800ab8c

080098b4 <__ieee754_sqrt>:
 80098b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b8:	ec55 4b10 	vmov	r4, r5, d0
 80098bc:	4e56      	ldr	r6, [pc, #344]	; (8009a18 <__ieee754_sqrt+0x164>)
 80098be:	43ae      	bics	r6, r5
 80098c0:	ee10 0a10 	vmov	r0, s0
 80098c4:	ee10 3a10 	vmov	r3, s0
 80098c8:	4629      	mov	r1, r5
 80098ca:	462a      	mov	r2, r5
 80098cc:	d110      	bne.n	80098f0 <__ieee754_sqrt+0x3c>
 80098ce:	ee10 2a10 	vmov	r2, s0
 80098d2:	462b      	mov	r3, r5
 80098d4:	f7f6 fea0 	bl	8000618 <__aeabi_dmul>
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	4620      	mov	r0, r4
 80098de:	4629      	mov	r1, r5
 80098e0:	f7f6 fce4 	bl	80002ac <__adddf3>
 80098e4:	4604      	mov	r4, r0
 80098e6:	460d      	mov	r5, r1
 80098e8:	ec45 4b10 	vmov	d0, r4, r5
 80098ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f0:	2d00      	cmp	r5, #0
 80098f2:	dc10      	bgt.n	8009916 <__ieee754_sqrt+0x62>
 80098f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80098f8:	4330      	orrs	r0, r6
 80098fa:	d0f5      	beq.n	80098e8 <__ieee754_sqrt+0x34>
 80098fc:	b15d      	cbz	r5, 8009916 <__ieee754_sqrt+0x62>
 80098fe:	ee10 2a10 	vmov	r2, s0
 8009902:	462b      	mov	r3, r5
 8009904:	ee10 0a10 	vmov	r0, s0
 8009908:	f7f6 fcce 	bl	80002a8 <__aeabi_dsub>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	f7f6 ffac 	bl	800086c <__aeabi_ddiv>
 8009914:	e7e6      	b.n	80098e4 <__ieee754_sqrt+0x30>
 8009916:	1509      	asrs	r1, r1, #20
 8009918:	d076      	beq.n	8009a08 <__ieee754_sqrt+0x154>
 800991a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800991e:	07ce      	lsls	r6, r1, #31
 8009920:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009924:	bf5e      	ittt	pl
 8009926:	0fda      	lsrpl	r2, r3, #31
 8009928:	005b      	lslpl	r3, r3, #1
 800992a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800992e:	0fda      	lsrs	r2, r3, #31
 8009930:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009934:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009938:	2000      	movs	r0, #0
 800993a:	106d      	asrs	r5, r5, #1
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	f04f 0e16 	mov.w	lr, #22
 8009942:	4684      	mov	ip, r0
 8009944:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009948:	eb0c 0401 	add.w	r4, ip, r1
 800994c:	4294      	cmp	r4, r2
 800994e:	bfde      	ittt	le
 8009950:	1b12      	suble	r2, r2, r4
 8009952:	eb04 0c01 	addle.w	ip, r4, r1
 8009956:	1840      	addle	r0, r0, r1
 8009958:	0052      	lsls	r2, r2, #1
 800995a:	f1be 0e01 	subs.w	lr, lr, #1
 800995e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009962:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009966:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800996a:	d1ed      	bne.n	8009948 <__ieee754_sqrt+0x94>
 800996c:	4671      	mov	r1, lr
 800996e:	2720      	movs	r7, #32
 8009970:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009974:	4562      	cmp	r2, ip
 8009976:	eb04 060e 	add.w	r6, r4, lr
 800997a:	dc02      	bgt.n	8009982 <__ieee754_sqrt+0xce>
 800997c:	d113      	bne.n	80099a6 <__ieee754_sqrt+0xf2>
 800997e:	429e      	cmp	r6, r3
 8009980:	d811      	bhi.n	80099a6 <__ieee754_sqrt+0xf2>
 8009982:	2e00      	cmp	r6, #0
 8009984:	eb06 0e04 	add.w	lr, r6, r4
 8009988:	da43      	bge.n	8009a12 <__ieee754_sqrt+0x15e>
 800998a:	f1be 0f00 	cmp.w	lr, #0
 800998e:	db40      	blt.n	8009a12 <__ieee754_sqrt+0x15e>
 8009990:	f10c 0801 	add.w	r8, ip, #1
 8009994:	eba2 020c 	sub.w	r2, r2, ip
 8009998:	429e      	cmp	r6, r3
 800999a:	bf88      	it	hi
 800999c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80099a0:	1b9b      	subs	r3, r3, r6
 80099a2:	4421      	add	r1, r4
 80099a4:	46c4      	mov	ip, r8
 80099a6:	0052      	lsls	r2, r2, #1
 80099a8:	3f01      	subs	r7, #1
 80099aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80099ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80099b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80099b6:	d1dd      	bne.n	8009974 <__ieee754_sqrt+0xc0>
 80099b8:	4313      	orrs	r3, r2
 80099ba:	d006      	beq.n	80099ca <__ieee754_sqrt+0x116>
 80099bc:	1c4c      	adds	r4, r1, #1
 80099be:	bf13      	iteet	ne
 80099c0:	3101      	addne	r1, #1
 80099c2:	3001      	addeq	r0, #1
 80099c4:	4639      	moveq	r1, r7
 80099c6:	f021 0101 	bicne.w	r1, r1, #1
 80099ca:	1043      	asrs	r3, r0, #1
 80099cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80099d0:	0849      	lsrs	r1, r1, #1
 80099d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80099d6:	07c2      	lsls	r2, r0, #31
 80099d8:	bf48      	it	mi
 80099da:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80099de:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80099e2:	460c      	mov	r4, r1
 80099e4:	463d      	mov	r5, r7
 80099e6:	e77f      	b.n	80098e8 <__ieee754_sqrt+0x34>
 80099e8:	0ada      	lsrs	r2, r3, #11
 80099ea:	3815      	subs	r0, #21
 80099ec:	055b      	lsls	r3, r3, #21
 80099ee:	2a00      	cmp	r2, #0
 80099f0:	d0fa      	beq.n	80099e8 <__ieee754_sqrt+0x134>
 80099f2:	02d7      	lsls	r7, r2, #11
 80099f4:	d50a      	bpl.n	8009a0c <__ieee754_sqrt+0x158>
 80099f6:	f1c1 0420 	rsb	r4, r1, #32
 80099fa:	fa23 f404 	lsr.w	r4, r3, r4
 80099fe:	1e4d      	subs	r5, r1, #1
 8009a00:	408b      	lsls	r3, r1
 8009a02:	4322      	orrs	r2, r4
 8009a04:	1b41      	subs	r1, r0, r5
 8009a06:	e788      	b.n	800991a <__ieee754_sqrt+0x66>
 8009a08:	4608      	mov	r0, r1
 8009a0a:	e7f0      	b.n	80099ee <__ieee754_sqrt+0x13a>
 8009a0c:	0052      	lsls	r2, r2, #1
 8009a0e:	3101      	adds	r1, #1
 8009a10:	e7ef      	b.n	80099f2 <__ieee754_sqrt+0x13e>
 8009a12:	46e0      	mov	r8, ip
 8009a14:	e7be      	b.n	8009994 <__ieee754_sqrt+0xe0>
 8009a16:	bf00      	nop
 8009a18:	7ff00000 	.word	0x7ff00000
 8009a1c:	00000000 	.word	0x00000000

08009a20 <__kernel_cos>:
 8009a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	ec57 6b10 	vmov	r6, r7, d0
 8009a28:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009a2c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009a30:	ed8d 1b00 	vstr	d1, [sp]
 8009a34:	da07      	bge.n	8009a46 <__kernel_cos+0x26>
 8009a36:	ee10 0a10 	vmov	r0, s0
 8009a3a:	4639      	mov	r1, r7
 8009a3c:	f7f7 f89c 	bl	8000b78 <__aeabi_d2iz>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	f000 8088 	beq.w	8009b56 <__kernel_cos+0x136>
 8009a46:	4632      	mov	r2, r6
 8009a48:	463b      	mov	r3, r7
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	4639      	mov	r1, r7
 8009a4e:	f7f6 fde3 	bl	8000618 <__aeabi_dmul>
 8009a52:	4b51      	ldr	r3, [pc, #324]	; (8009b98 <__kernel_cos+0x178>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	4604      	mov	r4, r0
 8009a58:	460d      	mov	r5, r1
 8009a5a:	f7f6 fddd 	bl	8000618 <__aeabi_dmul>
 8009a5e:	a340      	add	r3, pc, #256	; (adr r3, 8009b60 <__kernel_cos+0x140>)
 8009a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a64:	4682      	mov	sl, r0
 8009a66:	468b      	mov	fp, r1
 8009a68:	4620      	mov	r0, r4
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	f7f6 fdd4 	bl	8000618 <__aeabi_dmul>
 8009a70:	a33d      	add	r3, pc, #244	; (adr r3, 8009b68 <__kernel_cos+0x148>)
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	f7f6 fc19 	bl	80002ac <__adddf3>
 8009a7a:	4622      	mov	r2, r4
 8009a7c:	462b      	mov	r3, r5
 8009a7e:	f7f6 fdcb 	bl	8000618 <__aeabi_dmul>
 8009a82:	a33b      	add	r3, pc, #236	; (adr r3, 8009b70 <__kernel_cos+0x150>)
 8009a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a88:	f7f6 fc0e 	bl	80002a8 <__aeabi_dsub>
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	462b      	mov	r3, r5
 8009a90:	f7f6 fdc2 	bl	8000618 <__aeabi_dmul>
 8009a94:	a338      	add	r3, pc, #224	; (adr r3, 8009b78 <__kernel_cos+0x158>)
 8009a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9a:	f7f6 fc07 	bl	80002ac <__adddf3>
 8009a9e:	4622      	mov	r2, r4
 8009aa0:	462b      	mov	r3, r5
 8009aa2:	f7f6 fdb9 	bl	8000618 <__aeabi_dmul>
 8009aa6:	a336      	add	r3, pc, #216	; (adr r3, 8009b80 <__kernel_cos+0x160>)
 8009aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aac:	f7f6 fbfc 	bl	80002a8 <__aeabi_dsub>
 8009ab0:	4622      	mov	r2, r4
 8009ab2:	462b      	mov	r3, r5
 8009ab4:	f7f6 fdb0 	bl	8000618 <__aeabi_dmul>
 8009ab8:	a333      	add	r3, pc, #204	; (adr r3, 8009b88 <__kernel_cos+0x168>)
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f7f6 fbf5 	bl	80002ac <__adddf3>
 8009ac2:	4622      	mov	r2, r4
 8009ac4:	462b      	mov	r3, r5
 8009ac6:	f7f6 fda7 	bl	8000618 <__aeabi_dmul>
 8009aca:	4622      	mov	r2, r4
 8009acc:	462b      	mov	r3, r5
 8009ace:	f7f6 fda3 	bl	8000618 <__aeabi_dmul>
 8009ad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	460d      	mov	r5, r1
 8009ada:	4630      	mov	r0, r6
 8009adc:	4639      	mov	r1, r7
 8009ade:	f7f6 fd9b 	bl	8000618 <__aeabi_dmul>
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f7f6 fbdd 	bl	80002a8 <__aeabi_dsub>
 8009aee:	4b2b      	ldr	r3, [pc, #172]	; (8009b9c <__kernel_cos+0x17c>)
 8009af0:	4598      	cmp	r8, r3
 8009af2:	4606      	mov	r6, r0
 8009af4:	460f      	mov	r7, r1
 8009af6:	dc10      	bgt.n	8009b1a <__kernel_cos+0xfa>
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	4650      	mov	r0, sl
 8009afe:	4659      	mov	r1, fp
 8009b00:	f7f6 fbd2 	bl	80002a8 <__aeabi_dsub>
 8009b04:	460b      	mov	r3, r1
 8009b06:	4926      	ldr	r1, [pc, #152]	; (8009ba0 <__kernel_cos+0x180>)
 8009b08:	4602      	mov	r2, r0
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	f7f6 fbcc 	bl	80002a8 <__aeabi_dsub>
 8009b10:	ec41 0b10 	vmov	d0, r0, r1
 8009b14:	b003      	add	sp, #12
 8009b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1a:	4b22      	ldr	r3, [pc, #136]	; (8009ba4 <__kernel_cos+0x184>)
 8009b1c:	4920      	ldr	r1, [pc, #128]	; (8009ba0 <__kernel_cos+0x180>)
 8009b1e:	4598      	cmp	r8, r3
 8009b20:	bfcc      	ite	gt
 8009b22:	4d21      	ldrgt	r5, [pc, #132]	; (8009ba8 <__kernel_cos+0x188>)
 8009b24:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009b28:	2400      	movs	r4, #0
 8009b2a:	4622      	mov	r2, r4
 8009b2c:	462b      	mov	r3, r5
 8009b2e:	2000      	movs	r0, #0
 8009b30:	f7f6 fbba 	bl	80002a8 <__aeabi_dsub>
 8009b34:	4622      	mov	r2, r4
 8009b36:	4680      	mov	r8, r0
 8009b38:	4689      	mov	r9, r1
 8009b3a:	462b      	mov	r3, r5
 8009b3c:	4650      	mov	r0, sl
 8009b3e:	4659      	mov	r1, fp
 8009b40:	f7f6 fbb2 	bl	80002a8 <__aeabi_dsub>
 8009b44:	4632      	mov	r2, r6
 8009b46:	463b      	mov	r3, r7
 8009b48:	f7f6 fbae 	bl	80002a8 <__aeabi_dsub>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4640      	mov	r0, r8
 8009b52:	4649      	mov	r1, r9
 8009b54:	e7da      	b.n	8009b0c <__kernel_cos+0xec>
 8009b56:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009b90 <__kernel_cos+0x170>
 8009b5a:	e7db      	b.n	8009b14 <__kernel_cos+0xf4>
 8009b5c:	f3af 8000 	nop.w
 8009b60:	be8838d4 	.word	0xbe8838d4
 8009b64:	bda8fae9 	.word	0xbda8fae9
 8009b68:	bdb4b1c4 	.word	0xbdb4b1c4
 8009b6c:	3e21ee9e 	.word	0x3e21ee9e
 8009b70:	809c52ad 	.word	0x809c52ad
 8009b74:	3e927e4f 	.word	0x3e927e4f
 8009b78:	19cb1590 	.word	0x19cb1590
 8009b7c:	3efa01a0 	.word	0x3efa01a0
 8009b80:	16c15177 	.word	0x16c15177
 8009b84:	3f56c16c 	.word	0x3f56c16c
 8009b88:	5555554c 	.word	0x5555554c
 8009b8c:	3fa55555 	.word	0x3fa55555
 8009b90:	00000000 	.word	0x00000000
 8009b94:	3ff00000 	.word	0x3ff00000
 8009b98:	3fe00000 	.word	0x3fe00000
 8009b9c:	3fd33332 	.word	0x3fd33332
 8009ba0:	3ff00000 	.word	0x3ff00000
 8009ba4:	3fe90000 	.word	0x3fe90000
 8009ba8:	3fd20000 	.word	0x3fd20000
 8009bac:	00000000 	.word	0x00000000

08009bb0 <__kernel_rem_pio2>:
 8009bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb4:	ed2d 8b02 	vpush	{d8}
 8009bb8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009bbc:	f112 0f14 	cmn.w	r2, #20
 8009bc0:	9308      	str	r3, [sp, #32]
 8009bc2:	9101      	str	r1, [sp, #4]
 8009bc4:	4bc6      	ldr	r3, [pc, #792]	; (8009ee0 <__kernel_rem_pio2+0x330>)
 8009bc6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009bc8:	9009      	str	r0, [sp, #36]	; 0x24
 8009bca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009bce:	9304      	str	r3, [sp, #16]
 8009bd0:	9b08      	ldr	r3, [sp, #32]
 8009bd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009bd6:	bfa8      	it	ge
 8009bd8:	1ed4      	subge	r4, r2, #3
 8009bda:	9306      	str	r3, [sp, #24]
 8009bdc:	bfb2      	itee	lt
 8009bde:	2400      	movlt	r4, #0
 8009be0:	2318      	movge	r3, #24
 8009be2:	fb94 f4f3 	sdivge	r4, r4, r3
 8009be6:	f06f 0317 	mvn.w	r3, #23
 8009bea:	fb04 3303 	mla	r3, r4, r3, r3
 8009bee:	eb03 0a02 	add.w	sl, r3, r2
 8009bf2:	9b04      	ldr	r3, [sp, #16]
 8009bf4:	9a06      	ldr	r2, [sp, #24]
 8009bf6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009ed0 <__kernel_rem_pio2+0x320>
 8009bfa:	eb03 0802 	add.w	r8, r3, r2
 8009bfe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009c00:	1aa7      	subs	r7, r4, r2
 8009c02:	ae20      	add	r6, sp, #128	; 0x80
 8009c04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009c08:	2500      	movs	r5, #0
 8009c0a:	4545      	cmp	r5, r8
 8009c0c:	dd18      	ble.n	8009c40 <__kernel_rem_pio2+0x90>
 8009c0e:	9b08      	ldr	r3, [sp, #32]
 8009c10:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009c14:	aa20      	add	r2, sp, #128	; 0x80
 8009c16:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009ed0 <__kernel_rem_pio2+0x320>
 8009c1a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009c1e:	f1c3 0301 	rsb	r3, r3, #1
 8009c22:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009c26:	9307      	str	r3, [sp, #28]
 8009c28:	9b07      	ldr	r3, [sp, #28]
 8009c2a:	9a04      	ldr	r2, [sp, #16]
 8009c2c:	4443      	add	r3, r8
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	db2f      	blt.n	8009c92 <__kernel_rem_pio2+0xe2>
 8009c32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009c36:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009c3a:	462f      	mov	r7, r5
 8009c3c:	2600      	movs	r6, #0
 8009c3e:	e01b      	b.n	8009c78 <__kernel_rem_pio2+0xc8>
 8009c40:	42ef      	cmn	r7, r5
 8009c42:	d407      	bmi.n	8009c54 <__kernel_rem_pio2+0xa4>
 8009c44:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009c48:	f7f6 fc7c 	bl	8000544 <__aeabi_i2d>
 8009c4c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009c50:	3501      	adds	r5, #1
 8009c52:	e7da      	b.n	8009c0a <__kernel_rem_pio2+0x5a>
 8009c54:	ec51 0b18 	vmov	r0, r1, d8
 8009c58:	e7f8      	b.n	8009c4c <__kernel_rem_pio2+0x9c>
 8009c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c5e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009c62:	f7f6 fcd9 	bl	8000618 <__aeabi_dmul>
 8009c66:	4602      	mov	r2, r0
 8009c68:	460b      	mov	r3, r1
 8009c6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c6e:	f7f6 fb1d 	bl	80002ac <__adddf3>
 8009c72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c76:	3601      	adds	r6, #1
 8009c78:	9b06      	ldr	r3, [sp, #24]
 8009c7a:	429e      	cmp	r6, r3
 8009c7c:	f1a7 0708 	sub.w	r7, r7, #8
 8009c80:	ddeb      	ble.n	8009c5a <__kernel_rem_pio2+0xaa>
 8009c82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c86:	3508      	adds	r5, #8
 8009c88:	ecab 7b02 	vstmia	fp!, {d7}
 8009c8c:	f108 0801 	add.w	r8, r8, #1
 8009c90:	e7ca      	b.n	8009c28 <__kernel_rem_pio2+0x78>
 8009c92:	9b04      	ldr	r3, [sp, #16]
 8009c94:	aa0c      	add	r2, sp, #48	; 0x30
 8009c96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c9c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009c9e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009ca2:	9c04      	ldr	r4, [sp, #16]
 8009ca4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ca6:	ab98      	add	r3, sp, #608	; 0x260
 8009ca8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009cac:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009cb0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009cb4:	f8cd b008 	str.w	fp, [sp, #8]
 8009cb8:	4625      	mov	r5, r4
 8009cba:	2d00      	cmp	r5, #0
 8009cbc:	dc78      	bgt.n	8009db0 <__kernel_rem_pio2+0x200>
 8009cbe:	ec47 6b10 	vmov	d0, r6, r7
 8009cc2:	4650      	mov	r0, sl
 8009cc4:	f000 fbfc 	bl	800a4c0 <scalbn>
 8009cc8:	ec57 6b10 	vmov	r6, r7, d0
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009cd2:	ee10 0a10 	vmov	r0, s0
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	f7f6 fc9e 	bl	8000618 <__aeabi_dmul>
 8009cdc:	ec41 0b10 	vmov	d0, r0, r1
 8009ce0:	f000 fb6e 	bl	800a3c0 <floor>
 8009ce4:	4b7f      	ldr	r3, [pc, #508]	; (8009ee4 <__kernel_rem_pio2+0x334>)
 8009ce6:	ec51 0b10 	vmov	r0, r1, d0
 8009cea:	2200      	movs	r2, #0
 8009cec:	f7f6 fc94 	bl	8000618 <__aeabi_dmul>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	f7f6 fad6 	bl	80002a8 <__aeabi_dsub>
 8009cfc:	460f      	mov	r7, r1
 8009cfe:	4606      	mov	r6, r0
 8009d00:	f7f6 ff3a 	bl	8000b78 <__aeabi_d2iz>
 8009d04:	9007      	str	r0, [sp, #28]
 8009d06:	f7f6 fc1d 	bl	8000544 <__aeabi_i2d>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	4630      	mov	r0, r6
 8009d10:	4639      	mov	r1, r7
 8009d12:	f7f6 fac9 	bl	80002a8 <__aeabi_dsub>
 8009d16:	f1ba 0f00 	cmp.w	sl, #0
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	460f      	mov	r7, r1
 8009d1e:	dd70      	ble.n	8009e02 <__kernel_rem_pio2+0x252>
 8009d20:	1e62      	subs	r2, r4, #1
 8009d22:	ab0c      	add	r3, sp, #48	; 0x30
 8009d24:	9d07      	ldr	r5, [sp, #28]
 8009d26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009d2a:	f1ca 0118 	rsb	r1, sl, #24
 8009d2e:	fa40 f301 	asr.w	r3, r0, r1
 8009d32:	441d      	add	r5, r3
 8009d34:	408b      	lsls	r3, r1
 8009d36:	1ac0      	subs	r0, r0, r3
 8009d38:	ab0c      	add	r3, sp, #48	; 0x30
 8009d3a:	9507      	str	r5, [sp, #28]
 8009d3c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009d40:	f1ca 0317 	rsb	r3, sl, #23
 8009d44:	fa40 f303 	asr.w	r3, r0, r3
 8009d48:	9302      	str	r3, [sp, #8]
 8009d4a:	9b02      	ldr	r3, [sp, #8]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dd66      	ble.n	8009e1e <__kernel_rem_pio2+0x26e>
 8009d50:	9b07      	ldr	r3, [sp, #28]
 8009d52:	2200      	movs	r2, #0
 8009d54:	3301      	adds	r3, #1
 8009d56:	9307      	str	r3, [sp, #28]
 8009d58:	4615      	mov	r5, r2
 8009d5a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009d5e:	4294      	cmp	r4, r2
 8009d60:	f300 8099 	bgt.w	8009e96 <__kernel_rem_pio2+0x2e6>
 8009d64:	f1ba 0f00 	cmp.w	sl, #0
 8009d68:	dd07      	ble.n	8009d7a <__kernel_rem_pio2+0x1ca>
 8009d6a:	f1ba 0f01 	cmp.w	sl, #1
 8009d6e:	f000 80a5 	beq.w	8009ebc <__kernel_rem_pio2+0x30c>
 8009d72:	f1ba 0f02 	cmp.w	sl, #2
 8009d76:	f000 80c1 	beq.w	8009efc <__kernel_rem_pio2+0x34c>
 8009d7a:	9b02      	ldr	r3, [sp, #8]
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d14e      	bne.n	8009e1e <__kernel_rem_pio2+0x26e>
 8009d80:	4632      	mov	r2, r6
 8009d82:	463b      	mov	r3, r7
 8009d84:	4958      	ldr	r1, [pc, #352]	; (8009ee8 <__kernel_rem_pio2+0x338>)
 8009d86:	2000      	movs	r0, #0
 8009d88:	f7f6 fa8e 	bl	80002a8 <__aeabi_dsub>
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	460f      	mov	r7, r1
 8009d90:	2d00      	cmp	r5, #0
 8009d92:	d044      	beq.n	8009e1e <__kernel_rem_pio2+0x26e>
 8009d94:	4650      	mov	r0, sl
 8009d96:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009ed8 <__kernel_rem_pio2+0x328>
 8009d9a:	f000 fb91 	bl	800a4c0 <scalbn>
 8009d9e:	4630      	mov	r0, r6
 8009da0:	4639      	mov	r1, r7
 8009da2:	ec53 2b10 	vmov	r2, r3, d0
 8009da6:	f7f6 fa7f 	bl	80002a8 <__aeabi_dsub>
 8009daa:	4606      	mov	r6, r0
 8009dac:	460f      	mov	r7, r1
 8009dae:	e036      	b.n	8009e1e <__kernel_rem_pio2+0x26e>
 8009db0:	4b4e      	ldr	r3, [pc, #312]	; (8009eec <__kernel_rem_pio2+0x33c>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	4630      	mov	r0, r6
 8009db6:	4639      	mov	r1, r7
 8009db8:	f7f6 fc2e 	bl	8000618 <__aeabi_dmul>
 8009dbc:	f7f6 fedc 	bl	8000b78 <__aeabi_d2iz>
 8009dc0:	f7f6 fbc0 	bl	8000544 <__aeabi_i2d>
 8009dc4:	4b4a      	ldr	r3, [pc, #296]	; (8009ef0 <__kernel_rem_pio2+0x340>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	4680      	mov	r8, r0
 8009dca:	4689      	mov	r9, r1
 8009dcc:	f7f6 fc24 	bl	8000618 <__aeabi_dmul>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	f7f6 fa66 	bl	80002a8 <__aeabi_dsub>
 8009ddc:	f7f6 fecc 	bl	8000b78 <__aeabi_d2iz>
 8009de0:	9b02      	ldr	r3, [sp, #8]
 8009de2:	f843 0b04 	str.w	r0, [r3], #4
 8009de6:	3d01      	subs	r5, #1
 8009de8:	9302      	str	r3, [sp, #8]
 8009dea:	ab70      	add	r3, sp, #448	; 0x1c0
 8009dec:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	4640      	mov	r0, r8
 8009df6:	4649      	mov	r1, r9
 8009df8:	f7f6 fa58 	bl	80002ac <__adddf3>
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	460f      	mov	r7, r1
 8009e00:	e75b      	b.n	8009cba <__kernel_rem_pio2+0x10a>
 8009e02:	d105      	bne.n	8009e10 <__kernel_rem_pio2+0x260>
 8009e04:	1e63      	subs	r3, r4, #1
 8009e06:	aa0c      	add	r2, sp, #48	; 0x30
 8009e08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009e0c:	15c3      	asrs	r3, r0, #23
 8009e0e:	e79b      	b.n	8009d48 <__kernel_rem_pio2+0x198>
 8009e10:	4b38      	ldr	r3, [pc, #224]	; (8009ef4 <__kernel_rem_pio2+0x344>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	f7f6 fe86 	bl	8000b24 <__aeabi_dcmpge>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	d139      	bne.n	8009e90 <__kernel_rem_pio2+0x2e0>
 8009e1c:	9002      	str	r0, [sp, #8]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	2300      	movs	r3, #0
 8009e22:	4630      	mov	r0, r6
 8009e24:	4639      	mov	r1, r7
 8009e26:	f7f6 fe5f 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	f000 80b4 	beq.w	8009f98 <__kernel_rem_pio2+0x3e8>
 8009e30:	f104 3bff 	add.w	fp, r4, #4294967295
 8009e34:	465b      	mov	r3, fp
 8009e36:	2200      	movs	r2, #0
 8009e38:	9904      	ldr	r1, [sp, #16]
 8009e3a:	428b      	cmp	r3, r1
 8009e3c:	da65      	bge.n	8009f0a <__kernel_rem_pio2+0x35a>
 8009e3e:	2a00      	cmp	r2, #0
 8009e40:	d07b      	beq.n	8009f3a <__kernel_rem_pio2+0x38a>
 8009e42:	ab0c      	add	r3, sp, #48	; 0x30
 8009e44:	f1aa 0a18 	sub.w	sl, sl, #24
 8009e48:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 80a0 	beq.w	8009f92 <__kernel_rem_pio2+0x3e2>
 8009e52:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009ed8 <__kernel_rem_pio2+0x328>
 8009e56:	4650      	mov	r0, sl
 8009e58:	f000 fb32 	bl	800a4c0 <scalbn>
 8009e5c:	4f23      	ldr	r7, [pc, #140]	; (8009eec <__kernel_rem_pio2+0x33c>)
 8009e5e:	ec55 4b10 	vmov	r4, r5, d0
 8009e62:	46d8      	mov	r8, fp
 8009e64:	2600      	movs	r6, #0
 8009e66:	f1b8 0f00 	cmp.w	r8, #0
 8009e6a:	f280 80cf 	bge.w	800a00c <__kernel_rem_pio2+0x45c>
 8009e6e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009ed0 <__kernel_rem_pio2+0x320>
 8009e72:	465f      	mov	r7, fp
 8009e74:	f04f 0800 	mov.w	r8, #0
 8009e78:	2f00      	cmp	r7, #0
 8009e7a:	f2c0 80fd 	blt.w	800a078 <__kernel_rem_pio2+0x4c8>
 8009e7e:	ab70      	add	r3, sp, #448	; 0x1c0
 8009e80:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009ef8 <__kernel_rem_pio2+0x348>
 8009e84:	ec55 4b18 	vmov	r4, r5, d8
 8009e88:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8009e8c:	2600      	movs	r6, #0
 8009e8e:	e0e5      	b.n	800a05c <__kernel_rem_pio2+0x4ac>
 8009e90:	2302      	movs	r3, #2
 8009e92:	9302      	str	r3, [sp, #8]
 8009e94:	e75c      	b.n	8009d50 <__kernel_rem_pio2+0x1a0>
 8009e96:	f8db 3000 	ldr.w	r3, [fp]
 8009e9a:	b955      	cbnz	r5, 8009eb2 <__kernel_rem_pio2+0x302>
 8009e9c:	b123      	cbz	r3, 8009ea8 <__kernel_rem_pio2+0x2f8>
 8009e9e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009ea2:	f8cb 3000 	str.w	r3, [fp]
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	3201      	adds	r2, #1
 8009eaa:	f10b 0b04 	add.w	fp, fp, #4
 8009eae:	461d      	mov	r5, r3
 8009eb0:	e755      	b.n	8009d5e <__kernel_rem_pio2+0x1ae>
 8009eb2:	1acb      	subs	r3, r1, r3
 8009eb4:	f8cb 3000 	str.w	r3, [fp]
 8009eb8:	462b      	mov	r3, r5
 8009eba:	e7f5      	b.n	8009ea8 <__kernel_rem_pio2+0x2f8>
 8009ebc:	1e62      	subs	r2, r4, #1
 8009ebe:	ab0c      	add	r3, sp, #48	; 0x30
 8009ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009ec8:	a90c      	add	r1, sp, #48	; 0x30
 8009eca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009ece:	e754      	b.n	8009d7a <__kernel_rem_pio2+0x1ca>
	...
 8009edc:	3ff00000 	.word	0x3ff00000
 8009ee0:	0800acd8 	.word	0x0800acd8
 8009ee4:	40200000 	.word	0x40200000
 8009ee8:	3ff00000 	.word	0x3ff00000
 8009eec:	3e700000 	.word	0x3e700000
 8009ef0:	41700000 	.word	0x41700000
 8009ef4:	3fe00000 	.word	0x3fe00000
 8009ef8:	0800ac98 	.word	0x0800ac98
 8009efc:	1e62      	subs	r2, r4, #1
 8009efe:	ab0c      	add	r3, sp, #48	; 0x30
 8009f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f04:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009f08:	e7de      	b.n	8009ec8 <__kernel_rem_pio2+0x318>
 8009f0a:	a90c      	add	r1, sp, #48	; 0x30
 8009f0c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	430a      	orrs	r2, r1
 8009f14:	e790      	b.n	8009e38 <__kernel_rem_pio2+0x288>
 8009f16:	3301      	adds	r3, #1
 8009f18:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	d0fa      	beq.n	8009f16 <__kernel_rem_pio2+0x366>
 8009f20:	9a08      	ldr	r2, [sp, #32]
 8009f22:	18e3      	adds	r3, r4, r3
 8009f24:	18a6      	adds	r6, r4, r2
 8009f26:	aa20      	add	r2, sp, #128	; 0x80
 8009f28:	1c65      	adds	r5, r4, #1
 8009f2a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009f2e:	9302      	str	r3, [sp, #8]
 8009f30:	9b02      	ldr	r3, [sp, #8]
 8009f32:	42ab      	cmp	r3, r5
 8009f34:	da04      	bge.n	8009f40 <__kernel_rem_pio2+0x390>
 8009f36:	461c      	mov	r4, r3
 8009f38:	e6b5      	b.n	8009ca6 <__kernel_rem_pio2+0xf6>
 8009f3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e7eb      	b.n	8009f18 <__kernel_rem_pio2+0x368>
 8009f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f46:	f7f6 fafd 	bl	8000544 <__aeabi_i2d>
 8009f4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f50:	46b3      	mov	fp, r6
 8009f52:	461c      	mov	r4, r3
 8009f54:	2700      	movs	r7, #0
 8009f56:	f04f 0800 	mov.w	r8, #0
 8009f5a:	f04f 0900 	mov.w	r9, #0
 8009f5e:	9b06      	ldr	r3, [sp, #24]
 8009f60:	429f      	cmp	r7, r3
 8009f62:	dd06      	ble.n	8009f72 <__kernel_rem_pio2+0x3c2>
 8009f64:	ab70      	add	r3, sp, #448	; 0x1c0
 8009f66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009f6a:	e9c3 8900 	strd	r8, r9, [r3]
 8009f6e:	3501      	adds	r5, #1
 8009f70:	e7de      	b.n	8009f30 <__kernel_rem_pio2+0x380>
 8009f72:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009f76:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009f7a:	f7f6 fb4d 	bl	8000618 <__aeabi_dmul>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	4640      	mov	r0, r8
 8009f84:	4649      	mov	r1, r9
 8009f86:	f7f6 f991 	bl	80002ac <__adddf3>
 8009f8a:	3701      	adds	r7, #1
 8009f8c:	4680      	mov	r8, r0
 8009f8e:	4689      	mov	r9, r1
 8009f90:	e7e5      	b.n	8009f5e <__kernel_rem_pio2+0x3ae>
 8009f92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f96:	e754      	b.n	8009e42 <__kernel_rem_pio2+0x292>
 8009f98:	ec47 6b10 	vmov	d0, r6, r7
 8009f9c:	f1ca 0000 	rsb	r0, sl, #0
 8009fa0:	f000 fa8e 	bl	800a4c0 <scalbn>
 8009fa4:	ec57 6b10 	vmov	r6, r7, d0
 8009fa8:	4b9f      	ldr	r3, [pc, #636]	; (800a228 <__kernel_rem_pio2+0x678>)
 8009faa:	ee10 0a10 	vmov	r0, s0
 8009fae:	2200      	movs	r2, #0
 8009fb0:	4639      	mov	r1, r7
 8009fb2:	f7f6 fdb7 	bl	8000b24 <__aeabi_dcmpge>
 8009fb6:	b300      	cbz	r0, 8009ffa <__kernel_rem_pio2+0x44a>
 8009fb8:	4b9c      	ldr	r3, [pc, #624]	; (800a22c <__kernel_rem_pio2+0x67c>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	4639      	mov	r1, r7
 8009fc0:	f7f6 fb2a 	bl	8000618 <__aeabi_dmul>
 8009fc4:	f7f6 fdd8 	bl	8000b78 <__aeabi_d2iz>
 8009fc8:	4605      	mov	r5, r0
 8009fca:	f7f6 fabb 	bl	8000544 <__aeabi_i2d>
 8009fce:	4b96      	ldr	r3, [pc, #600]	; (800a228 <__kernel_rem_pio2+0x678>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f7f6 fb21 	bl	8000618 <__aeabi_dmul>
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4602      	mov	r2, r0
 8009fda:	4639      	mov	r1, r7
 8009fdc:	4630      	mov	r0, r6
 8009fde:	f7f6 f963 	bl	80002a8 <__aeabi_dsub>
 8009fe2:	f7f6 fdc9 	bl	8000b78 <__aeabi_d2iz>
 8009fe6:	f104 0b01 	add.w	fp, r4, #1
 8009fea:	ab0c      	add	r3, sp, #48	; 0x30
 8009fec:	f10a 0a18 	add.w	sl, sl, #24
 8009ff0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009ff4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009ff8:	e72b      	b.n	8009e52 <__kernel_rem_pio2+0x2a2>
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	f7f6 fdbb 	bl	8000b78 <__aeabi_d2iz>
 800a002:	ab0c      	add	r3, sp, #48	; 0x30
 800a004:	46a3      	mov	fp, r4
 800a006:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a00a:	e722      	b.n	8009e52 <__kernel_rem_pio2+0x2a2>
 800a00c:	ab70      	add	r3, sp, #448	; 0x1c0
 800a00e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800a012:	ab0c      	add	r3, sp, #48	; 0x30
 800a014:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a018:	f7f6 fa94 	bl	8000544 <__aeabi_i2d>
 800a01c:	4622      	mov	r2, r4
 800a01e:	462b      	mov	r3, r5
 800a020:	f7f6 fafa 	bl	8000618 <__aeabi_dmul>
 800a024:	4632      	mov	r2, r6
 800a026:	e9c9 0100 	strd	r0, r1, [r9]
 800a02a:	463b      	mov	r3, r7
 800a02c:	4620      	mov	r0, r4
 800a02e:	4629      	mov	r1, r5
 800a030:	f7f6 faf2 	bl	8000618 <__aeabi_dmul>
 800a034:	f108 38ff 	add.w	r8, r8, #4294967295
 800a038:	4604      	mov	r4, r0
 800a03a:	460d      	mov	r5, r1
 800a03c:	e713      	b.n	8009e66 <__kernel_rem_pio2+0x2b6>
 800a03e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a042:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a046:	f7f6 fae7 	bl	8000618 <__aeabi_dmul>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	4620      	mov	r0, r4
 800a050:	4629      	mov	r1, r5
 800a052:	f7f6 f92b 	bl	80002ac <__adddf3>
 800a056:	3601      	adds	r6, #1
 800a058:	4604      	mov	r4, r0
 800a05a:	460d      	mov	r5, r1
 800a05c:	9b04      	ldr	r3, [sp, #16]
 800a05e:	429e      	cmp	r6, r3
 800a060:	dc01      	bgt.n	800a066 <__kernel_rem_pio2+0x4b6>
 800a062:	45b0      	cmp	r8, r6
 800a064:	daeb      	bge.n	800a03e <__kernel_rem_pio2+0x48e>
 800a066:	ab48      	add	r3, sp, #288	; 0x120
 800a068:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a06c:	e9c3 4500 	strd	r4, r5, [r3]
 800a070:	3f01      	subs	r7, #1
 800a072:	f108 0801 	add.w	r8, r8, #1
 800a076:	e6ff      	b.n	8009e78 <__kernel_rem_pio2+0x2c8>
 800a078:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	dc0b      	bgt.n	800a096 <__kernel_rem_pio2+0x4e6>
 800a07e:	2b00      	cmp	r3, #0
 800a080:	dc6e      	bgt.n	800a160 <__kernel_rem_pio2+0x5b0>
 800a082:	d045      	beq.n	800a110 <__kernel_rem_pio2+0x560>
 800a084:	9b07      	ldr	r3, [sp, #28]
 800a086:	f003 0007 	and.w	r0, r3, #7
 800a08a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a08e:	ecbd 8b02 	vpop	{d8}
 800a092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a096:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a098:	2b03      	cmp	r3, #3
 800a09a:	d1f3      	bne.n	800a084 <__kernel_rem_pio2+0x4d4>
 800a09c:	ab48      	add	r3, sp, #288	; 0x120
 800a09e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800a0a2:	46d0      	mov	r8, sl
 800a0a4:	46d9      	mov	r9, fp
 800a0a6:	f1b9 0f00 	cmp.w	r9, #0
 800a0aa:	f1a8 0808 	sub.w	r8, r8, #8
 800a0ae:	dc64      	bgt.n	800a17a <__kernel_rem_pio2+0x5ca>
 800a0b0:	465c      	mov	r4, fp
 800a0b2:	2c01      	cmp	r4, #1
 800a0b4:	f1aa 0a08 	sub.w	sl, sl, #8
 800a0b8:	dc7e      	bgt.n	800a1b8 <__kernel_rem_pio2+0x608>
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	2100      	movs	r1, #0
 800a0be:	f1bb 0f01 	cmp.w	fp, #1
 800a0c2:	f300 8097 	bgt.w	800a1f4 <__kernel_rem_pio2+0x644>
 800a0c6:	9b02      	ldr	r3, [sp, #8]
 800a0c8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800a0cc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f040 8099 	bne.w	800a208 <__kernel_rem_pio2+0x658>
 800a0d6:	9b01      	ldr	r3, [sp, #4]
 800a0d8:	e9c3 5600 	strd	r5, r6, [r3]
 800a0dc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a0e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a0e4:	e7ce      	b.n	800a084 <__kernel_rem_pio2+0x4d4>
 800a0e6:	ab48      	add	r3, sp, #288	; 0x120
 800a0e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f0:	f7f6 f8dc 	bl	80002ac <__adddf3>
 800a0f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0f8:	f1bb 0f00 	cmp.w	fp, #0
 800a0fc:	daf3      	bge.n	800a0e6 <__kernel_rem_pio2+0x536>
 800a0fe:	9b02      	ldr	r3, [sp, #8]
 800a100:	b113      	cbz	r3, 800a108 <__kernel_rem_pio2+0x558>
 800a102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a106:	4619      	mov	r1, r3
 800a108:	9b01      	ldr	r3, [sp, #4]
 800a10a:	e9c3 0100 	strd	r0, r1, [r3]
 800a10e:	e7b9      	b.n	800a084 <__kernel_rem_pio2+0x4d4>
 800a110:	2000      	movs	r0, #0
 800a112:	2100      	movs	r1, #0
 800a114:	e7f0      	b.n	800a0f8 <__kernel_rem_pio2+0x548>
 800a116:	ab48      	add	r3, sp, #288	; 0x120
 800a118:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f7f6 f8c4 	bl	80002ac <__adddf3>
 800a124:	3c01      	subs	r4, #1
 800a126:	2c00      	cmp	r4, #0
 800a128:	daf5      	bge.n	800a116 <__kernel_rem_pio2+0x566>
 800a12a:	9b02      	ldr	r3, [sp, #8]
 800a12c:	b1e3      	cbz	r3, 800a168 <__kernel_rem_pio2+0x5b8>
 800a12e:	4602      	mov	r2, r0
 800a130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a134:	9c01      	ldr	r4, [sp, #4]
 800a136:	e9c4 2300 	strd	r2, r3, [r4]
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a142:	f7f6 f8b1 	bl	80002a8 <__aeabi_dsub>
 800a146:	ad4a      	add	r5, sp, #296	; 0x128
 800a148:	2401      	movs	r4, #1
 800a14a:	45a3      	cmp	fp, r4
 800a14c:	da0f      	bge.n	800a16e <__kernel_rem_pio2+0x5be>
 800a14e:	9b02      	ldr	r3, [sp, #8]
 800a150:	b113      	cbz	r3, 800a158 <__kernel_rem_pio2+0x5a8>
 800a152:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a156:	4619      	mov	r1, r3
 800a158:	9b01      	ldr	r3, [sp, #4]
 800a15a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a15e:	e791      	b.n	800a084 <__kernel_rem_pio2+0x4d4>
 800a160:	465c      	mov	r4, fp
 800a162:	2000      	movs	r0, #0
 800a164:	2100      	movs	r1, #0
 800a166:	e7de      	b.n	800a126 <__kernel_rem_pio2+0x576>
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	e7e2      	b.n	800a134 <__kernel_rem_pio2+0x584>
 800a16e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a172:	f7f6 f89b 	bl	80002ac <__adddf3>
 800a176:	3401      	adds	r4, #1
 800a178:	e7e7      	b.n	800a14a <__kernel_rem_pio2+0x59a>
 800a17a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800a17e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800a182:	4620      	mov	r0, r4
 800a184:	4632      	mov	r2, r6
 800a186:	463b      	mov	r3, r7
 800a188:	4629      	mov	r1, r5
 800a18a:	f7f6 f88f 	bl	80002ac <__adddf3>
 800a18e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	4620      	mov	r0, r4
 800a198:	4629      	mov	r1, r5
 800a19a:	f7f6 f885 	bl	80002a8 <__aeabi_dsub>
 800a19e:	4632      	mov	r2, r6
 800a1a0:	463b      	mov	r3, r7
 800a1a2:	f7f6 f883 	bl	80002ac <__adddf3>
 800a1a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a1aa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800a1ae:	ed88 7b00 	vstr	d7, [r8]
 800a1b2:	f109 39ff 	add.w	r9, r9, #4294967295
 800a1b6:	e776      	b.n	800a0a6 <__kernel_rem_pio2+0x4f6>
 800a1b8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a1bc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	4632      	mov	r2, r6
 800a1c4:	463b      	mov	r3, r7
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	f7f6 f870 	bl	80002ac <__adddf3>
 800a1cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	f7f6 f866 	bl	80002a8 <__aeabi_dsub>
 800a1dc:	4632      	mov	r2, r6
 800a1de:	463b      	mov	r3, r7
 800a1e0:	f7f6 f864 	bl	80002ac <__adddf3>
 800a1e4:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a1e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a1ec:	ed8a 7b00 	vstr	d7, [sl]
 800a1f0:	3c01      	subs	r4, #1
 800a1f2:	e75e      	b.n	800a0b2 <__kernel_rem_pio2+0x502>
 800a1f4:	ab48      	add	r3, sp, #288	; 0x120
 800a1f6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	f7f6 f855 	bl	80002ac <__adddf3>
 800a202:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a206:	e75a      	b.n	800a0be <__kernel_rem_pio2+0x50e>
 800a208:	9b01      	ldr	r3, [sp, #4]
 800a20a:	9a01      	ldr	r2, [sp, #4]
 800a20c:	601d      	str	r5, [r3, #0]
 800a20e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a212:	605c      	str	r4, [r3, #4]
 800a214:	609f      	str	r7, [r3, #8]
 800a216:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a21a:	60d3      	str	r3, [r2, #12]
 800a21c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a220:	6110      	str	r0, [r2, #16]
 800a222:	6153      	str	r3, [r2, #20]
 800a224:	e72e      	b.n	800a084 <__kernel_rem_pio2+0x4d4>
 800a226:	bf00      	nop
 800a228:	41700000 	.word	0x41700000
 800a22c:	3e700000 	.word	0x3e700000

0800a230 <__kernel_sin>:
 800a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	ed2d 8b04 	vpush	{d8-d9}
 800a238:	eeb0 8a41 	vmov.f32	s16, s2
 800a23c:	eef0 8a61 	vmov.f32	s17, s3
 800a240:	ec55 4b10 	vmov	r4, r5, d0
 800a244:	b083      	sub	sp, #12
 800a246:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a24a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a24e:	9001      	str	r0, [sp, #4]
 800a250:	da06      	bge.n	800a260 <__kernel_sin+0x30>
 800a252:	ee10 0a10 	vmov	r0, s0
 800a256:	4629      	mov	r1, r5
 800a258:	f7f6 fc8e 	bl	8000b78 <__aeabi_d2iz>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d051      	beq.n	800a304 <__kernel_sin+0xd4>
 800a260:	4622      	mov	r2, r4
 800a262:	462b      	mov	r3, r5
 800a264:	4620      	mov	r0, r4
 800a266:	4629      	mov	r1, r5
 800a268:	f7f6 f9d6 	bl	8000618 <__aeabi_dmul>
 800a26c:	4682      	mov	sl, r0
 800a26e:	468b      	mov	fp, r1
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4620      	mov	r0, r4
 800a276:	4629      	mov	r1, r5
 800a278:	f7f6 f9ce 	bl	8000618 <__aeabi_dmul>
 800a27c:	a341      	add	r3, pc, #260	; (adr r3, 800a384 <__kernel_sin+0x154>)
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	4680      	mov	r8, r0
 800a284:	4689      	mov	r9, r1
 800a286:	4650      	mov	r0, sl
 800a288:	4659      	mov	r1, fp
 800a28a:	f7f6 f9c5 	bl	8000618 <__aeabi_dmul>
 800a28e:	a33f      	add	r3, pc, #252	; (adr r3, 800a38c <__kernel_sin+0x15c>)
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	f7f6 f808 	bl	80002a8 <__aeabi_dsub>
 800a298:	4652      	mov	r2, sl
 800a29a:	465b      	mov	r3, fp
 800a29c:	f7f6 f9bc 	bl	8000618 <__aeabi_dmul>
 800a2a0:	a33c      	add	r3, pc, #240	; (adr r3, 800a394 <__kernel_sin+0x164>)
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	f7f6 f801 	bl	80002ac <__adddf3>
 800a2aa:	4652      	mov	r2, sl
 800a2ac:	465b      	mov	r3, fp
 800a2ae:	f7f6 f9b3 	bl	8000618 <__aeabi_dmul>
 800a2b2:	a33a      	add	r3, pc, #232	; (adr r3, 800a39c <__kernel_sin+0x16c>)
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	f7f5 fff6 	bl	80002a8 <__aeabi_dsub>
 800a2bc:	4652      	mov	r2, sl
 800a2be:	465b      	mov	r3, fp
 800a2c0:	f7f6 f9aa 	bl	8000618 <__aeabi_dmul>
 800a2c4:	a337      	add	r3, pc, #220	; (adr r3, 800a3a4 <__kernel_sin+0x174>)
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	f7f5 ffef 	bl	80002ac <__adddf3>
 800a2ce:	9b01      	ldr	r3, [sp, #4]
 800a2d0:	4606      	mov	r6, r0
 800a2d2:	460f      	mov	r7, r1
 800a2d4:	b9eb      	cbnz	r3, 800a312 <__kernel_sin+0xe2>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4650      	mov	r0, sl
 800a2dc:	4659      	mov	r1, fp
 800a2de:	f7f6 f99b 	bl	8000618 <__aeabi_dmul>
 800a2e2:	a325      	add	r3, pc, #148	; (adr r3, 800a378 <__kernel_sin+0x148>)
 800a2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e8:	f7f5 ffde 	bl	80002a8 <__aeabi_dsub>
 800a2ec:	4642      	mov	r2, r8
 800a2ee:	464b      	mov	r3, r9
 800a2f0:	f7f6 f992 	bl	8000618 <__aeabi_dmul>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	f7f5 ffd6 	bl	80002ac <__adddf3>
 800a300:	4604      	mov	r4, r0
 800a302:	460d      	mov	r5, r1
 800a304:	ec45 4b10 	vmov	d0, r4, r5
 800a308:	b003      	add	sp, #12
 800a30a:	ecbd 8b04 	vpop	{d8-d9}
 800a30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a312:	4b1b      	ldr	r3, [pc, #108]	; (800a380 <__kernel_sin+0x150>)
 800a314:	ec51 0b18 	vmov	r0, r1, d8
 800a318:	2200      	movs	r2, #0
 800a31a:	f7f6 f97d 	bl	8000618 <__aeabi_dmul>
 800a31e:	4632      	mov	r2, r6
 800a320:	ec41 0b19 	vmov	d9, r0, r1
 800a324:	463b      	mov	r3, r7
 800a326:	4640      	mov	r0, r8
 800a328:	4649      	mov	r1, r9
 800a32a:	f7f6 f975 	bl	8000618 <__aeabi_dmul>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	ec51 0b19 	vmov	r0, r1, d9
 800a336:	f7f5 ffb7 	bl	80002a8 <__aeabi_dsub>
 800a33a:	4652      	mov	r2, sl
 800a33c:	465b      	mov	r3, fp
 800a33e:	f7f6 f96b 	bl	8000618 <__aeabi_dmul>
 800a342:	ec53 2b18 	vmov	r2, r3, d8
 800a346:	f7f5 ffaf 	bl	80002a8 <__aeabi_dsub>
 800a34a:	a30b      	add	r3, pc, #44	; (adr r3, 800a378 <__kernel_sin+0x148>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	4606      	mov	r6, r0
 800a352:	460f      	mov	r7, r1
 800a354:	4640      	mov	r0, r8
 800a356:	4649      	mov	r1, r9
 800a358:	f7f6 f95e 	bl	8000618 <__aeabi_dmul>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	4630      	mov	r0, r6
 800a362:	4639      	mov	r1, r7
 800a364:	f7f5 ffa2 	bl	80002ac <__adddf3>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	4620      	mov	r0, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	f7f5 ff9a 	bl	80002a8 <__aeabi_dsub>
 800a374:	e7c4      	b.n	800a300 <__kernel_sin+0xd0>
 800a376:	bf00      	nop
 800a378:	55555549 	.word	0x55555549
 800a37c:	3fc55555 	.word	0x3fc55555
 800a380:	3fe00000 	.word	0x3fe00000
 800a384:	5acfd57c 	.word	0x5acfd57c
 800a388:	3de5d93a 	.word	0x3de5d93a
 800a38c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a390:	3e5ae5e6 	.word	0x3e5ae5e6
 800a394:	57b1fe7d 	.word	0x57b1fe7d
 800a398:	3ec71de3 	.word	0x3ec71de3
 800a39c:	19c161d5 	.word	0x19c161d5
 800a3a0:	3f2a01a0 	.word	0x3f2a01a0
 800a3a4:	1110f8a6 	.word	0x1110f8a6
 800a3a8:	3f811111 	.word	0x3f811111

0800a3ac <fabs>:
 800a3ac:	ec51 0b10 	vmov	r0, r1, d0
 800a3b0:	ee10 2a10 	vmov	r2, s0
 800a3b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3b8:	ec43 2b10 	vmov	d0, r2, r3
 800a3bc:	4770      	bx	lr
	...

0800a3c0 <floor>:
 800a3c0:	ec51 0b10 	vmov	r0, r1, d0
 800a3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a3cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a3d0:	2e13      	cmp	r6, #19
 800a3d2:	ee10 5a10 	vmov	r5, s0
 800a3d6:	ee10 8a10 	vmov	r8, s0
 800a3da:	460c      	mov	r4, r1
 800a3dc:	dc32      	bgt.n	800a444 <floor+0x84>
 800a3de:	2e00      	cmp	r6, #0
 800a3e0:	da14      	bge.n	800a40c <floor+0x4c>
 800a3e2:	a333      	add	r3, pc, #204	; (adr r3, 800a4b0 <floor+0xf0>)
 800a3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e8:	f7f5 ff60 	bl	80002ac <__adddf3>
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f7f6 fba2 	bl	8000b38 <__aeabi_dcmpgt>
 800a3f4:	b138      	cbz	r0, 800a406 <floor+0x46>
 800a3f6:	2c00      	cmp	r4, #0
 800a3f8:	da57      	bge.n	800a4aa <floor+0xea>
 800a3fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a3fe:	431d      	orrs	r5, r3
 800a400:	d001      	beq.n	800a406 <floor+0x46>
 800a402:	4c2d      	ldr	r4, [pc, #180]	; (800a4b8 <floor+0xf8>)
 800a404:	2500      	movs	r5, #0
 800a406:	4621      	mov	r1, r4
 800a408:	4628      	mov	r0, r5
 800a40a:	e025      	b.n	800a458 <floor+0x98>
 800a40c:	4f2b      	ldr	r7, [pc, #172]	; (800a4bc <floor+0xfc>)
 800a40e:	4137      	asrs	r7, r6
 800a410:	ea01 0307 	and.w	r3, r1, r7
 800a414:	4303      	orrs	r3, r0
 800a416:	d01f      	beq.n	800a458 <floor+0x98>
 800a418:	a325      	add	r3, pc, #148	; (adr r3, 800a4b0 <floor+0xf0>)
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	f7f5 ff45 	bl	80002ac <__adddf3>
 800a422:	2200      	movs	r2, #0
 800a424:	2300      	movs	r3, #0
 800a426:	f7f6 fb87 	bl	8000b38 <__aeabi_dcmpgt>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d0eb      	beq.n	800a406 <floor+0x46>
 800a42e:	2c00      	cmp	r4, #0
 800a430:	bfbe      	ittt	lt
 800a432:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a436:	fa43 f606 	asrlt.w	r6, r3, r6
 800a43a:	19a4      	addlt	r4, r4, r6
 800a43c:	ea24 0407 	bic.w	r4, r4, r7
 800a440:	2500      	movs	r5, #0
 800a442:	e7e0      	b.n	800a406 <floor+0x46>
 800a444:	2e33      	cmp	r6, #51	; 0x33
 800a446:	dd0b      	ble.n	800a460 <floor+0xa0>
 800a448:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a44c:	d104      	bne.n	800a458 <floor+0x98>
 800a44e:	ee10 2a10 	vmov	r2, s0
 800a452:	460b      	mov	r3, r1
 800a454:	f7f5 ff2a 	bl	80002ac <__adddf3>
 800a458:	ec41 0b10 	vmov	d0, r0, r1
 800a45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a460:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a464:	f04f 33ff 	mov.w	r3, #4294967295
 800a468:	fa23 f707 	lsr.w	r7, r3, r7
 800a46c:	4207      	tst	r7, r0
 800a46e:	d0f3      	beq.n	800a458 <floor+0x98>
 800a470:	a30f      	add	r3, pc, #60	; (adr r3, 800a4b0 <floor+0xf0>)
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	f7f5 ff19 	bl	80002ac <__adddf3>
 800a47a:	2200      	movs	r2, #0
 800a47c:	2300      	movs	r3, #0
 800a47e:	f7f6 fb5b 	bl	8000b38 <__aeabi_dcmpgt>
 800a482:	2800      	cmp	r0, #0
 800a484:	d0bf      	beq.n	800a406 <floor+0x46>
 800a486:	2c00      	cmp	r4, #0
 800a488:	da02      	bge.n	800a490 <floor+0xd0>
 800a48a:	2e14      	cmp	r6, #20
 800a48c:	d103      	bne.n	800a496 <floor+0xd6>
 800a48e:	3401      	adds	r4, #1
 800a490:	ea25 0507 	bic.w	r5, r5, r7
 800a494:	e7b7      	b.n	800a406 <floor+0x46>
 800a496:	2301      	movs	r3, #1
 800a498:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a49c:	fa03 f606 	lsl.w	r6, r3, r6
 800a4a0:	4435      	add	r5, r6
 800a4a2:	4545      	cmp	r5, r8
 800a4a4:	bf38      	it	cc
 800a4a6:	18e4      	addcc	r4, r4, r3
 800a4a8:	e7f2      	b.n	800a490 <floor+0xd0>
 800a4aa:	2500      	movs	r5, #0
 800a4ac:	462c      	mov	r4, r5
 800a4ae:	e7aa      	b.n	800a406 <floor+0x46>
 800a4b0:	8800759c 	.word	0x8800759c
 800a4b4:	7e37e43c 	.word	0x7e37e43c
 800a4b8:	bff00000 	.word	0xbff00000
 800a4bc:	000fffff 	.word	0x000fffff

0800a4c0 <scalbn>:
 800a4c0:	b570      	push	{r4, r5, r6, lr}
 800a4c2:	ec55 4b10 	vmov	r4, r5, d0
 800a4c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	462b      	mov	r3, r5
 800a4ce:	b99a      	cbnz	r2, 800a4f8 <scalbn+0x38>
 800a4d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a4d4:	4323      	orrs	r3, r4
 800a4d6:	d036      	beq.n	800a546 <scalbn+0x86>
 800a4d8:	4b39      	ldr	r3, [pc, #228]	; (800a5c0 <scalbn+0x100>)
 800a4da:	4629      	mov	r1, r5
 800a4dc:	ee10 0a10 	vmov	r0, s0
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f7f6 f899 	bl	8000618 <__aeabi_dmul>
 800a4e6:	4b37      	ldr	r3, [pc, #220]	; (800a5c4 <scalbn+0x104>)
 800a4e8:	429e      	cmp	r6, r3
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	460d      	mov	r5, r1
 800a4ee:	da10      	bge.n	800a512 <scalbn+0x52>
 800a4f0:	a32b      	add	r3, pc, #172	; (adr r3, 800a5a0 <scalbn+0xe0>)
 800a4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f6:	e03a      	b.n	800a56e <scalbn+0xae>
 800a4f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a4fc:	428a      	cmp	r2, r1
 800a4fe:	d10c      	bne.n	800a51a <scalbn+0x5a>
 800a500:	ee10 2a10 	vmov	r2, s0
 800a504:	4620      	mov	r0, r4
 800a506:	4629      	mov	r1, r5
 800a508:	f7f5 fed0 	bl	80002ac <__adddf3>
 800a50c:	4604      	mov	r4, r0
 800a50e:	460d      	mov	r5, r1
 800a510:	e019      	b.n	800a546 <scalbn+0x86>
 800a512:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a516:	460b      	mov	r3, r1
 800a518:	3a36      	subs	r2, #54	; 0x36
 800a51a:	4432      	add	r2, r6
 800a51c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a520:	428a      	cmp	r2, r1
 800a522:	dd08      	ble.n	800a536 <scalbn+0x76>
 800a524:	2d00      	cmp	r5, #0
 800a526:	a120      	add	r1, pc, #128	; (adr r1, 800a5a8 <scalbn+0xe8>)
 800a528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a52c:	da1c      	bge.n	800a568 <scalbn+0xa8>
 800a52e:	a120      	add	r1, pc, #128	; (adr r1, 800a5b0 <scalbn+0xf0>)
 800a530:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a534:	e018      	b.n	800a568 <scalbn+0xa8>
 800a536:	2a00      	cmp	r2, #0
 800a538:	dd08      	ble.n	800a54c <scalbn+0x8c>
 800a53a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a53e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a542:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a546:	ec45 4b10 	vmov	d0, r4, r5
 800a54a:	bd70      	pop	{r4, r5, r6, pc}
 800a54c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a550:	da19      	bge.n	800a586 <scalbn+0xc6>
 800a552:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a556:	429e      	cmp	r6, r3
 800a558:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a55c:	dd0a      	ble.n	800a574 <scalbn+0xb4>
 800a55e:	a112      	add	r1, pc, #72	; (adr r1, 800a5a8 <scalbn+0xe8>)
 800a560:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1e2      	bne.n	800a52e <scalbn+0x6e>
 800a568:	a30f      	add	r3, pc, #60	; (adr r3, 800a5a8 <scalbn+0xe8>)
 800a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56e:	f7f6 f853 	bl	8000618 <__aeabi_dmul>
 800a572:	e7cb      	b.n	800a50c <scalbn+0x4c>
 800a574:	a10a      	add	r1, pc, #40	; (adr r1, 800a5a0 <scalbn+0xe0>)
 800a576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d0b8      	beq.n	800a4f0 <scalbn+0x30>
 800a57e:	a10e      	add	r1, pc, #56	; (adr r1, 800a5b8 <scalbn+0xf8>)
 800a580:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a584:	e7b4      	b.n	800a4f0 <scalbn+0x30>
 800a586:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a58a:	3236      	adds	r2, #54	; 0x36
 800a58c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a590:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a594:	4620      	mov	r0, r4
 800a596:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <scalbn+0x108>)
 800a598:	2200      	movs	r2, #0
 800a59a:	e7e8      	b.n	800a56e <scalbn+0xae>
 800a59c:	f3af 8000 	nop.w
 800a5a0:	c2f8f359 	.word	0xc2f8f359
 800a5a4:	01a56e1f 	.word	0x01a56e1f
 800a5a8:	8800759c 	.word	0x8800759c
 800a5ac:	7e37e43c 	.word	0x7e37e43c
 800a5b0:	8800759c 	.word	0x8800759c
 800a5b4:	fe37e43c 	.word	0xfe37e43c
 800a5b8:	c2f8f359 	.word	0xc2f8f359
 800a5bc:	81a56e1f 	.word	0x81a56e1f
 800a5c0:	43500000 	.word	0x43500000
 800a5c4:	ffff3cb0 	.word	0xffff3cb0
 800a5c8:	3c900000 	.word	0x3c900000

0800a5cc <_getpid>:
 800a5cc:	4b02      	ldr	r3, [pc, #8]	; (800a5d8 <_getpid+0xc>)
 800a5ce:	2258      	movs	r2, #88	; 0x58
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d6:	4770      	bx	lr
 800a5d8:	20000308 	.word	0x20000308

0800a5dc <_kill>:
 800a5dc:	4b02      	ldr	r3, [pc, #8]	; (800a5e8 <_kill+0xc>)
 800a5de:	2258      	movs	r2, #88	; 0x58
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e6:	4770      	bx	lr
 800a5e8:	20000308 	.word	0x20000308

0800a5ec <_exit>:
 800a5ec:	e7fe      	b.n	800a5ec <_exit>
	...

0800a5f0 <_init>:
 800a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f2:	bf00      	nop
 800a5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5f6:	bc08      	pop	{r3}
 800a5f8:	469e      	mov	lr, r3
 800a5fa:	4770      	bx	lr

0800a5fc <_fini>:
 800a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fe:	bf00      	nop
 800a600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a602:	bc08      	pop	{r3}
 800a604:	469e      	mov	lr, r3
 800a606:	4770      	bx	lr
